digraph G {
"<renderer.xy.ClusteredXYBarRenderer: org.jfree.data.Range findDomainBoundsWithOffset(org.jfree.data.xy.IntervalXYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<XYBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: boolean isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)>";
"<JFreeChart: org.jfree.chart.entity.EntityCollection drawTitle(org.jfree.chart.title.Title,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.JFreeChart: java.awt.geom.Rectangle2D createAlignedRectangle2D(org.jfree.chart.util.Size2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)>";
"<AbstractCategoryItemRenderer: void setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.category.GroupedStackedBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer: boolean equals(java.lang.Object)>";
"<CombinedRangeXYPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<ShapeList: java.lang.Object clone()>" -> "<org.jfree.chart.util.AbstractObjectList: java.lang.Object clone()>";
"<demo.PieChartDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart)>";
"<plot.CategoryMarker: void <init>(java.lang.Comparable,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>" -> "<org.jfree.chart.plot.Marker: void <init>(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<axis.NumberTickUnit: int hashCode()>" -> "<org.jfree.chart.axis.TickUnit: int hashCode()>";
"<plot.dial.StandardDialFrame: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<renderer.xy.XYAreaRenderer2: void setOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.XYStepRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.XYStepRenderer: void drawLine(java.awt.Graphics2D,java.awt.geom.Line2D,double,double,double,double)>";
"<MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.XYLineAndShapeRenderer: void drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<DefaultKeyedValues2D: void <init>()>" -> "<org.jfree.data.DefaultKeyedValues2D: void <init>(boolean)>";
"<block.RectangleConstraint: org.jfree.chart.block.RectangleConstraint toUnconstrainedHeight()>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<xy.XYLineAndShapeRenderer: void setDrawOutlines(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<SymbolAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<PeriodAxis: org.jfree.chart.axis.AxisState drawTickLabels(int,java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<renderer.category.BarRenderer: void setMaximumBarWidth(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.LogAxis: void setBase(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<dial.DialBackground: void setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<category.StackedBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.data.DataUtilities: double calculateColumnTotal(org.jfree.data.Values2D,int)>";
"<renderer.category.BarRenderer: void setIncludeBaseInRange(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CyclicNumberAxis: java.util.List refreshVerticalTicks(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.CyclicNumberAxis$CycleBoundTick: void <init>(boolean,java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<plot.CombinedRangeCategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>" -> "<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<ScatterRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<CombinedDomainCategoryPlot: void <init>()>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>()>";
"<xy.XYDifferenceRenderer: void drawItemPass0(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.xy.XYDifferenceRenderer: boolean areSeriesDisjoint(org.jfree.data.xy.XYDataset)>";
"<PeriodAxis: void drawTickMarks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<statistics.DefaultBoxAndWhiskerCategoryDataset: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<LogAxis: void autoAdjustRange()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<plot.SpiderWebPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<category.CategoryStepRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<plot.XYPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<ChartUtilities: void writeBufferedImageAsJPEG(java.io.OutputStream,java.awt.image.BufferedImage)>" -> "<org.jfree.chart.ChartUtilities: void writeBufferedImageAsJPEG(java.io.OutputStream,float,java.awt.image.BufferedImage)>";
"<axis.PeriodAxisLabelInfo: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: float[] deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)>";
"<MeterNeedle: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<plot.MeterPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.MeterInterval: void <init>(java.lang.String,org.jfree.data.Range,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<PaintScaleLegend: void <init>(org.jfree.chart.renderer.PaintScale,org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.title.Title: void <init>()>";
"<axis.SegmentedTimeline: org.jfree.chart.axis.SegmentedTimeline newFifteenMinuteTimeline()>" -> "<org.jfree.chart.axis.SegmentedTimeline: org.jfree.chart.axis.SegmentedTimeline newMondayThroughFridayTimeline()>";
"<plot.ThermometerPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<XYBoxAnnotation: void <init>(double,double,double,double,java.awt.Stroke,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
"<SerialDate: org.jfree.data.time.SerialDate getEndOfCurrentMonth(org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: int lastDayOfMonth(int,int)>";
"<annotations.CategoryPointerAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<time.Millisecond: void <init>(int,int,int,int,int,int,int)>" -> "<org.jfree.data.time.Millisecond: void <init>(int,org.jfree.data.time.Second)>";
"<axis.PeriodAxisLabelInfo: org.jfree.data.time.RegularTimePeriod createInstance(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.chart.axis.PeriodAxisLabelInfo: java.lang.Class class$(java.lang.String)>";
"<xy.XYDifferenceRenderer: void drawItemPass1(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.entity.XYItemEntity: void <init>(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)>";
"<time.DynamicTimeSeriesCollection: void fireSeriesChanged()>" -> "<org.jfree.data.general.SeriesChangeEvent: void <init>(java.lang.Object)>";
"<XYShapeAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.GrayPaintScale: void <init>()>" -> "<org.jfree.chart.renderer.GrayPaintScale: void <init>(double,double)>";
"<WaferMapRenderer: org.jfree.chart.LegendItemCollection getLegendCollection()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<io.CSV: org.jfree.data.category.CategoryDataset readCategoryDataset(java.io.Reader)>" -> "<org.jfree.data.io.CSV: java.util.List extractColumnKeys(java.lang.String)>";
"<renderer.category.StatisticalBarRenderer: void setErrorIndicatorStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<labels.StandardXYSeriesLabelGenerator: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.String)>";
"<MeterNeedle: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<BarRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>";
"<time.SerialDate: org.jfree.data.time.SerialDate createInstance(int)>" -> "<org.jfree.data.time.SpreadsheetDate: void <init>(int)>";
"<PiePlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<XYSeries: org.jfree.data.xy.XYDataItem addOrUpdate(java.lang.Number,java.lang.Number)>" -> "<org.jfree.data.xy.XYDataItem: java.lang.Object clone()>";
"<ThermometerPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<block.BlockContainer: java.lang.Object clone()>" -> "<org.jfree.chart.block.AbstractBlock: java.lang.Object clone()>";
"<PolarPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.TickUnit: boolean equals(java.lang.Object)>";
"<plot.dial.DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<MarkerAxisBand: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.StackedXYAreaRenderer2: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: double[] getStackValues(org.jfree.data.xy.TableXYDataset,int,int)>";
"<time.Week: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Week: void <init>(int,int)>";
"<title.TextTitle: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<xy.StackedXYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<statistics.HistogramDataset: void setType(org.jfree.data.statistics.HistogramType)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<LegendGraphic: int hashCode()>" -> "<org.jfree.chart.util.ObjectUtilities: int hashCode(java.lang.Object)>";
"<PeriodAxisLabelInfo: void <init>(java.lang.Class,java.text.DateFormat)>" -> "<org.jfree.chart.axis.PeriodAxisLabelInfo: void <init>(java.lang.Class,java.text.DateFormat,org.jfree.chart.util.RectangleInsets,java.awt.Font,java.awt.Paint,boolean,java.awt.Stroke,java.awt.Paint)>";
"<dial.ArcDialFrame: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<io.CSV: void extractRowKeyAndData(java.lang.String,org.jfree.data.category.DefaultCategoryDataset,java.util.List)>" -> "<org.jfree.data.io.CSV: java.lang.String removeStringDelimiters(java.lang.String)>";
"<renderer.category.LineAndShapeRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void <init>(boolean,boolean)>";
"<MovingAverage: org.jfree.data.xy.XYDataset createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,double,double)>" -> "<org.jfree.data.xy.XYSeriesCollection: void <init>()>";
"<time.SpreadsheetDate: void <init>(int)>" -> "<org.jfree.data.time.SerialDate: void <init>()>";
"<DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>";
"<general.CombinedDataset: java.lang.Number getY(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<PolarChartPanel: void <init>(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.PolarChartPanel: void <init>(org.jfree.chart.JFreeChart,boolean)>";
"<util.PaintUtilities: java.lang.String colorToString(java.awt.Color)>" -> "<org.jfree.chart.util.PaintUtilities: java.lang.Class class$(java.lang.String)>";
"<DynamicTimeSeriesCollection: void appendData(float[],int,int)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence: void <init>(org.jfree.data.time.DynamicTimeSeriesCollection,int)>";
"<ValueAxis: void setRangeWithMargins(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.data.Range: org.jfree.data.Range expand(org.jfree.data.Range,double,double)>";
"<CategoryAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.axis.CategoryAxis: void writePaintMap(java.util.Map,java.io.ObjectOutputStream)>";
"<CombinedRangeCategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<plot.dial.ArcDialFrame: void <init>()>" -> "<org.jfree.chart.plot.dial.ArcDialFrame: void <init>(double,double)>";
"<annotations.CategoryPointerAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<LegendTitle: org.jfree.chart.block.Block createLegendItemBlock(org.jfree.chart.LegendItem)>" -> "<org.jfree.chart.block.LabelBlock: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<block.AbstractBlock: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<labels.StandardCategoryToolTipGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: boolean equals(java.lang.Object)>";
"<util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.geom.Arc2D,java.awt.geom.Arc2D)>";
"<xy.StandardXYItemRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>";
"<Millisecond: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<SimpleHistogramDataset: void addObservation(double,boolean)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<time.Second: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Second: void <init>(java.util.Date,java.util.TimeZone)>";
"<xy.XYBubbleRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYBubbleRenderer: void <init>(int)>";
"<MeterPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<JFreeChart: void setTitle(java.lang.String)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font)>";
"<Millisecond: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Millisecond: void <init>(java.util.Date,java.util.TimeZone)>";
"<EncoderUtil: byte[] encode(java.awt.image.BufferedImage,java.lang.String,float,boolean)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,float,boolean)>";
"<CyclicNumberAxis: void <init>(double)>" -> "<org.jfree.chart.axis.CyclicNumberAxis: void <init>(double,double)>";
"<xy.XYSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.XYSeriesCollection: void <init>(org.jfree.data.xy.XYSeries)>";
"<renderer.category.BarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<title.TextTitle: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<category.LineAndShapeRenderer: void setUseFillPaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWindPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.WindDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<NumberAxis: void <init>()>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<title.PaintScaleLegend: void setAxisLocation(org.jfree.chart.axis.AxisLocation)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<category.WaterfallBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.WaterfallBarRenderer: void <init>(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)>";
"<ui.BasicProjectInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.ui.BasicProjectInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
"<ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<gantt.TaskSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<DateAxis: void setTimeline(org.jfree.chart.axis.Timeline)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<DialValueIndicator: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.XYBarDataset: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<category.LineAndShapeRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<labels.StandardPieToolTipGenerator: java.lang.Object clone()>" -> "<org.jfree.chart.labels.AbstractPieItemLabelGenerator: java.lang.Object clone()>";
"<ValueMarker: void setValue(double)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<time.DynamicTimeSeriesCollection: org.jfree.data.time.RegularTimePeriod advanceTime()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<xy.XYLine3DRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<SymbolAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.NumberAxis: boolean equals(java.lang.Object)>";
"<renderer.category.ScatterRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<XYErrorRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<time.Second: org.jfree.data.time.Second parseSecond(java.lang.String)>" -> "<org.jfree.data.time.Minute: void <init>(int,org.jfree.data.time.Hour)>";
"<XYLineAndShapeRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<BorderArrangement: org.jfree.chart.util.Size2D arrangeRR(org.jfree.chart.block.BlockContainer,org.jfree.data.Range,org.jfree.data.Range,java.awt.Graphics2D)>" -> "<org.jfree.data.Range: org.jfree.data.Range shift(org.jfree.data.Range,double)>";
"<renderer.AbstractRenderer: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.awt.Stroke)>";
"<time.Hour: org.jfree.data.time.Hour parseHour(java.lang.String)>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<axis.LogAxis: void setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<xy.DeviationRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,double)>" -> "<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>";
"<LineNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createHistogram(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>()>";
"<XYBarRenderer: void <init>(double)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<plot.Marker: void <init>(java.awt.Paint)>" -> "<org.jfree.chart.plot.Marker: void <init>(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<CombinedDataset: int[] getMap()>" -> "<org.jfree.data.general.CombinedDataset: int[] joinMap(int[],int[])>";
"<LengthConstraintType: void <clinit>()>" -> "<org.jfree.chart.block.LengthConstraintType: void <init>(java.lang.String)>";
"<renderer.category.BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawEllipse(java.awt.geom.Point2D,double,java.awt.Graphics2D)>";
"<XYPlot: org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int)>" -> "<org.jfree.chart.util.RectangleEdge: org.jfree.chart.util.RectangleEdge opposite(org.jfree.chart.util.RectangleEdge)>";
"<ThermometerPlot: java.awt.Paint getCurrentPaint()>" -> "<org.jfree.chart.plot.ThermometerPlot: boolean inSubrange(int,double)>";
"<renderer.category.BarRenderer3D: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<SpiderWebPlot: void <init>(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.plot.SpiderWebPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)>";
"<CategoryAxis: void setTickLabelFont(java.lang.Comparable,java.awt.Font)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<plot.IntervalMarker: void setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<time.Month: long getLastMillisecond(java.util.Calendar)>" -> "<org.jfree.data.time.SerialDate: int lastDayOfMonth(int,int)>";
"<LegendTitle: void <init>(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)>" -> "<org.jfree.chart.block.BlockContainer: void <init>(org.jfree.chart.block.Arrangement)>";
"<ScatterRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<Title: void setPosition(org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<plot.dial.ArcDialFrame: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.PiePlot: void drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.G2TextMeasurer: void <init>(java.awt.Graphics2D)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerXYDataset,boolean)>" -> "<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void <init>(double)>";
"<StandardDialScale: void setExtent(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYPlot: boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>";
"<category.AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<StandardDialRange: void setBounds(double,double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<LogAxis: void setMinorTickCount(int)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<BlockBorder: void <init>(double,double,double,double)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<MeanAndStandardDeviation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<XIntervalSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<XYTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<ChartPanel: void mouseMoved(java.awt.event.MouseEvent)>" -> "<org.jfree.chart.ChartPanel: void drawHorizontalAxisTrace(java.awt.Graphics2D,int)>";
"<XYSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.xy.XYSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<CombinedDataset: java.lang.Comparable getSeriesKey(int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<DefaultBoxAndWhiskerCategoryDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<Quarter: org.jfree.data.time.Quarter parseQuarter(java.lang.String)>" -> "<org.jfree.data.time.Quarter: void <init>(int,org.jfree.data.time.Year)>";
"<ScatterRenderer: void setDrawOutlines(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.RendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<XYDifferenceRenderer: void drawItemPass1(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.entity.XYItemEntity: void <init>(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)>";
"<plot.dial.StandardDialFrame: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<XYBarRenderer: void setUseYInterval(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<entity.ChartEntity: java.lang.String getShapeCoords()>" -> "<org.jfree.chart.entity.ChartEntity: java.lang.String getRectCoords(java.awt.geom.Rectangle2D)>";
"<plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<plot.dial.DialBackground: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<title.ImageTitle: void <init>(java.awt.Image,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)>" -> "<org.jfree.chart.title.ImageTitle: void <init>(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<CombinedRangeXYPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleEdge: double coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>";
"<xy.YIntervalSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<renderer.xy.DeviationRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.DeviationRenderer: void <init>(boolean,boolean)>";
"<dial.StandardDialFrame: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<plot.PieLabelLinkStyle: void <clinit>()>" -> "<org.jfree.chart.plot.PieLabelLinkStyle: void <init>(java.lang.String)>";
"<CyclicNumberAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<category.AbstractCategoryItemRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.category.CategoryDataset,int,int,double,double,boolean)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<xy.XYSeries: int indexOf(java.lang.Number)>" -> "<org.jfree.data.xy.XYDataItem: void <init>(java.lang.Number,java.lang.Number)>";
"<NumberAxis: java.lang.Object clone()>" -> "<org.jfree.chart.axis.ValueAxis: java.lang.Object clone()>";
"<DefaultPlotEditor: void updatePlotProperties(org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.plot.XYPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<category.StatisticalLineAndShapeRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<Range: org.jfree.data.Range shift(org.jfree.data.Range,double)>" -> "<org.jfree.data.Range: org.jfree.data.Range shift(org.jfree.data.Range,double,boolean)>";
"<axis.PeriodAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.PeriodAxis: void <init>(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)>";
"<CombinedRangeXYPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.XYPlot: boolean equals(java.lang.Object)>";
"<XYStepAreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<SimpleHistogramDataset: void setAdjustForBinSize(boolean)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<plot.CategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<PeriodAxisLabelInfo: void <clinit>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<renderer.xy.XYStepAreaRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.XYStepAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<category.BarRenderer: void setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.category.GanttRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<imagemap.OverLIBToolTipTagFragmentGenerator: java.lang.String generateToolTipFragment(java.lang.String)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String htmlEscape(java.lang.String)>";
"<xy.StackedXYBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)>";
"<dial.StandardDialRange: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<category.LineRenderer3D: void <init>()>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void <init>(boolean,boolean)>";
"<MeterPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.category.AreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<renderer.category.AbstractCategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState createState(org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.CategoryItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<Week: org.jfree.data.time.Week parseWeek(java.lang.String)>" -> "<org.jfree.data.time.TimePeriodFormatException: void <init>(java.lang.String)>";
"<renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.AbstractRenderer: boolean equals(java.lang.Object)>";
"<plot.CategoryPlot: java.util.List getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)>" -> "<org.jfree.chart.plot.CategoryPlot: java.util.List datasetsMappedToDomainAxis(int)>";
"<needle.PointerNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<XYStepRenderer: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>()>";
"<LegendGraphic: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<plot.dial.StandardDialScale: void <init>(double,double,double,double,double,int)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.xy.YIntervalRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>" -> "<org.jfree.chart.plot.ValueMarker: void <init>(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<Marker: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<PeriodAxisLabelInfo: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<MultipleXYSeriesLabelGenerator: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<XYSeries: boolean equals(java.lang.Object)>" -> "<org.jfree.data.general.Series: boolean equals(java.lang.Object)>";
"<Week: void <init>(int,org.jfree.data.time.Year)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<HighLowRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<YIntervalSeries: void add(double,double,double,double)>" -> "<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>";
"<CategoryPlot: org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<XYTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<DefaultKeyedValuesDataset: void <init>()>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<plot.RingPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<axis.DateTickUnit: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<statistics.DefaultStatisticalCategoryDataset: org.jfree.data.Range getRangeBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<LabelBlock: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<plot.PiePlot3D: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.entity.PieSectionEntity: void <init>(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)>";
"<xml.DatasetReader: org.jfree.data.general.PieDataset readPieDatasetFromXML(java.io.InputStream)>" -> "<org.jfree.data.xml.PieDatasetHandler: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createPolarChart(java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.DefaultPolarItemRenderer: void <init>()>";
"<xy.XYLine3DRenderer: void setXOffset(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<statistics.BoxAndWhiskerItem: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<text.TextFragment: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<XYDifferenceRenderer: void setRoundXCoordinates(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CategoryPlot: org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<xy.XYDataItem: void <init>(double,double)>" -> "<org.jfree.data.xy.XYDataItem: void <init>(java.lang.Number,java.lang.Number)>";
"<dial.StandardDialRange: void setLowerBound(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<EncoderUtil: byte[] encode(java.awt.image.BufferedImage,java.lang.String,boolean)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,boolean)>";
"<BasicProjectInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.ui.BasicProjectInfo: void <init>()>";
"<XYDifferenceRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>";
"<time.Day: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Day: void <init>(org.jfree.data.time.SerialDate)>";
"<Minute: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<plot.CombinedRangeCategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<plot.XYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.axis.ValueAxis: java.lang.Object clone()>";
"<xy.CandlestickRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.CandlestickRenderer: void <init>(double)>";
"<axis.CategoryAxis: void setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ItemLabelAnchor: void <clinit>()>" -> "<org.jfree.chart.labels.ItemLabelAnchor: void <init>(java.lang.String)>";
"<time.Day: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<CategoryAxis: void setTickLabelPaint(java.lang.Comparable,java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<title.TextTitle: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.WaferMapPlot: void setDataset(org.jfree.data.general.WaferMapDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<JFreeChart: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<general.CombinedDataset: java.lang.Number getHigh(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<Week: org.jfree.data.time.Year getYear()>" -> "<org.jfree.data.time.Year: void <init>(int)>";
"<renderer.xy.DeviationRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<LegendTitle: org.jfree.chart.block.Block createLegendItemBlock(org.jfree.chart.LegendItem)>" -> "<org.jfree.chart.title.LegendGraphic: void <init>(java.awt.Shape,java.awt.Paint)>";
"<RefineryUtilities: javax.swing.JPanel createTablePanel(javax.swing.table.TableModel)>" -> "<org.jfree.chart.util.RefineryUtilities: java.lang.Class class$(java.lang.String)>";
"<PaintScaleLegend: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<util.ObjectUtilities: java.io.InputStream getResourceRelativeAsStream(java.lang.String,java.lang.Class)>" -> "<org.jfree.chart.util.ObjectUtilities: java.net.URL getResourceRelative(java.lang.String,java.lang.Class)>";
"<MiddlePinNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<category.StackedBarRenderer3D: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<CombinedDataset: java.lang.Number getStartX(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<plot.CombinedDomainXYPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<PaintScaleLegend: void setStripOutlineVisible(boolean)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<ChartFactory: org.jfree.chart.JFreeChart createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<StandardPieSectionLabelGenerator: java.lang.Object clone()>" -> "<org.jfree.chart.labels.AbstractPieItemLabelGenerator: java.lang.Object clone()>";
"<LogarithmicAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<renderer.category.StackedAreaRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<axis.LogAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<labels.StandardCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat)>";
"<renderer.xy.StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer$State: int access$000(org.jfree.chart.renderer.xy.StandardXYItemRenderer$State)>";
"<BlockBorder: void <init>(java.awt.Paint)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<labels.StandardXYToolTipGenerator: org.jfree.chart.labels.StandardXYToolTipGenerator getTimeSeriesInstance()>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>";
"<MatrixSeriesCollection: void <init>(org.jfree.data.xy.MatrixSeries)>" -> "<org.jfree.data.xy.AbstractXYZDataset: void <init>()>";
"<XYStepAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createGanttChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.IntervalCategoryDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardCategoryURLGenerator: void <init>()>";
"<StandardDialRange: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.MultiplePiePlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.plot.MultiplePiePlot: void prefetchSectionPaints()>";
"<imagemap.ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String htmlEscape(java.lang.String)>";
"<BarChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.util.ApplicationFrame: void <init>(java.lang.String)>";
"<text.TextUtilities: float[] deriveRotationAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<title.CompositeTitle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.title.Title: boolean equals(java.lang.Object)>";
"<JFreeChart: void <init>(java.lang.String,org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<xy.XYSeries: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.XYBoxAndWhiskerRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<xy.XYDifferenceRenderer: void <init>(java.awt.Paint,java.awt.Paint,boolean)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.AbstractRenderer: boolean equals(java.lang.Object)>";
"<CategoryAxis: java.util.Map readPaintMap(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<entity.ChartEntity: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.String)>";
"<Month: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Month: void <init>(int,int)>";
"<plot.dial.StandardDialScale: void setMajorTickStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<MatrixSeries: boolean equals(java.lang.Object)>" -> "<org.jfree.data.general.Series: boolean equals(java.lang.Object)>";
"<general.CombinedDataset: java.lang.Number getLow(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<DefaultChartEditor: void <init>(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.editor.DefaultTitleEditor: void <init>(org.jfree.chart.title.Title)>";
"<IntervalMarker: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<DefaultStatisticalCategoryDataset: void removeColumn(int)>" -> "<org.jfree.data.statistics.DefaultStatisticalCategoryDataset: void updateBounds()>";
"<StandardTickUnitSource: org.jfree.chart.axis.TickUnit getLargerTickUnit(org.jfree.chart.axis.TickUnit)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<xy.XYBlockRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<SimpleHistogramBin: void <init>(double,double)>" -> "<org.jfree.data.statistics.SimpleHistogramBin: void <init>(double,double,boolean,boolean)>";
"<XYLineAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<labels.BoxAndWhiskerToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<LineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<text.TextFragment: void <init>(java.lang.String,java.awt.Font)>" -> "<org.jfree.chart.text.TextFragment: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<ValueAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.Axis: boolean equals(java.lang.Object)>";
"<axis.LogarithmicAxis: void zoomRange(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.category.StackedAreaRenderer: void <init>()>";
"<axis.ValueAxis: void resizeRange(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<DateAxis: void setMaximumDate(java.util.Date)>" -> "<org.jfree.data.time.DateRange: void <init>(java.util.Date,java.util.Date)>";
"<DefaultBoxAndWhiskerCategoryDataset: void add(java.util.List,java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.statistics.BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List)>";
"<XYAreaRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer$XYAreaRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<plot.WaferMapPlot: void <init>(org.jfree.data.general.WaferMapDataset)>" -> "<org.jfree.chart.plot.WaferMapPlot: void <init>(org.jfree.data.general.WaferMapDataset,org.jfree.chart.renderer.WaferMapRenderer)>";
"<block.LabelBlock: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<AbstractCategoryItemRenderer: void setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<time.SerialDate: org.jfree.data.time.SerialDate addYears(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int,int,int)>";
"<StackedXYBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StackedXYBarRenderer: java.lang.Class class$(java.lang.String)>";
"<StandardXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer$State: int access$002(org.jfree.chart.renderer.xy.StandardXYItemRenderer$State,int)>";
"<MinMaxCategoryRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,java.awt.Paint,java.awt.Paint)>";
"<category.DefaultCategoryDataset: void <init>()>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<dial.DialBackground: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<xy.XYDifferenceRenderer: void drawItemPass0(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.xy.XYDifferenceRenderer: void createPolygon(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,boolean,java.util.LinkedList,java.util.LinkedList)>";
"<dial.DialPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<CategoryPlot: void drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>";
"<ChartRenderingInfo: void <init>()>" -> "<org.jfree.chart.entity.StandardEntityCollection: void <init>()>";
"<TextBox: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<CategoryTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: float[] deriveRotationAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)>";
"<title.LegendTitle: org.jfree.chart.block.Block createLegendItemBlock(org.jfree.chart.LegendItem)>" -> "<org.jfree.chart.block.CenterArrangement: void <init>()>";
"<plot.CombinedDomainXYPlot: void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.plot.XYPlot: void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)>";
"<Second: org.jfree.data.time.Second parseSecond(java.lang.String)>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<Minute: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Minute: void <init>(int,org.jfree.data.time.Hour)>";
"<ClusteredXYBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: void <init>(double,boolean)>";
"<ChartUtilities: void writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.encoders.EncoderUtil: void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream)>";
"<imagemap.ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator: void <init>()>";
"<dial.DialValueIndicator: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<ui.StrokeChooserPanel: void <init>(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])>" -> "<org.jfree.chart.ui.StrokeChooserPanel$1: void <init>(org.jfree.chart.ui.StrokeChooserPanel)>";
"<xy.StandardXYItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<axis.CategoryAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.CategoryTick: void <init>(java.lang.Comparable,org.jfree.chart.text.TextBlock,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<ServletUtilities: java.lang.String saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.servlet.ServletUtilities: java.lang.String saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>";
"<labels.StandardPieSectionLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<annotations.XYShapeAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<annotations.XYTextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<xy.AbstractXYItemRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.awt.geom.Point2D calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>";
"<Second: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Second: void <init>(int,org.jfree.data.time.Minute)>";
"<plot.FastScatterPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<Axis: org.jfree.chart.axis.AxisState drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<plot.dial.DialPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.plot.dial.ArcDialFrame: void <init>()>";
"<category.ScatterRenderer: void setUseFillPaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<annotations.CategoryLineAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<plot.JThermometer: void <init>()>" -> "<org.jfree.data.general.DefaultValueDataset: void <init>()>";
"<dial.DialBackground: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<plot.PolarPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.geom.Ellipse2D,java.awt.geom.Ellipse2D)>";
"<xy.DefaultTableXYDataset: void <init>()>" -> "<org.jfree.data.xy.DefaultTableXYDataset: void <init>(boolean)>";
"<plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.PaintMap: void <init>()>";
"<ModuloAxis: double transStart(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<AreaRenderer: void setEndType(org.jfree.chart.renderer.AreaRendererEndType)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.category.StatisticalBarRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<PiePlot3D: void <init>()>" -> "<org.jfree.chart.plot.PiePlot3D: void <init>(org.jfree.data.general.PieDataset)>";
"<DialPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<LayeredBarRenderer: void <init>()>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<StandardXYItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<PeriodAxisLabelInfo: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<renderer.category.StackedAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.StackedAreaRenderer: double[] adjustedStackValues(double[],double[])>";
"<XYLineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State: boolean access$002(org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State,boolean)>";
"<util.ObjectUtilities: boolean isJDK14()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.ClassLoader getClassLoader(java.lang.Class)>";
"<dial.DialCap: void <init>()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<XYDrawableAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<PolarPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<ChartUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator: void <init>()>";
"<category.BarRenderer: void setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CombinedDomainCategoryPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<CombinedDataset: int getItemCount(int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<xy.HighLowRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<DefaultPolarItemRenderer: void drawAngularGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,java.util.List,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<renderer.category.LineRenderer3D: void setXOffset(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<TimeSeries: void removeAgedItems(long,boolean)>" -> "<org.jfree.data.time.TimeSeries: java.lang.Class class$(java.lang.String)>";
"<demo.BarChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.demo.BarChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.category.CategoryDataset)>";
"<FastScatterPlot: org.jfree.data.Range calculateXDataRange(float[][])>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<renderer.category.StackedBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.data.DataUtilities: double calculateColumnTotal(org.jfree.data.Values2D,int)>";
"<time.SerialDate: org.jfree.data.time.SerialDate getEndOfCurrentMonth(org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: int lastDayOfMonth(int,int)>";
"<labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<time.DynamicTimeSeriesCollection: void <init>(int,int)>" -> "<org.jfree.data.time.Millisecond: void <init>()>";
"<CyclicNumberAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<Axis: void setLabel(java.lang.String)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<plot.PolarPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.XYBoxAndWhiskerRenderer: void <init>(double)>" -> "<org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,org.jfree.chart.axis.Timeline,boolean)>" -> "<org.jfree.chart.axis.DateAxis: void <init>(java.lang.String)>";
"<title.LegendGraphic: void <init>(java.awt.Shape,java.awt.Paint)>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>()>";
"<PiePlot: org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PiePlotState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<urls.CustomPieURLGenerator: java.lang.Object clone()>" -> "<org.jfree.chart.urls.CustomPieURLGenerator: void <init>()>";
"<IntervalMarker: void <init>(double,double)>" -> "<org.jfree.chart.plot.IntervalMarker: void <init>(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<title.DateTitle: void <init>(int)>" -> "<org.jfree.chart.title.DateTitle: void <init>(int,java.util.Locale,java.awt.Font,java.awt.Paint)>";
"<annotations.XYPointerAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<DomainOrder: void <clinit>()>" -> "<org.jfree.data.DomainOrder: void <init>(java.lang.String)>";
"<title.CompositeTitle: void <init>()>" -> "<org.jfree.chart.block.BlockContainer: void <init>(org.jfree.chart.block.Arrangement)>";
"<PiePlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<title.ImageTitle: org.jfree.chart.util.Size2D drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<axis.DateAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<text.TextLine: void draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)>" -> "<org.jfree.chart.text.TextLine: float calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)>";
"<time.SerialDate: java.lang.String monthCodeToString(int)>" -> "<org.jfree.data.time.SerialDate: java.lang.String monthCodeToString(int,boolean)>";
"<renderer.xy.XYLine3DRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<ScatterRenderer: void setSeriesShapesFilled(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.CyclicNumberAxis: void setAutoRangeMinimumSize(double,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void setAutoRangeMinimumSize(double,boolean)>";
"<plot.CombinedRangeCategoryPlot: void <init>()>" -> "<org.jfree.chart.plot.CombinedRangeCategoryPlot: void <init>(org.jfree.chart.axis.ValueAxis)>";
"<axis.DateAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<axis.ModuloAxis: double transStart(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<StandardDialScale: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<Millisecond: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.Day: void <init>(java.util.Date,java.util.TimeZone)>";
"<jdbc.JDBCCategoryDataset: void executeQuery(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCCategoryDataset: void fireDatasetChanged()>";
"<axis.SymbolAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<HighLowRenderer: void setOpenTickPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.MeterPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<XYImageAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<DeviationRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<xy.AbstractXYItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.AbstractRenderer: void <init>()>";
"<CompassPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<TextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<XYAreaRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<renderer.category.AbstractCategoryItemRenderer: void setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<NumberAxis: void selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<util.VerticalAlignment: void <clinit>()>" -> "<org.jfree.chart.util.VerticalAlignment: void <init>(java.lang.String)>";
"<MeterInterval: void <init>(java.lang.String,org.jfree.data.Range)>" -> "<org.jfree.chart.plot.MeterInterval: void <init>(java.lang.String,org.jfree.data.Range,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<xy.XYLine3DRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<StatisticalLineAndShapeRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<BubbleXYItemLabelGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: boolean equals(java.lang.Object)>";
"<annotations.TextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<SymbolAxis: void setGridBandAlternatePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ChartFactory: org.jfree.chart.JFreeChart createCandlestickChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<dial.StandardDialScale: void setExtent(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<PiePlot: void setDataset(org.jfree.data.general.PieDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<axis.Axis: void setAxisLineVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<StandardDialScale: void <init>(double,double,double,double,double,int)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<axis.ModuloAxis: void resizeRange(double,double)>" -> "<org.jfree.chart.axis.ModuloAxis: double getDisplayLength()>";
"<CombinedRangeCategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>" -> "<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<TimeSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)>";
"<renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<axis.NumberAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<XYDifferenceRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<xy.IntervalXYDelegate: double recalculateInterval()>" -> "<org.jfree.data.xy.IntervalXYDelegate: double calculateIntervalForSeries(int)>";
"<Axis: void setLabelAngle(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<block.BorderArrangement: org.jfree.chart.util.Size2D arrangeRR(org.jfree.chart.block.BlockContainer,org.jfree.data.Range,org.jfree.data.Range,java.awt.Graphics2D)>" -> "<org.jfree.data.Range: org.jfree.data.Range shift(org.jfree.data.Range,double,boolean)>";
"<KeyedObjects2D: void removeRow(java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<category.DefaultIntervalCategoryDataset: void <init>(double[][],double[][])>" -> "<org.jfree.data.category.DefaultIntervalCategoryDataset: void <init>(java.lang.Number[][],java.lang.Number[][])>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardCategoryURLGenerator: void <init>()>";
"<SymbolAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<AbstractCategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState createState(org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.CategoryItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<XYSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.XYSeriesCollection: void <init>(org.jfree.data.xy.XYSeries)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>()>";
"<plot.dial.DialTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<labels.IntervalCategoryToolTipGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<util.Rotation: void <clinit>()>" -> "<org.jfree.chart.util.Rotation: void <init>(java.lang.String,double)>";
"<xy.XYBarRenderer: void <init>(double)>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>()>";
"<axis.CategoryAxis3D: java.lang.Object clone()>" -> "<org.jfree.chart.axis.CategoryAxis: java.lang.Object clone()>";
"<DialValueIndicator: void setFont(java.awt.Font)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<general.DefaultPieDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<dial.StandardDialScale: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<annotations.CategoryLineAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<OHLCSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.ComparableObjectSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.OutlierListCollection: void <init>()>";
"<category.StackedAreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.StackedAreaRenderer: void <init>(boolean)>";
"<CombinedDataset: java.lang.Comparable getSeriesKey(int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>" -> "<org.jfree.chart.axis.TickUnit: void <init>(double)>";
"<renderer.xy.StackedXYAreaRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<renderer.category.ScatterRenderer: void setUseSeriesOffset(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DefaultPlotEditor: org.jfree.chart.util.RectangleInsets getPlotInsets()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<BoxAndWhiskerRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<Year: void <init>(int)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.geom.Arc2D,java.awt.geom.Arc2D)>";
"<renderer.category.MinMaxCategoryRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<TimeSeriesChartDemo1: void main(java.lang.String[])>" -> "<org.jfree.chart.demo.TimeSeriesChartDemo1: void <init>(java.lang.String)>";
"<CombinedRangeCategoryPlot: void add(org.jfree.chart.plot.CategoryPlot,int)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<StackedAreaRenderer: void setRenderAsPercentages(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ScatterRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<CategoryItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.RendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<XYPlot: void mapDatasetToRangeAxis(int,int)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<Week: org.jfree.data.time.Week parseWeek(java.lang.String)>" -> "<org.jfree.data.time.Week: void <init>(int,org.jfree.data.time.Year)>";
"<xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<DefaultPolarItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.AbstractRenderer: java.lang.Object clone()>";
"<Millisecond: void <init>(int,org.jfree.data.time.Second)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<annotations.XYPointerAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<BarRenderer: void setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.category.BarRenderer: void setDrawBarOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<VectorSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractXYDataset: java.lang.Object clone()>";
"<MovingAverage: org.jfree.data.time.TimeSeriesCollection createMovingAverage(org.jfree.data.time.TimeSeriesCollection,java.lang.String,int,int)>" -> "<org.jfree.data.time.TimeSeriesCollection: void <init>()>";
"<plot.Plot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<plot.MultiplePiePlot: void setDataset(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<XYBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: java.awt.geom.Point2D calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)>";
"<DefaultDrawingSupplier: boolean equalShapes(java.awt.Shape[],java.awt.Shape[])>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<PeriodAxis: org.jfree.data.Range getRange()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<renderer.category.ScatterRenderer: void setItemMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<demo.BarChartDemo1: void main(java.lang.String[])>" -> "<org.jfree.chart.util.RefineryUtilities: void centerFrameOnScreen(java.awt.Window)>";
"<ScatterRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<axis.ExtendedCategoryAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createScatterPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<block.BorderArrangement: org.jfree.chart.util.Size2D arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<encoders.EncoderUtil: byte[] encode(java.awt.image.BufferedImage,java.lang.String,float,boolean)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,float,boolean)>";
"<CategoryItemEntity: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.entity.ChartEntity: boolean equals(java.lang.Object)>";
"<JThermometer: void <init>()>" -> "<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart)>";
"<XYStepAreaRenderer: void setShapesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<LabelBlock: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.block.AbstractBlock: boolean equals(java.lang.Object)>";
"<AbstractXYItemRenderer: java.awt.geom.Point2D calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<MatrixSeries: void <init>(java.lang.String,int,int)>" -> "<org.jfree.data.general.Series: void <init>(java.lang.Comparable)>";
"<DateAxis: void autoAdjustRange()>" -> "<org.jfree.data.time.DateRange: void <init>()>";
"<plot.dial.DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<RefineryUtilities: java.awt.Rectangle getMaximumWindowBounds()>" -> "<org.jfree.chart.util.RefineryUtilities: java.lang.Class class$(java.lang.String)>";
"<SubCategoryAxis: org.jfree.chart.axis.AxisState drawSubCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.SubCategoryAxis: double getMaxDim(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)>";
"<renderer.category.BarRenderer3D: void setWallPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DefaultPlotEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultPlotEditor: void attemptDrawLinesSelection()>";
"<util.RectangleInsets: void <init>(double,double,double,double)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(org.jfree.chart.util.UnitType,double,double,double,double)>";
"<SerialDate: org.jfree.data.time.SerialDate addDays(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int)>";
"<labels.StandardXYItemLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<StackedBarRenderer3D: void setRenderAsPercentages(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.dial.StandardDialFrame: java.awt.Shape getWindow(java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<PiePlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.plot.PieLabelDistributor: void <init>(int)>";
"<StandardDialScale: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<general.CombinedDataset: void add(org.jfree.data.general.SeriesDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<ChartFactory: org.jfree.chart.JFreeChart createHistogram(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<ohlc.OHLCSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractXYDataset: java.lang.Object clone()>";
"<util.SortOrder: void <clinit>()>" -> "<org.jfree.chart.util.SortOrder: void <init>(java.lang.String)>";
"<text.TextBlock: java.awt.Shape calculateBounds(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape rotateShape(java.awt.Shape,double,float,float)>";
"<renderer.xy.XYStepAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.XYStepAreaRenderer: double restrictValueToDataArea(double,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D)>";
"<axis.LogAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<axis.PeriodAxis: java.lang.Object clone()>" -> "<org.jfree.chart.axis.ValueAxis: java.lang.Object clone()>";
"<JThermometer: void <init>()>" -> "<org.jfree.chart.plot.ThermometerPlot: void <init>()>";
"<plot.CategoryPlot: boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.category.CategoryDataset)>";
"<dial.DialTextAnnotation: void <init>(java.lang.String)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<XYSeries: void add(org.jfree.data.xy.XYDataItem,boolean)>" -> "<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>";
"<axis.DateAxis: void setMinimumDate(java.util.Date)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<TimeSeries: org.jfree.data.time.TimeSeries createCopy(int,int)>" -> "<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem)>";
"<ValueAxis: void setRangeAboutValue(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<renderer.xy.XYDifferenceRenderer: void drawItemPass0(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.xy.XYDifferenceRenderer: boolean areSeriesDisjoint(org.jfree.data.xy.XYDataset)>";
"<xy.ClusteredXYBarRenderer: void <init>(double,boolean)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: void <init>(double)>";
"<HistogramDataset: void addSeries(java.lang.Comparable,double[],int)>" -> "<org.jfree.data.statistics.HistogramDataset: double getMaximum(double[])>";
"<CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<axis.PeriodAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<dial.StandardDialScale: void setMajorTickIncrement(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<Month: void <init>()>" -> "<org.jfree.data.time.Month: void <init>(java.util.Date)>";
"<AbstractRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<LineBorder: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<StandardDialFrame: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createCandlestickChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<NumberAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<XYLineAndShapeRenderer: void setSeriesShapesFilled(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<SerialDate: org.jfree.data.time.SerialDate createInstance(int)>" -> "<org.jfree.data.time.SpreadsheetDate: void <init>(int)>";
"<Week: org.jfree.data.time.Week parseWeek(java.lang.String)>" -> "<org.jfree.data.time.Week: org.jfree.data.time.Year evaluateAsYear(java.lang.String)>";
"<block.LabelBlock: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<DefaultKeyedValues: void sortByKeys(org.jfree.chart.util.SortOrder)>" -> "<org.jfree.data.DefaultKeyedValue: void <init>(java.lang.Comparable,java.lang.Number)>";
"<CSV: org.jfree.data.category.CategoryDataset readCategoryDataset(java.io.Reader)>" -> "<org.jfree.data.io.CSV: java.util.List extractColumnKeys(java.lang.String)>";
"<SortOrder: void <clinit>()>" -> "<org.jfree.chart.util.SortOrder: void <init>(java.lang.String)>";
"<time.Week: org.jfree.data.time.Week parseWeek(java.lang.String)>" -> "<org.jfree.data.time.TimePeriodFormatException: void <init>(java.lang.String)>";
"<ShipNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<WaterfallBarRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<demo.BarChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createIntegerTickUnits()>";
"<needle.MeterNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<XYPlot: org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPolarChart(java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<util.ShapeList: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<CategoryPlot: org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>";
"<SpreadsheetDate: void <init>(int)>" -> "<org.jfree.data.time.SpreadsheetDate: int calcSerial(int,int,int)>";
"<plot.dial.DialTextAnnotation: void setAnchor(org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<category.IntervalBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>";
"<plot.CompassPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<XYLineAndShapeRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<MultiplePiePlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.ChartRenderingInfo: void <init>()>";
"<dial.DialPlot: void <init>()>" -> "<org.jfree.chart.plot.dial.DialPlot: void <init>(org.jfree.data.general.ValueDataset)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<renderer.xy.XYStepRenderer: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>()>";
"<StackedXYBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)>";
"<AbstractCategoryItemRenderer: void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYPlot: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<axis.PeriodAxis: org.jfree.data.Range getRange()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<dial.StandardDialScale: void <init>()>" -> "<org.jfree.chart.plot.dial.StandardDialScale: void <init>(double,double,double,double,double,int)>";
"<renderer.category.StackedBarRenderer: void <init>(boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<SpiderWebPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<xy.YIntervalSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.xy.YIntervalSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<TimeSeriesTableModel: void <init>()>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable)>";
"<DateTickUnit: java.util.Date addToDate(java.util.Date)>" -> "<org.jfree.chart.axis.DateTickUnit: int getCalendarField(int)>";
"<renderer.xy.XYBarRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer$XYBarRendererState: void <init>(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)>";
"<DatasetReader: org.jfree.data.category.CategoryDataset readCategoryDatasetFromXML(java.io.InputStream)>" -> "<org.jfree.data.xml.CategoryDatasetHandler: void <init>()>";
"<axis.NumberTickUnit: void <init>(double,java.text.NumberFormat,int)>" -> "<org.jfree.chart.axis.TickUnit: void <init>(double,int)>";
"<axis.PeriodAxis: void drawTickMarks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<NumberTick: void <init>(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>" -> "<org.jfree.chart.axis.ValueTick: void <init>(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<title.TextTitle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<axis.MonthDateFormat: void <init>(java.util.Locale)>" -> "<org.jfree.chart.axis.MonthDateFormat: void <init>(java.util.TimeZone,java.util.Locale,int,boolean,boolean)>";
"<dial.ArcDialFrame: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.Plot: void drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.Align: void align(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,int)>";
"<ChartFactory: org.jfree.chart.JFreeChart createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)>" -> "<org.jfree.chart.axis.DateAxis: void <init>(java.lang.String)>";
"<BarChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.ChartFactory: org.jfree.chart.JFreeChart createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>";
"<xy.AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<plot.SpiderWebPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)>" -> "<org.jfree.chart.util.PaintList: void <init>()>";
"<plot.CombinedRangeXYPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.XYPlot: boolean equals(java.lang.Object)>";
"<PolarPlot: void render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.xy.XYDataset)>";
"<KeyedObjects: void insertValue(int,java.lang.Comparable,java.lang.Object)>" -> "<org.jfree.data.KeyedObject: void <init>(java.lang.Comparable,java.lang.Object)>";
"<Second: org.jfree.data.time.Minute getMinute()>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<xy.XYStepAreaRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.XYStepAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<LineBorder: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite()>" -> "<org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>";
"<plot.dial.DialPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<XYPointerAnnotation: java.lang.Object clone()>" -> "<org.jfree.chart.annotations.XYTextAnnotation: java.lang.Object clone()>";
"<axis.DateTick: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.ValueTick: boolean equals(java.lang.Object)>";
"<plot.PiePlot: void drawLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.data.DefaultKeyedValues: void <init>()>";
"<StackedXYAreaRenderer2: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: double[] adjustedStackValues(double[],double[])>";
"<DynamicTimeSeriesCollection: void <init>(int,int,java.util.TimeZone)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection: void <init>(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBubbleChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYZDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<CategoryAxis: org.jfree.chart.axis.AxisState drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<axis.CyclicNumberAxis: void setRange(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void setRange(org.jfree.data.Range,boolean,boolean)>";
"<category.ScatterRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<axis.SubCategoryAxis: double getMaxDim(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<XYTitleAnnotationDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.experimental.chart.demo.XYTitleAnnotationDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.xy.XYDataset)>";
"<YIntervalDataItem: void <init>(double,double,double,double)>" -> "<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>";
"<LineRenderer3D: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<axis.PeriodAxis: void setTimeZone(java.util.TimeZone)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<Week: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.Week: void <init>(java.util.Date,java.util.TimeZone,java.util.Locale)>";
"<demo.PieChartDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.chart.demo.PieChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.general.PieDataset)>";
"<category.DefaultIntervalCategoryDataset: java.lang.Number getEndValue(java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<Year: org.jfree.data.time.Year parseYear(java.lang.String)>" -> "<org.jfree.data.time.TimePeriodFormatException: void <init>(java.lang.String)>";
"<statistics.Statistics: double calculateMedian(java.util.List)>" -> "<org.jfree.data.statistics.Statistics: double calculateMedian(java.util.List,boolean)>";
"<ChartFactory: org.jfree.chart.JFreeChart createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,org.jfree.chart.axis.Timeline,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<TimeSeries: void update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>" -> "<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>";
"<xy.XYBarRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<statistics.HistogramDataset: void addSeries(java.lang.Comparable,double[],int)>" -> "<org.jfree.data.statistics.HistogramDataset: double getMaximum(double[])>";
"<general.WaferMapDataset: void <init>(int,int)>" -> "<org.jfree.data.general.WaferMapDataset: void <init>(int,int,java.lang.Number)>";
"<JFreeChart: void setNotify(boolean)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<xy.CandlestickRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<AbstractCategoryItemRenderer: void addItemEntity(org.jfree.chart.entity.EntityCollection,org.jfree.data.category.CategoryDataset,int,int,java.awt.Shape)>" -> "<org.jfree.chart.entity.CategoryItemEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)>";
"<IntervalXYDelegate: void <init>(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.xy.IntervalXYDelegate: void <init>(org.jfree.data.xy.XYDataset,boolean)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createIntegerTickUnits()>";
"<time.SerialDate: org.jfree.data.time.SerialDate getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: boolean isValidWeekdayCode(int)>";
"<xy.XYBarRenderer: void setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<NumberAxis: org.jfree.chart.axis.TickUnitSource createStandardTickUnits(java.util.Locale)>" -> "<org.jfree.chart.axis.TickUnits: void <init>()>";
"<xy.XYDifferenceRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYDifferenceRenderer: void <init>(java.awt.Paint,java.awt.Paint,boolean)>";
"<StackedXYAreaRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<XYPolygonAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<renderer.xy.XYAreaRenderer: void setOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.XYDifferenceRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<labels.StandardPieSectionLabelGenerator: void <init>(java.lang.String,java.util.Locale)>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<renderer.category.MinMaxCategoryRenderer: void setGroupStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.DateAxis: void setTimeZone(java.util.TimeZone)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<TextBox: void draw(java.awt.Graphics2D,float,float,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<StandardCategorySeriesLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardCategorySeriesLabelGenerator: void <init>(java.lang.String)>";
"<SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.lang.Class class$(java.lang.String)>";
"<Minute: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Minute: void <init>(int,org.jfree.data.time.Hour)>";
"<BarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<general.CombinedDataset: java.lang.Number getHigh(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<CategoryPlot: org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int)>" -> "<org.jfree.chart.util.RectangleEdge: org.jfree.chart.util.RectangleEdge opposite(org.jfree.chart.util.RectangleEdge)>";
"<renderer.category.StatisticalLineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>";
"<CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor)>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)>";
"<StandardDialRange: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<WaferMapRenderer: void makePaintIndex()>" -> "<org.jfree.chart.renderer.WaferMapRenderer: void makeValueIndex(java.lang.Number,java.lang.Number,java.util.Set)>";
"<plot.Marker: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.XYBlockRenderer: void <init>()>" -> "<org.jfree.chart.renderer.LookupPaintScale: void <init>()>";
"<category.StackedAreaRenderer: void setRenderAsPercentages(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CyclicNumberAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.NumberAxis: boolean equals(java.lang.Object)>";
"<time.SpreadsheetDate: int calcSerial(int,int,int)>" -> "<org.jfree.data.time.SerialDate: boolean isLeapYear(int)>";
"<time.SpreadsheetDate: void <init>(int,int,int)>" -> "<org.jfree.data.time.SpreadsheetDate: int calcSerial(int,int,int)>";
"<xy.CyclicXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<util.ObjectUtilities: java.net.URL getResourceRelative(java.lang.String,java.lang.Class)>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.String convertName(java.lang.String,java.lang.Class)>";
"<AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<XYDifferenceRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<statistics.SimpleHistogramDataset: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<PolarChartPanel: void <init>(org.jfree.chart.JFreeChart,boolean)>" -> "<org.jfree.chart.PolarChartPanel: void checkChart(org.jfree.chart.JFreeChart)>";
"<BlockBorder: void <init>(java.awt.Paint)>" -> "<org.jfree.chart.block.BlockBorder: void <init>(org.jfree.chart.util.RectangleInsets,java.awt.Paint)>";
"<block.FlowArrangement: org.jfree.chart.util.Size2D arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<renderer.xy.XYAreaRenderer2: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<labels.IntervalCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat)>" -> "<org.jfree.chart.labels.StandardCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat)>";
"<text.TextBox: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<DatasetUtilities: org.jfree.data.general.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,java.lang.Comparable)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.general.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)>";
"<plot.MultiplePiePlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double)>";
"<FastScatterPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<RectangleConstraint: org.jfree.chart.block.RectangleConstraint toFixedWidth(double)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<plot.MultiplePiePlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<DefaultAxisEditor: void attemptLabelFontSelection()>" -> "<org.jfree.chart.ui.FontChooserPanel: void <init>(java.awt.Font)>";
"<renderer.category.StackedAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.StackedAreaRenderer: double[] averageStackValues(double[],double[])>";
"<block.BlockContainer: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.block.BlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>";
"<time.ohlc.OHLCSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.XYSeries: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<StackedBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)>";
"<plot.Plot: void fireChangeEvent()>" -> "<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>";
"<plot.Plot: void <clinit>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<block.LabelBlock: void <init>(java.lang.String)>" -> "<org.jfree.chart.block.LabelBlock: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<annotations.XYPointerAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<xy.XYErrorRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<renderer.xy.StandardXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<renderer.category.AbstractCategoryItemRenderer: void <init>()>" -> "<org.jfree.chart.labels.StandardCategorySeriesLabelGenerator: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<renderer.category.StatisticalBarRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<TextTitle: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<BoxAndWhiskerXYToolTipGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: boolean equals(java.lang.Object)>";
"<time.TimePeriodValues: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.time.TimePeriodValues: void <init>(java.lang.Comparable,java.lang.String,java.lang.String)>";
"<XYIntervalSeries: void <init>(java.lang.Comparable,boolean,boolean)>" -> "<org.jfree.data.ComparableObjectSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<xy.XYStepRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.lang.Object clone()>";
"<DialValueIndicator: void setFrameAnchor(org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<WindNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.ArrowNeedle: boolean equals(java.lang.Object)>";
"<title.Title: void <init>()>" -> "<org.jfree.chart.title.Title: void <init>(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<RingPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<LegendTitle: void <init>(org.jfree.chart.LegendItemSource)>" -> "<org.jfree.chart.block.ColumnArrangement: void <init>()>";
"<plot.JThermometer: void <init>()>" -> "<org.jfree.chart.plot.ThermometerPlot: void <init>()>";
"<AbstractXYItemRenderer: void <init>()>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<renderer.category.StackedBarRenderer: void <init>(boolean)>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)>";
"<StatisticalBarRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<plot.PiePlot: void drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.DateFormat)>";
"<CategoryLineAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<AbstractRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<Day: void <init>(int,int,int)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<CombinedRangeXYPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotState: void <init>()>";
"<ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Polygon,java.awt.Polygon)>";
"<xy.DefaultTableXYDataset: void <init>(boolean)>" -> "<org.jfree.data.xy.IntervalXYDelegate: void <init>(org.jfree.data.xy.XYDataset,boolean)>";
"<ValueAxis: void setDownArrow(java.awt.Shape)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<dial.DialValueIndicator: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<time.Day: org.jfree.data.time.Day parseDay(java.lang.String)>" -> "<org.jfree.data.time.Day: void <init>(java.util.Date)>";
"<annotations.XYBoxAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<demo.TimeSeriesChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.chart.ChartFactory: org.jfree.chart.JFreeChart createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>";
"<XYPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.XYPlot: java.util.List getDatasetsMappedToRangeAxis(java.lang.Integer)>";
"<XYIntervalSeries: void add(double,double,double,double,double,double)>" -> "<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>";
"<XYTitleAnnotationDemo1: void <init>(java.lang.String)>" -> "<org.jfree.experimental.chart.demo.XYTitleAnnotationDemo1: javax.swing.JPanel createDemoPanel()>";
"<CombinedDataset: void add(org.jfree.data.general.SeriesDataset[])>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<plot.PolarPlot: void drawCornerTextItems(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<time.SerialDate: org.jfree.data.time.SerialDate getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate addDays(int,org.jfree.data.time.SerialDate)>";
"<time.TimePeriodValues: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<XYBoxAndWhiskerRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<XYLine3DRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<PaintList: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<xy.VectorSeries: void <init>(java.lang.Comparable,boolean,boolean)>" -> "<org.jfree.data.ComparableObjectSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<plot.dial.DialTextAnnotation: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<XIntervalSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<renderer.xy.XYDotRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<CombinedRangeXYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.XYPlot: java.lang.Object clone()>";
"<util.RectangleInsets: void <init>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<category.StackedBarRenderer3D: void drawStackVertical(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer3D: java.awt.Shape[] createVerticalBlock(double,double,double,double,boolean)>";
"<JFreeChart: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.event.ChartProgressEvent: void <init>(java.lang.Object,org.jfree.chart.JFreeChart,int,int)>";
"<renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<util.ObjectUtilities: java.net.URL getResource(java.lang.String,java.lang.Class)>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.ClassLoader getClassLoader(java.lang.Class)>";
"<editor.DefaultAxisEditor: void attemptLabelFontSelection()>" -> "<org.jfree.chart.ui.FontChooserPanel: void <init>(java.awt.Font)>";
"<DisplayChart: void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>" -> "<org.jfree.chart.servlet.ServletUtilities: java.lang.String getTempOneTimeFilePrefix()>";
"<StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<title.PaintScaleLegend: void <init>(org.jfree.chart.renderer.PaintScale,org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.title.Title: void <init>()>";
"<XYDifferenceRenderer: void setShapesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<time.DynamicTimeSeriesCollection: void appendData(float[],int,int)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence: void <init>(org.jfree.data.time.DynamicTimeSeriesCollection,int)>";
"<plot.dial.DialBackground: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<XYBlockRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<renderer.category.BarRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<DefaultKeyedValues2D: java.lang.Number getValue(java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<DefaultBoxAndWhiskerCategoryDataset: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<axis.LogAxis: java.util.List refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<xy.DefaultTableXYDataset: void addSeries(org.jfree.data.xy.XYSeries)>" -> "<org.jfree.data.xy.DefaultTableXYDataset: void updateXPoints(org.jfree.data.xy.XYSeries)>";
"<DisplayChart: void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>" -> "<org.jfree.chart.servlet.ServletUtilities: java.lang.String searchReplace(java.lang.String,java.lang.String,java.lang.String)>";
"<DateAxis: java.util.List refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.DateTick: void <init>(java.util.Date,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<annotations.XYPolygonAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<title.LegendItemBlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.entity.LegendItemEntity: void <init>(java.awt.Shape)>";
"<xy.XYLine3DRenderer: void setYOffset(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DefaultKeyedValues: void sortByKeys(org.jfree.chart.util.SortOrder)>" -> "<org.jfree.data.KeyedValueComparator: void <init>(org.jfree.data.KeyedValueComparatorType,org.jfree.chart.util.SortOrder)>";
"<StandardXYZToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<axis.SubCategoryAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<axis.NumberAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<axis.NumberTickUnit: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.TickUnit: boolean equals(java.lang.Object)>";
"<BlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.block.BlockResult: void <init>()>";
"<SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.lang.Class class$(java.lang.String)>";
"<TextFragment: void draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)>";
"<RectangleConstraint: org.jfree.chart.block.RectangleConstraint toFixedHeight(double)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<time.SpreadsheetDate: void <init>(int)>" -> "<org.jfree.data.time.SpreadsheetDate: int calcSerial(int,int,int)>";
"<renderer.xy.XYDotRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<category.StackedAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AreaRenderer: boolean equals(java.lang.Object)>";
"<axis.SubCategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<plot.MultiplePiePlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.ChartRenderingInfo: void <init>()>";
"<XYLine3DRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>()>";
"<category.ScatterRenderer: void setDrawOutlines(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<title.LegendTitle: void <init>(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)>" -> "<org.jfree.chart.block.BlockContainer: void <init>(org.jfree.chart.block.Arrangement)>";
"<XYStepAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<AbstractXYItemLabelGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<RendererChangeEvent: void <init>(java.lang.Object)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<CategoryLineAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<time.TimeSeriesTableModel: void <init>()>" -> "<org.jfree.data.time.TimeSeriesTableModel: void <init>(org.jfree.data.time.TimeSeries)>";
"<VectorRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<axis.LogarithmicAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<annotations.XYPolygonAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<imagemap.ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.StandardURLTagFragmentGenerator: void <init>()>";
"<Minute: org.jfree.data.time.Minute parseMinute(java.lang.String)>" -> "<org.jfree.data.time.Minute: void <init>(int,org.jfree.data.time.Hour)>";
"<BarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>";
"<editor.DefaultNumberAxisEditor: void <init>(org.jfree.chart.axis.NumberAxis)>" -> "<org.jfree.chart.ui.StrokeSample: void <init>(java.awt.Stroke)>";
"<XYAnnotationEntity: void <init>(java.awt.Shape,int,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<xy.StackedXYAreaRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.category.GanttRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.IntervalBarRenderer: void <init>()>";
"<axis.PeriodAxis: void setMajorTickTimePeriodClass(java.lang.Class)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<MovingAverage: org.jfree.data.xy.XYDataset createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,long,long)>" -> "<org.jfree.data.time.MovingAverage: org.jfree.data.xy.XYDataset createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,double,double)>";
"<ObjectUtilities: java.net.URL getResourceRelative(java.lang.String,java.lang.Class)>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.String convertName(java.lang.String,java.lang.Class)>";
"<Marker: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.LongNeedle: void <init>()>";
"<renderer.category.LineAndShapeRenderer: void setUseOutlinePaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.ThermometerPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.ThermometerPlot: boolean equal(double[][],double[][])>";
"<renderer.xy.XYAreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: void <init>(int)>";
"<axis.MarkerAxisBand: void drawStringInRect(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.Font,java.lang.String)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<renderer.category.BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawHighFarOut(double,java.awt.Graphics2D,double,double)>";
"<StandardCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat)>";
"<time.Quarter: org.jfree.data.time.Quarter parseQuarter(java.lang.String)>" -> "<org.jfree.data.time.Quarter: void <init>(int,org.jfree.data.time.Year)>";
"<XYDifferenceRenderer: void drawItemPass0(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.xy.XYDifferenceRenderer: boolean isEitherSeriesDegenerate(org.jfree.data.xy.XYDataset,boolean)>";
"<LegendTitle: void setItemPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<dial.StandardDialFrame: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<SubCategoryAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<jdbc.JDBCPieDataset: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<PeriodAxis: void setMinorTickMarkStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<renderer.xy.XYDifferenceRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<CombinedDomainXYPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.XYPlot: boolean equals(java.lang.Object)>";
"<xy.VectorRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<OHLCSeries: void add(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>" -> "<org.jfree.data.time.ohlc.OHLCItem: void <init>(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>";
"<TextTitle: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<StackedBarRenderer3D: java.util.List createStackedValueList(org.jfree.data.category.CategoryDataset,java.lang.Comparable,double,boolean)>" -> "<org.jfree.data.DataUtilities: double calculateColumnTotal(org.jfree.data.Values2D,int)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<dial.ArcDialFrame: void setForegroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<StandardDialScale: void setMinorTickLength(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<renderer.DefaultPolarItemRenderer: void drawAngularGridLines(java.awt.Graphics2D,org.jfree.chart.plot.PolarPlot,java.util.List,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<xy.XYDifferenceRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<general.AbstractDataset: void fireDatasetChanged()>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<MinMaxCategoryRenderer: void setDrawLines(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.StackedXYAreaRenderer2: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: double[] getStackValues(org.jfree.data.xy.TableXYDataset,int,int)>";
"<DialValueIndicator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<CategoryTableXYDataset: void <init>()>" -> "<org.jfree.data.DefaultKeyedValues2D: void <init>(boolean)>";
"<ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>";
"<XYSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<StrokeList: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<DefaultIntervalCategoryDataset: void <init>(double[][],double[][])>" -> "<org.jfree.data.DataUtilities: java.lang.Number[][] createNumberArray2D(double[][])>";
"<LabelBlock: void setFont(java.awt.Font)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<DialBackground: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<renderer.xy.XYDotRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<CandlestickRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<time.Month: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Month: void <init>(int,int)>";
"<DefaultIntervalCategoryDataset: java.lang.Number getValue(java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<XYTitleAnnotationDemo1: void main(java.lang.String[])>" -> "<org.jfree.experimental.chart.demo.XYTitleAnnotationDemo1: void <init>(java.lang.String)>";
"<plot.JThermometer: void addSubtitle(java.lang.String)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String)>";
"<renderer.xy.XYDifferenceRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<axis.DateTickMarkPosition: void <clinit>()>" -> "<org.jfree.chart.axis.DateTickMarkPosition: void <init>(java.lang.String)>";
"<XYLineAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<LineRenderer3D: void setXOffset(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<LegendTitle: void setItemFont(java.awt.Font)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<SubCategoryAxis: void setSubLabelFont(java.awt.Font)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<xy.XYIntervalSeries: void add(double,double,double,double,double,double)>" -> "<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>";
"<ValueAxis: void setUpArrow(java.awt.Shape)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<LabelBlock: java.lang.Object clone()>" -> "<org.jfree.chart.block.AbstractBlock: java.lang.Object clone()>";
"<xy.XYStepRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYStepRenderer: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<TimePeriodAnchor: void <clinit>()>" -> "<org.jfree.data.time.TimePeriodAnchor: void <init>(java.lang.String)>";
"<plot.dial.ArcDialFrame: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.xy.XYBubbleRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<jdbc.JDBCXYDataset: org.jfree.data.Range getRangeBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<renderer.category.CategoryStepRenderer: void <init>(boolean)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<PiePlot: org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: double calculatePieDatasetTotal(org.jfree.data.general.PieDataset)>";
"<renderer.LookupPaintScale: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<annotations.XYTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<general.CombinedDataset: java.lang.Number getVolume(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<IntervalMarker: void setStartValue(double)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<category.LineAndShapeRenderer: void setBaseShapesFilled(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<GroupedStackedBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer: void <init>()>";
"<renderer.category.MinMaxCategoryRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<time.FixedMillisecond: void <init>(java.util.Date)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<XYSmoothLineAndShapeRenderer: java.awt.geom.Point2D$Double[] getBezierCurve(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,double,int)>" -> "<org.jfree.experimental.chart.renderer.xy.XYSmoothLineAndShapeRenderer: void getControlPoints(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,double)>";
"<ValueAxis: void setPositiveArrowVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<LabelBlock: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<xy.StackedXYBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<XYTextAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<dial.DialTextAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<xy.XIntervalSeries: void add(double,double,double,double)>" -> "<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>";
"<title.Title: void setPosition(org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<xy.XYAreaRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer$XYAreaRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<NumberAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<general.DefaultValueDataset: void <init>(java.lang.Number)>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<DefaultCategoryDataset: void <init>()>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<YIntervalRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<ThermometerPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<text.TextLine: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>" -> "<org.jfree.chart.text.TextFragment: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,float)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String)>";
"<block.RectangleConstraint: org.jfree.chart.block.RectangleConstraint toFixedWidth(double)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>()>";
"<LabelBlock: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>" -> "<org.jfree.chart.block.AbstractBlock: void <init>()>";
"<axis.SymbolAxis: void <init>(java.lang.String,java.lang.String[])>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<XYBoxAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<time.SerialDate: org.jfree.data.time.SerialDate addYears(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: int lastDayOfMonth(int,int)>";
"<TimePeriodValues: org.jfree.data.time.TimePeriodValues createCopy(int,int)>" -> "<org.jfree.data.general.Series: java.lang.Object clone()>";
"<LineBorder: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.dial.ArcDialFrame: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<jdbc.JDBCPieDataset: void executeQuery(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCPieDataset: void fireDatasetChanged()>";
"<plot.XYPlot: boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.xy.XYDataset)>";
"<category.BoxAndWhiskerRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createMultiplePieChart3D(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font)>";
"<renderer.xy.XYSplineAndShapeRenderer: void setPrecision(int)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<annotations.XYShapeAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<annotations.TextAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.ThermometerPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<YIntervalSeries: void add(double,double,double,double)>" -> "<org.jfree.data.xy.YIntervalDataItem: void <init>(double,double,double,double)>";
"<renderer.category.GanttRenderer: void setEndPercent(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.XYSeriesCollection: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<ObjectList: void <init>()>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>()>";
"<general.DefaultPieDataset: void <init>(org.jfree.data.KeyedValues)>" -> "<org.jfree.data.DefaultKeyedValues: void <init>()>";
"<PiePlot: void drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.TextBox: void <init>(org.jfree.chart.text.TextBlock)>";
"<general.CombinedDataset: java.lang.Number getX(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<NumberAxis: void autoAdjustRange()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<category.StackedBarRenderer3D: void <init>()>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer3D: void <init>(boolean)>";
"<XYBlockRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<CombinedRangeCategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.CategoryPlot: java.lang.Object clone()>";
"<BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List,boolean)>" -> "<org.jfree.data.statistics.BoxAndWhiskerItem: void <init>(java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.util.List)>";
"<SpiderWebPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)>" -> "<org.jfree.chart.util.StrokeList: void <init>()>";
"<renderer.category.GanttRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.IntervalBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>";
"<plot.PolarPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<plot.dial.StandardDialScale: void setFirstTickLabelVisible(boolean)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<axis.LogAxis: void setSmallestValue(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<xy.XYDotRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<plot.XYPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePoint2D(java.awt.geom.Point2D,java.io.ObjectOutputStream)>";
"<SymbolAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>()>";
"<LineRenderer3D: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>";
"<NumberAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.ValueAxis: void <init>(java.lang.String,org.jfree.chart.axis.TickUnitSource)>";
"<PiePlot: void drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.plot.PieLabelRecord: void <init>(java.lang.Comparable,double,double,org.jfree.chart.text.TextBox,double,double,double)>";
"<JFreeChart: void notifyListeners(org.jfree.chart.event.ChartProgressEvent)>" -> "<org.jfree.chart.JFreeChart: java.lang.Class class$(java.lang.String)>";
"<Series: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<XYPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<block.EmptyBlock: java.lang.Object clone()>" -> "<org.jfree.chart.block.AbstractBlock: java.lang.Object clone()>";
"<StackedXYAreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: java.lang.Object clone()>";
"<renderer.category.AreaRenderer: void setEndType(org.jfree.chart.renderer.AreaRendererEndType)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<annotations.XYPointerAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<general.DatasetUtilities: org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)>";
"<MovingAverage: org.jfree.data.xy.XYSeries createMovingAverage(org.jfree.data.xy.XYDataset,int,java.lang.String,double,double)>" -> "<org.jfree.data.xy.XYSeries: void <init>(java.lang.Comparable)>";
"<general.DatasetUtilities: org.jfree.data.Range findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<title.LegendTitle: void setItemPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<axis.PeriodAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<BorderArrangement: org.jfree.chart.util.Size2D arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<renderer.category.MinMaxCategoryRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,java.awt.Paint,java.awt.Paint)>";
"<axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>" -> "<org.jfree.chart.axis.ValueTick: void <init>(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<renderer.xy.XYDifferenceRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<ColumnArrangement: org.jfree.chart.util.Size2D arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>()>";
"<CombinedDomainCategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotRenderingInfo: void <init>(org.jfree.chart.ChartRenderingInfo)>";
"<LogAxis: org.jfree.chart.axis.TickUnitSource createLogTickUnits(java.util.Locale)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<XYPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.XYPlot: java.util.List getDatasetsMappedToDomainAxis(java.lang.Integer)>";
"<DefaultIntervalCategoryDataset: void <init>(java.lang.Number[][],java.lang.Number[][])>" -> "<org.jfree.data.category.DefaultIntervalCategoryDataset: void <init>(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])>";
"<ChartFrame: void <init>(java.lang.String,org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.ChartFrame: void <init>(java.lang.String,org.jfree.chart.JFreeChart,boolean)>";
"<util.PaintList: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.xy.XYBarRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<category.ScatterRenderer: void setItemMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ThermometerPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<BorderArrangement: org.jfree.chart.util.Size2D arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,double)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<dial.DialCap: void setOutlineStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<renderer.xy.StackedXYAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<category.LineAndShapeRenderer: void setSeriesShapesVisible(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DefaultXYItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>()>";
"<category.BarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.AbstractXYItemRenderer: java.awt.geom.Point2D calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<ChartPanel: void doSaveAs()>" -> "<org.jfree.chart.ui.ExtensionFileFilter: void <init>(java.lang.String,java.lang.String)>";
"<XYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<renderer.category.LineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<plot.MultiplePiePlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<renderer.xy.XYSplineAndShapeRenderer: void drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer: void solveTridiag(float[],float[],float[],float[],int)>";
"<axis.CategoryAxis: org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)>";
"<util.RectangleInsets: void <clinit>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(org.jfree.chart.util.UnitType,double,double,double,double)>";
"<HexNumberFormat: void <init>()>" -> "<org.jfree.chart.util.HexNumberFormat: void <init>(int)>";
"<renderer.xy.XYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<TextLine: void <init>(java.lang.String,java.awt.Font)>" -> "<org.jfree.chart.text.TextFragment: void <init>(java.lang.String,java.awt.Font)>";
"<dial.StandardDialScale: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<axis.ExtendedCategoryAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.category.BarRenderer3D: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<Year: void <init>()>" -> "<org.jfree.data.time.Year: void <init>(java.util.Date)>";
"<plot.FastScatterPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<XYPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<time.SpreadsheetDate: void <init>(int)>" -> "<org.jfree.data.time.SpreadsheetDate: boolean isLeapYear(int)>";
"<util.AbstractObjectList: void <init>()>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>(int)>";
"<XYItemEntity: void <init>(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<plot.CombinedDomainCategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotRenderingInfo: void <init>(org.jfree.chart.ChartRenderingInfo)>";
"<util.ObjectList: java.lang.Object get(int)>" -> "<org.jfree.chart.util.AbstractObjectList: java.lang.Object get(int)>";
"<StandardXYItemRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<axis.ValueAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<NumberTickUnit: void <init>(double,java.text.NumberFormat,int)>" -> "<org.jfree.chart.axis.TickUnit: void <init>(double,int)>";
"<renderer.xy.StackedXYAreaRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<PolarChartPanel: void setChart(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.PolarChartPanel: void checkChart(org.jfree.chart.JFreeChart)>";
"<renderer.category.StackedBarRenderer3D: java.util.List createStackedValueList(org.jfree.data.category.CategoryDataset,java.lang.Comparable,double,boolean)>" -> "<org.jfree.data.DataUtilities: double calculateColumnTotal(org.jfree.data.Values2D,int)>";
"<LogAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<TimeSeries: org.jfree.data.time.TimeSeries createCopy(org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)>" -> "<org.jfree.data.general.Series: java.lang.Object clone()>";
"<title.TextTitle: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<DialValueIndicator: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<DefaultValueDataset: void <init>(java.lang.Number)>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<JFreeChart: void fireChartChanged()>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<TextFragment: org.jfree.chart.util.Size2D calculateDimensions(java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<BoxAndWhiskerCalculator: double calculateQ1(java.util.List)>" -> "<org.jfree.data.statistics.Statistics: double calculateMedian(java.util.List,int,int)>";
"<dial.StandardDialScale: void setStartAngle(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<plot.XYPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>";
"<OHLCSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<axis.CyclicNumberAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<plot.PiePlot3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.PiePlot: boolean equals(java.lang.Object)>";
"<LegendItem: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeAttributedString(java.text.AttributedString,java.io.ObjectOutputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerCategoryDataset,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<dial.DialPointer: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<title.LegendTitle: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.block.BlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>";
"<plot.IntervalMarker: void <init>(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>" -> "<org.jfree.chart.plot.Marker: void <init>(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<plot.dial.DialPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<PiePlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<SubCategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<XYDifferenceRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<time.TimeSeries: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<DefaultBoxAndWhiskerCategoryDataset: org.jfree.data.Range getRangeBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<time.Quarter: org.jfree.data.time.Year getYear()>" -> "<org.jfree.data.time.Year: void <init>(int)>";
"<EncoderUtil: byte[] encode(java.awt.image.BufferedImage,java.lang.String)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String)>";
"<xy.ClusteredXYBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: void <init>(double,boolean)>";
"<BarRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<category.GanttRenderer: void setCompletePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.dial.StandardDialRange: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,boolean)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String)>";
"<axis.Axis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<CombinedDataset: int getItemCount(int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: float[] deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)>";
"<axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.axis.CategoryLabelWidthType,float)>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)>";
"<renderer.category.LineAndShapeRenderer: void setUseFillPaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartRenderingInfo: void <init>(org.jfree.chart.entity.EntityCollection)>" -> "<org.jfree.chart.plot.PlotRenderingInfo: void <init>(org.jfree.chart.ChartRenderingInfo)>";
"<renderer.category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer$1: void <init>(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,java.awt.Paint,java.awt.Paint,int,int)>";
"<AbstractCategoryItemRenderer: int hashCode()>" -> "<org.jfree.chart.renderer.AbstractRenderer: int hashCode()>";
"<annotations.CategoryPointerAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List,boolean)>" -> "<org.jfree.data.statistics.Statistics: double calculateMedian(java.util.List,boolean)>";
"<StackedAreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.StackedAreaRenderer: void <init>(boolean)>";
"<PieSectionEntity: void <init>(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<CombinedRangeCategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotRenderingInfo: void <init>(org.jfree.chart.ChartRenderingInfo)>";
"<SubCategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>";
"<Range: org.jfree.data.Range shift(org.jfree.data.Range,double,boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<MeterNeedle: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<plot.dial.StandardDialRange: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<SymbolAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<XYErrorRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<plot.MeterPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<XYTitleAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<MinMaxCategoryRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,java.awt.Paint,java.awt.Paint)>";
"<xy.XYLineAndShapeRenderer: void setBaseShapesFilled(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<jdbc.JDBCXYDataset: void <init>(java.sql.Connection)>" -> "<org.jfree.data.jdbc.JDBCXYDataset: void <init>()>";
"<axis.CategoryTick: void <init>(java.lang.Comparable,org.jfree.chart.text.TextBlock,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double)>" -> "<org.jfree.chart.axis.Tick: void <init>(java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<LogarithmicAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<renderer.xy.XYSplineAndShapeRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer: void <init>(int)>";
"<axis.Axis: org.jfree.chart.axis.AxisState drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.AbstractRenderer: boolean equals(java.lang.Object)>";
"<renderer.LookupPaintScale: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<axis.PeriodAxisLabelInfo: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<xy.XYBoxAndWhiskerRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void <init>(double)>";
"<Month: org.jfree.data.time.Year evaluateAsYear(java.lang.String)>" -> "<org.jfree.data.time.Year: org.jfree.data.time.Year parseYear(java.lang.String)>";
"<HistogramDataset: void setType(org.jfree.data.statistics.HistogramType)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<BorderArrangement: org.jfree.chart.util.Size2D arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<PaintMap: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<xy.XYBlockRenderer: void setBlockWidth(double)>" -> "<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>";
"<xy.DefaultXYItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>()>";
"<LegendItem: void <init>(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.LegendItem: void <init>(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<DialTextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<XYPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<jdbc.JDBCXYDataset: void executeQuery(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCXYDataset: void fireDatasetChanged()>";
"<IntervalXYDelegate: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<time.TimeTableXYDataset: void <init>(java.util.TimeZone,java.util.Locale)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<category.MinMaxCategoryRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<axis.CategoryAxis: org.jfree.chart.axis.AxisState drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<TimeTableXYDataset: void <init>(java.util.TimeZone,java.util.Locale)>" -> "<org.jfree.data.DefaultKeyedValues2D: void <init>(boolean)>";
"<DateAxis: void selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<renderer.category.AbstractCategoryItemRenderer: void setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DateAxis: void setDateFormatOverride(java.text.DateFormat)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<StandardXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer$State: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<statistics.HistogramType: void <clinit>()>" -> "<org.jfree.data.statistics.HistogramType: void <init>(java.lang.String)>";
"<xy.XYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<ChartFactory: org.jfree.chart.JFreeChart createScatterPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>()>";
"<DefaultStatisticalCategoryDataset: org.jfree.data.Range getRangeBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<category.GanttRenderer: void setIncompletePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DynamicTimeSeriesCollection: void <init>(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection: java.lang.Class class$(java.lang.String)>";
"<axis.ValueAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)>";
"<OutlierListCollection: boolean add(org.jfree.chart.renderer.Outlier)>" -> "<org.jfree.chart.renderer.OutlierListCollection: boolean updateOutlierList(org.jfree.chart.renderer.OutlierList,org.jfree.chart.renderer.Outlier)>";
"<MatrixSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<servlet.DisplayChart: void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>" -> "<org.jfree.chart.servlet.ServletUtilities: java.lang.String getTempOneTimeFilePrefix()>";
"<xy.XYLine3DRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<SegmentedTimeline: org.jfree.chart.axis.SegmentedTimeline newMondayThroughFridayTimeline()>" -> "<org.jfree.chart.axis.SegmentedTimeline: long firstMondayAfter1900()>";
"<renderer.xy.CandlestickRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.category.LayeredBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<needle.PointerNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<JFreeChart: void removeProgressListener(org.jfree.chart.event.ChartProgressListener)>" -> "<org.jfree.chart.JFreeChart: java.lang.Class class$(java.lang.String)>";
"<axis.ValueAxis: void setRange(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<annotations.XYImageAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<Marker: void <init>()>" -> "<org.jfree.chart.plot.Marker: void <init>(java.awt.Paint)>";
"<category.AbstractCategoryItemRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<XYTextAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<DefaultXYDataset: void removeSeries(java.lang.Comparable)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<renderer.xy.VectorRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String htmlEscape(java.lang.String)>";
"<block.LabelBlock: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<ScatterRenderer: void setUseFillPaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<RendererUtilities: int[] findLiveItems(org.jfree.data.xy.XYDataset,int,double,double)>" -> "<org.jfree.chart.renderer.RendererUtilities: int findLiveItemsUpperBound(org.jfree.data.xy.XYDataset,int,double,double)>";
"<time.SerialDate: java.lang.String[] getMonths()>" -> "<org.jfree.data.time.SerialDate: java.lang.String[] getMonths(boolean)>";
"<ChartFactory: org.jfree.chart.JFreeChart createAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<DateAxis: void setTimeZone(java.util.TimeZone)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<plot.dial.DialBackground: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<AbstractXYAnnotation: void addEntity(org.jfree.chart.plot.PlotRenderingInfo,java.awt.Shape,int,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.entity.XYAnnotationEntity: void <init>(java.awt.Shape,int,java.lang.String,java.lang.String)>";
"<axis.DateAxis: void selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<category.AbstractCategoryItemRenderer: void setLegendItemURLGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CombinedDataset: java.lang.Number getClose(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<general.CombinedDataset: int getItemCount(int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<time.TimeSeries: org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries)>" -> "<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem)>";
"<statistics.DefaultBoxAndWhiskerCategoryDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<renderer.category.ScatterRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<category.AbstractCategoryItemRenderer: void addItemEntity(org.jfree.chart.entity.EntityCollection,org.jfree.data.category.CategoryDataset,int,int,java.awt.Shape)>" -> "<org.jfree.chart.entity.CategoryItemEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)>";
"<XYTitleAnnotation: void <init>(double,double,org.jfree.chart.title.Title,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
"<annotations.XYLineAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<dial.DialValueIndicator: void setOutlinePaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<category.StackedAreaRenderer: void <init>(boolean)>" -> "<org.jfree.chart.renderer.category.AreaRenderer: void <init>()>";
"<renderer.category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,boolean,boolean)>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer$2: void <init>(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,boolean,boolean,int,int)>";
"<DefaultAxisEditor: void <init>(org.jfree.chart.axis.Axis)>" -> "<org.jfree.chart.ui.PaintSample: void <init>(java.awt.Paint)>";
"<plot.CombinedDomainCategoryPlot: void <init>()>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>()>";
"<StandardDialFrame: void <init>()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<plot.SpiderWebPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,java.util.Locale,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<plot.Marker: void addChangeListener(org.jfree.chart.event.MarkerChangeListener)>" -> "<org.jfree.chart.plot.Marker: java.lang.Class class$(java.lang.String)>";
"<AbstractDataset: void removeChangeListener(org.jfree.data.general.DatasetChangeListener)>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Class class$(java.lang.String)>";
"<plot.XYPlot: org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<axis.CategoryLabelPositions: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions createDownRotationLabelPositions(double)>";
"<plot.dial.StandardDialRange: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<OHLCSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<plot.dial.StandardDialScale: void setMinorTickPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<CombinedDomainCategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<dial.StandardDialFrame: java.awt.Shape getWindow(java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBubbleChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYZDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardXYZURLGenerator: void <init>()>";
"<category.BarRenderer: void setMinimumBarLength(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<category.ScatterRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<category.BarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: org.jfree.data.Range expandToInclude(org.jfree.data.Range,double)>";
"<plot.dial.DialPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<general.CombinedDataset: java.lang.Number getHigh(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<xy.StandardXYItemRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<DateAxis: java.util.Date previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)>" -> "<org.jfree.data.time.Month: void <init>(java.util.Date,java.util.TimeZone)>";
"<BlockBorder: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<xy.XYBarRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<StandardDialRange: void <init>(double,double,java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<renderer.category.MinMaxCategoryRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,boolean,boolean)>";
"<DialValueIndicator: void <init>(int)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<LineAndShapeRenderer: void setSeriesShapesFilled(int,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.AbstractXYItemRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<xy.StandardXYItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<XYSeries: void update(java.lang.Number,java.lang.Number)>" -> "<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>";
"<axis.ExtendedCategoryAxis: java.lang.Object clone()>" -> "<org.jfree.chart.axis.CategoryAxis: java.lang.Object clone()>";
"<TextTitle: void setTextAlignment(org.jfree.chart.util.HorizontalAlignment)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<EmptyBlock: void <init>(double,double)>" -> "<org.jfree.chart.block.AbstractBlock: void <init>()>";
"<xy.XYDifferenceRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<ClusteredXYBarRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: java.lang.Object clone()>";
"<xy.XIntervalSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.xy.XIntervalSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<plot.dial.DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Rectangle2D createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)>";
"<axis.QuarterDateFormat: void <init>()>" -> "<org.jfree.chart.axis.QuarterDateFormat: void <init>(java.util.TimeZone)>";
"<plot.SpiderWebPlot: void drawRadarPoly(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotRenderingInfo,int,int,double,double)>" -> "<org.jfree.chart.entity.CategoryItemEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)>";
"<DateAxis: void selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.DateAxis: double estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)>";
"<VectorDataItem: void <init>(double,double,double,double)>" -> "<org.jfree.data.xy.Vector: void <init>(double,double)>";
"<StandardDialScale: void setMinorTickStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<PiePlot: void drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)>" -> "<org.jfree.chart.entity.PieSectionEntity: void <init>(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)>";
"<SpiderWebPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<entity.XYItemEntity: void <init>(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<StackedXYBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.data.general.DatasetUtilities: double calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)>";
"<statistics.DefaultBoxAndWhiskerXYDataset: void add(java.util.Date,org.jfree.data.statistics.BoxAndWhiskerItem)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<MeterPlot: void drawValueLabel(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<category.StackedBarRenderer: void <init>(boolean)>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)>";
"<dial.DialPointer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<ObjectUtilities: boolean isJDK14()>" -> "<org.jfree.chart.util.ArrayUtilities: int compareVersionArrays(java.lang.Comparable[],java.lang.Comparable[])>";
"<XYTitleAnnotationDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.chart.ChartFactory: org.jfree.chart.JFreeChart createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>";
"<renderer.xy.XYBoxAndWhiskerRenderer: void <init>(double)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<XYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<TextTitle: void setExpandToFitSpace(boolean)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<plot.dial.DialCap: void setFillPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DefaultXYDataset: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractXYDataset: java.lang.Object clone()>";
"<Axis: void notifyListeners(org.jfree.chart.event.AxisChangeEvent)>" -> "<org.jfree.chart.axis.Axis: java.lang.Class class$(java.lang.String)>";
"<block.AbstractBlock: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<BarChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions createUpRotationLabelPositions(double)>";
"<DeviationRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.DeviationRenderer$State: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<axis.CategoryAxis: void setMaximumCategoryLabelLines(int)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<Title: void <init>(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)>" -> "<org.jfree.chart.title.Title: void <init>(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<ObjectList: int indexOf(java.lang.Object)>" -> "<org.jfree.chart.util.AbstractObjectList: int indexOf(java.lang.Object)>";
"<BorderArrangement: org.jfree.chart.util.Size2D arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<DefaultPlotEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultPlotEditor: void attemptDrawShapesSelection()>";
"<ChartFactory: org.jfree.chart.JFreeChart createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerCategoryDataset,boolean)>" -> "<org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator: void <init>()>";
"<CategoryLabelPositions: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor)>";
"<category.BarRenderer3D: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<StrokeChooserPanel: void <init>(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])>" -> "<org.jfree.chart.ui.StrokeSample: void <init>(java.awt.Stroke)>";
"<xy.DefaultXYDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<renderer.AbstractRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<DateAxis: void setRange(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range,boolean,boolean)>";
"<util.AbstractObjectList: void <init>(int)>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>(int,int)>";
"<ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)>" -> "<org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator: void <init>()>";
"<imagemap.ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>";
"<category.StackedAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.StackedAreaRenderer: double[] averageStackValues(double[],double[])>";
"<LogAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<plot.FastScatterPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ArrayUtilities: boolean equal(float[][],float[][])>";
"<KeyedObject: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<time.TimePeriodValuesCollection: java.lang.Number getX(int,int)>" -> "<org.jfree.data.time.TimePeriodValuesCollection: long getX(org.jfree.data.time.TimePeriod)>";
"<OHLCItem: void <init>(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>" -> "<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>";
"<JDBCXYDataset: org.jfree.data.Range getRangeBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<renderer.category.StackedBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<block.BorderArrangement: org.jfree.chart.util.Size2D arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<annotations.XYPointerAnnotation: void <init>(java.lang.String,double,double,double)>" -> "<org.jfree.chart.annotations.XYTextAnnotation: void <init>(java.lang.String,double,double)>";
"<plot.Plot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<MultiplePiePlot: void setDataset(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<plot.dial.DialBackground: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<XYPlot: org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<xy.AbstractXYItemRenderer: void <init>()>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<renderer.AbstractRenderer: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,boolean)>";
"<StatisticalBarRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<XYPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<renderer.category.GroupedStackedBarRenderer: void <init>()>" -> "<org.jfree.data.KeyToGroupMap: void <init>()>";
"<YIntervalRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<DialBackground: void <init>(java.awt.Paint)>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>()>";
"<DialTextAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<StandardDialFrame: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: void <init>(double)>";
"<urls.StandardXYZURLGenerator: void <init>()>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>()>";
"<CategoryPlot: void mapDatasetToRangeAxis(int,int)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<LineAndShapeRenderer: void setUseSeriesOffset(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.category.AreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<XYPlot: boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.xy.XYDataset)>";
"<axis.SegmentedTimeline: org.jfree.chart.axis.SegmentedTimeline newFifteenMinuteTimeline()>" -> "<org.jfree.chart.axis.SegmentedTimeline: long firstMondayAfter1900()>";
"<plot.XYPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<DialPointer: void setDatasetIndex(int)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<XYTitleAnnotationDemo1: org.jfree.data.xy.XYDataset createDataset()>" -> "<org.jfree.data.time.Month: void <init>(int,int)>";
"<plot.dial.DialValueIndicator: void <init>(int)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<SerialDate: org.jfree.data.time.SerialDate getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate addDays(int,org.jfree.data.time.SerialDate)>";
"<StackedXYAreaRenderer2: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: double[] getStackValues(org.jfree.data.xy.TableXYDataset,int,int)>";
"<TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,double)>" -> "<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>";
"<JFreeChart: void notifyListeners(org.jfree.chart.event.ChartChangeEvent)>" -> "<org.jfree.chart.JFreeChart: java.lang.Class class$(java.lang.String)>";
"<BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawLowFarOut(double,java.awt.Graphics2D,double,double)>";
"<renderer.xy.XYStepAreaRenderer: void setPlotArea(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYSeries: org.jfree.data.xy.XYDataItem addOrUpdate(java.lang.Number,java.lang.Number)>" -> "<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>";
"<plot.Marker: void <init>(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<VectorSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<renderer.xy.XYAreaRenderer2: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<ModuloAxis: void resizeRange(double,double)>" -> "<org.jfree.chart.axis.ModuloAxis: double getDisplayLength()>";
"<category.DefaultIntervalCategoryDataset: void <init>(java.lang.Number[][],java.lang.Number[][])>" -> "<org.jfree.data.category.DefaultIntervalCategoryDataset: void <init>(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])>";
"<renderer.xy.XYLine3DRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>()>";
"<time.TimeSeries: void removeAgedItems(long,boolean)>" -> "<org.jfree.data.time.TimeSeries: java.lang.Class class$(java.lang.String)>";
"<time.Week: org.jfree.data.time.Week parseWeek(java.lang.String)>" -> "<org.jfree.data.time.Week: int stringToWeek(java.lang.String)>";
"<XYErrorRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<axis.PeriodAxis: void <init>(java.lang.String)>" -> "<org.jfree.data.time.Day: void <init>()>";
"<category.GanttRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.IntervalBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>";
"<Axis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<title.LegendTitle: void <init>(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)>" -> "<org.jfree.chart.title.Title: void <init>()>";
"<ObjectUtilities: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>" -> "<org.jfree.chart.util.ObjectUtilities: java.net.URL getResource(java.lang.String,java.lang.Class)>";
"<annotations.XYPolygonAnnotation: void <init>(double[],java.awt.Stroke,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
"<CyclicNumberAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.CyclicNumberAxis$CycleBoundTick: void <init>(boolean,java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<category.WaterfallBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<ComparableObjectSeries: void update(java.lang.Comparable,java.lang.Object)>" -> "<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>";
"<SymbolAxis: void <init>(java.lang.String,java.lang.String[])>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<renderer.category.BarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>";
"<general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>";
"<renderer.xy.XYDotRenderer: void setDotHeight(int)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.category.MinMaxCategoryRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<EncoderUtil: byte[] encode(java.awt.image.BufferedImage,java.lang.String,float)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,float)>";
"<PiePlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.StrokeMap: void <init>()>";
"<plot.PieLabelDistributor: void distributeLabels(double,double)>" -> "<org.jfree.chart.plot.PieLabelDistributor: boolean isOverlap()>";
"<XYSeries: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<VerticalAlignment: void <clinit>()>" -> "<org.jfree.chart.util.VerticalAlignment: void <init>(java.lang.String)>";
"<BlockBorder: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<labels.StandardXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<plot.PiePlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<LegendGraphic: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<BoxAndWhiskerXYToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>";
"<xy.CandlestickRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<TimePeriodValues: boolean equals(java.lang.Object)>" -> "<org.jfree.data.general.Series: boolean equals(java.lang.Object)>";
"<AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<Day: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int)>";
"<AbstractRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<LineRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<AbstractCategoryItemRenderer: void <init>()>" -> "<org.jfree.chart.labels.StandardCategorySeriesLabelGenerator: void <init>()>";
"<CSV: void extractRowKeyAndData(java.lang.String,org.jfree.data.category.DefaultCategoryDataset,java.util.List)>" -> "<org.jfree.data.io.CSV: java.lang.String removeStringDelimiters(java.lang.String)>";
"<title.Title: void <clinit>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<plot.SpiderWebPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)>" -> "<org.jfree.chart.util.StrokeList: void <init>()>";
"<LineAndShapeRenderer: void setSeriesShapesFilled(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ArcDialFrame: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<axis.DateAxis: void setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<CandlestickRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.xy.VectorRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<xy.XYBlockRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<XYPlot: void mapDatasetToDomainAxis(int,int)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<Plot: void addChangeListener(org.jfree.chart.event.PlotChangeListener)>" -> "<org.jfree.chart.plot.Plot: java.lang.Class class$(java.lang.String)>";
"<category.StackedAreaRenderer: double getPreviousHeight(org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.data.DataUtilities: double calculateColumnTotal(org.jfree.data.Values2D,int)>";
"<plot.IntervalMarker: void setStartValue(double)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<time.Second: void <init>()>" -> "<org.jfree.data.time.Second: void <init>(java.util.Date)>";
"<plot.XYPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<renderer.category.CategoryStepRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState createState(org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.CategoryStepRenderer$State: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<axis.DateAxis: void setRange(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range,boolean,boolean)>";
"<axis.SymbolAxis: void drawGridBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,java.util.List)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<category.LineAndShapeRenderer: void setDrawOutlines(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>()>";
"<StackedXYAreaRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer$StackedXYAreaRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<NumberAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.ValueAxis: boolean equals(java.lang.Object)>";
"<renderer.category.LineAndShapeRenderer: void setBaseLinesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<dial.DialValueIndicator: void setOutlineStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<TimeSeries: void <init>(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)>" -> "<org.jfree.data.general.Series: void <init>(java.lang.Comparable)>";
"<imagemap.ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)>" -> "<org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator: void <init>()>";
"<title.TextTitle: void setText(java.lang.String)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<axis.DateAxis: void setMaximumDate(java.util.Date)>" -> "<org.jfree.data.time.DateRange: void <init>(java.util.Date,java.util.Date)>";
"<DefaultValueDataset: void <init>(double)>" -> "<org.jfree.data.general.DefaultValueDataset: void <init>(java.lang.Number)>";
"<category.CategoryStepRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<time.Hour: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<dial.StandardDialScale: void setTickLabelsVisible(boolean)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<time.ohlc.OHLCSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<renderer.category.AbstractCategoryItemRenderer: void addItemEntity(org.jfree.chart.entity.EntityCollection,org.jfree.data.category.CategoryDataset,int,int,java.awt.Shape)>" -> "<org.jfree.chart.entity.CategoryItemEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)>";
"<KeyedObjects: java.lang.Object getObject(java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<renderer.category.MinMaxCategoryRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,boolean,boolean)>";
"<block.AbstractBlock: org.jfree.chart.block.RectangleConstraint toContentConstraint(org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.block.AbstractBlock: org.jfree.data.Range trimToContentWidth(org.jfree.data.Range)>";
"<xy.XYSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createStandardTickUnits(java.util.Locale)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<xy.StackedXYAreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: java.lang.Object clone()>";
"<CategoryPointerAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>(java.util.Locale)>";
"<util.UnitType: void <clinit>()>" -> "<org.jfree.chart.util.UnitType: void <init>(java.lang.String)>";
"<axis.PeriodAxisLabelInfo: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.xy.YIntervalRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<title.LegendTitle: void <init>(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<XYBoxAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<renderer.category.BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.Outlier: void <init>(double,double,double)>";
"<xy.XYSeries: org.jfree.data.xy.XYSeries createCopy(int,int)>" -> "<org.jfree.data.xy.XYDataItem: java.lang.Object clone()>";
"<PiePlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.general.PieDataset)>";
"<SpiderWebPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)>" -> "<org.jfree.chart.util.PaintList: void <init>()>";
"<renderer.xy.XYLineAndShapeRenderer: void setDrawSeriesLineAsPath(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ModuloAxis: double getDisplayCentralValue()>" -> "<org.jfree.chart.axis.ModuloAxis: double getDisplayLength()>";
"<DatasetUtilities: org.jfree.data.Range findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<CyclicNumberAxis: org.jfree.chart.axis.AxisState drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.AxisState drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>";
"<PiePlot: void drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)>";
"<EncoderUtil: void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float,boolean)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,float,boolean)>";
"<xy.DefaultTableXYDataset: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<time.DynamicTimeSeriesCollection: void appendData(float[])>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence: void <init>(org.jfree.data.time.DynamicTimeSeriesCollection,int)>";
"<plot.dial.StandardDialRange: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<AbstractXYItemLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<annotations.XYBoxAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<CategoryLabelPositions: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions createUpRotationLabelPositions(double)>";
"<renderer.LookupPaintScale: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<ExtendedCategoryAxis: org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)>" -> "<org.jfree.chart.text.TextFragment: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<plot.CombinedRangeXYPlot: void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)>" -> "<org.jfree.chart.plot.XYPlot: void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<annotations.AbstractXYAnnotation: void addEntity(org.jfree.chart.plot.PlotRenderingInfo,java.awt.Shape,int,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.entity.XYAnnotationEntity: void <init>(java.awt.Shape,int,java.lang.String,java.lang.String)>";
"<time.Hour: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.Day: void <init>(java.util.Date,java.util.TimeZone)>";
"<NumberAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<DefaultWindDataset: void <init>(java.util.List,java.lang.Object[][][])>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,float)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String)>";
"<ValueTick: void <init>(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>" -> "<org.jfree.chart.axis.ValueTick: void <init>(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<VectorRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<plot.dial.DialPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D viewToFrame(java.awt.geom.Rectangle2D)>";
"<axis.ValueAxis: void zoomRange(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<XYBlockRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<axis.CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisState: void <init>()>";
"<StackedAreaRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset)>";
"<xy.StackedXYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: boolean equals(java.lang.Object)>";
"<CombinedDomainCategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.CategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>";
"<CategoryPointerAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<axis.CategoryAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.Axis: void <init>(java.lang.String)>";
"<xy.YIntervalSeries: void add(double,double,double,double)>" -> "<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>";
"<ExtendedCategoryAxis: org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)>" -> "<org.jfree.chart.text.TextLine: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<NumberTickUnit: void <init>(double)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<ChartFactory: org.jfree.chart.JFreeChart createAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<renderer.xy.XYBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<CategoryAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<text.TextLine: org.jfree.chart.util.Size2D calculateDimensions(java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<plot.MeterInterval: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<plot.XYPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.XYPlot: java.util.List getDatasetsMappedToRangeAxis(java.lang.Integer)>";
"<StandardPieSectionLabelGenerator: void <init>(java.lang.String)>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<plot.PolarPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<JThermometer: void <init>()>" -> "<org.jfree.data.general.DefaultValueDataset: void <init>()>";
"<renderer.category.LineAndShapeRenderer: void setSeriesShapesFilled(int,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.CategoryPlot: java.util.List datasetsMappedToRangeAxis(int)>";
"<ChartPanel: void <init>(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)>" -> "<org.jfree.chart.ChartRenderingInfo: void <init>()>";
"<time.TimePeriodValues: org.jfree.data.time.TimePeriodValues createCopy(int,int)>" -> "<org.jfree.data.time.TimePeriodValues: void add(org.jfree.data.time.TimePeriodValue)>";
"<title.TextTitle: void <init>(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.title.Title: void <init>(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<NumberTickUnit: void <init>(double,java.text.NumberFormat)>" -> "<org.jfree.chart.axis.TickUnit: void <init>(double)>";
"<renderer.xy.StackedXYAreaRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<CombinedDataset: java.lang.Number getEndX(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<Axis: void setLabelPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<OverLIBToolTipTagFragmentGenerator: java.lang.String generateToolTipFragment(java.lang.String)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String htmlEscape(java.lang.String)>";
"<ColorBlock: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.block.AbstractBlock: boolean equals(java.lang.Object)>";
"<DefaultIntervalXYDataset: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<WaterfallBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean equals(java.lang.Object)>";
"<demo.TimeSeriesChartDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.chart.demo.TimeSeriesChartDemo1: org.jfree.data.xy.XYDataset createDataset()>";
"<PiePlot: void drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.TextBox: void <init>(org.jfree.chart.text.TextBlock)>";
"<renderer.xy.StandardXYItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<StandardPieToolTipGenerator: void <init>(java.lang.String,java.util.Locale)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<block.BlockBorder: void <init>(java.awt.Paint)>" -> "<org.jfree.chart.block.BlockBorder: void <init>(org.jfree.chart.util.RectangleInsets,java.awt.Paint)>";
"<xy.NormalizedMatrixSeries: void update(int,int,double)>" -> "<org.jfree.data.xy.MatrixSeries: void update(int,int,double)>";
"<annotations.CategoryLineAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis3D: void <init>(java.lang.String)>";
"<plot.CategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.CategoryPlot: java.util.List datasetsMappedToRangeAxis(int)>";
"<GanttRenderer: void setIncompletePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.category.StackedAreaRenderer: void setRenderAsPercentages(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.CombinedRangeXYPlot: void add(org.jfree.chart.plot.XYPlot,int)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<VectorSeries: void add(double,double,double,double)>" -> "<org.jfree.data.xy.VectorDataItem: void <init>(double,double,double,double)>";
"<Axis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<util.ObjectUtilities: boolean isJDK14()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Class class$(java.lang.String)>";
"<renderer.xy.XYLineAndShapeRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<renderer.category.AbstractCategoryItemRenderer: java.awt.geom.Point2D calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<xy.XYErrorRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<servlet.ServletUtilities: java.lang.String saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.servlet.ServletUtilities: void registerChartForDeletion(java.io.File,javax.servlet.http.HttpSession)>";
"<needle.MiddlePinNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<statistics.DefaultBoxAndWhiskerCategoryDataset: void <init>()>" -> "<org.jfree.data.KeyedObjects2D: void <init>()>";
"<XYPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.plot.Plot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>";
"<SpreadsheetDate: void <init>(int,int,int)>" -> "<org.jfree.data.time.SerialDate: int lastDayOfMonth(int,int)>";
"<XYPolygonAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<StandardXYItemLabelGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: boolean equals(java.lang.Object)>";
"<XYPlot: org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int)>" -> "<org.jfree.chart.util.RectangleEdge: org.jfree.chart.util.RectangleEdge opposite(org.jfree.chart.util.RectangleEdge)>";
"<StandardCategoryToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat)>";
"<BoxAndWhiskerToolTipGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<CategoryToPieDataset: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,int)>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<plot.CategoryPlot: org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<StrokeList: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<SerialDate: org.jfree.data.time.SerialDate getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: boolean isValidWeekdayCode(int)>";
"<xy.XYSplineAndShapeRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>()>";
"<statistics.DefaultStatisticalCategoryDataset: void add(java.lang.Number,java.lang.Number,java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultStatisticalCategoryDataset: void updateBounds()>";
"<CategoryPointerAnnotation: java.lang.Object clone()>" -> "<org.jfree.chart.annotations.CategoryTextAnnotation: java.lang.Object clone()>";
"<labels.StandardPieToolTipGenerator: void <init>(java.lang.String)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>(java.lang.String,java.util.Locale)>";
"<DialPlot: int hashCode()>" -> "<org.jfree.chart.util.ObjectUtilities: int hashCode(java.lang.Object)>";
"<xy.HighLowRenderer: void setDrawCloseTicks(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<statistics.BoxAndWhiskerCalculator: double calculateQ3(java.util.List)>" -> "<org.jfree.data.statistics.Statistics: double calculateMedian(java.util.List,int,int)>";
"<ThermometerPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<XYPolygonAnnotation: void <init>(double[],java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.annotations.XYPolygonAnnotation: void <init>(double[],java.awt.Stroke,java.awt.Paint,java.awt.Paint)>";
"<demo.PieChartDemo1: void main(java.lang.String[])>" -> "<org.jfree.chart.util.RefineryUtilities: void centerFrameOnScreen(java.awt.Window)>";
"<category.LineRenderer3D: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>";
"<XYShapeAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<time.Minute: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<title.LegendGraphic: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)>";
"<xy.XYErrorRenderer: void setDrawYError(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<NumberAxis: void setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<DefaultBoxAndWhiskerCategoryDataset: void <init>()>" -> "<org.jfree.data.KeyedObjects2D: void <init>()>";
"<xy.StackedXYAreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer: void <init>(int)>";
"<statistics.MeanAndStandardDeviation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions replaceRightPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)>" -> "<org.jfree.chart.axis.CategoryLabelPositions: void <init>(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)>";
"<annotations.XYShapeAnnotation: void <init>(java.awt.Shape,java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.annotations.XYShapeAnnotation: void <init>(java.awt.Shape,java.awt.Stroke,java.awt.Paint,java.awt.Paint)>";
"<DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<statistics.DefaultBoxAndWhiskerCategoryDataset: void removeColumn(int)>" -> "<org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset: void updateBounds()>";
"<dial.DialValueIndicator: void setNumberFormat(java.text.NumberFormat)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<BasicProjectInfo: void addOptionalLibrary(java.lang.String)>" -> "<org.jfree.chart.ui.BasicProjectInfo$OptionalLibraryHolder: void <init>(java.lang.String)>";
"<CategoryAxis3D: void <init>()>" -> "<org.jfree.chart.axis.CategoryAxis3D: void <init>(java.lang.String)>";
"<Plot: void drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.G2TextMeasurer: void <init>(java.awt.Graphics2D)>";
"<plot.dial.StandardDialScale: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<NormalizedMatrixSeries: void update(int,int,double)>" -> "<org.jfree.data.xy.MatrixSeries: void update(int,int,double)>";
"<XYDotRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<plot.PlotRenderingInfo: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<time.TimePeriodValues: void recalculateBounds()>" -> "<org.jfree.data.time.TimePeriodValues: void updateBounds(org.jfree.data.time.TimePeriod,int)>";
"<plot.CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.ShipNeedle: void <init>()>";
"<annotations.XYShapeAnnotation: void <init>(java.awt.Shape,java.awt.Stroke,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
"<xy.XYAreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: void <init>(int)>";
"<BlockBorder: void <init>(double,double,double,double,java.awt.Paint)>" -> "<org.jfree.chart.block.BlockBorder: void <init>(org.jfree.chart.util.RectangleInsets,java.awt.Paint)>";
"<title.PaintScaleLegend: void setStripOutlineVisible(boolean)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<DefaultKeyedValues: void removeValue(java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<plot.XYPlot: org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int)>" -> "<org.jfree.chart.util.RectangleEdge: org.jfree.chart.util.RectangleEdge opposite(org.jfree.chart.util.RectangleEdge)>";
"<VectorDataItem: void <init>(double,double,double,double)>" -> "<org.jfree.data.xy.XYCoordinate: void <init>(double,double)>";
"<Range: org.jfree.data.Range expand(org.jfree.data.Range,double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<AbstractObjectList: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.Object)>";
"<DateAxis: org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits(java.util.TimeZone)>" -> "<org.jfree.chart.axis.DateTickUnit: void <init>(int,int,int,int,java.text.DateFormat)>";
"<xy.MatrixSeries: boolean equals(java.lang.Object)>" -> "<org.jfree.data.general.Series: boolean equals(java.lang.Object)>";
"<Marker: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<StackedXYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<general.DatasetUtilities: org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<xy.DefaultXYDataset: void addSeries(java.lang.Comparable,double[][])>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<text.TextUtilities: float[] deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<IntervalMarker: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Marker: java.lang.Object clone()>";
"<JFreeChart: void setTextAntiAlias(java.lang.Object)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<block.AbstractBlock: org.jfree.chart.block.RectangleConstraint toContentConstraint(org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<renderer.xy.XYAreaRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<StrokeList: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.AbstractObjectList: boolean equals(java.lang.Object)>";
"<renderer.AbstractRenderer: void addChangeListener(org.jfree.chart.event.RendererChangeListener)>" -> "<org.jfree.chart.renderer.AbstractRenderer: java.lang.Class class$(java.lang.String)>";
"<plot.dial.StandardDialRange: void setUpperBound(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<renderer.category.GanttRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<category.ScatterRenderer: void setBaseShapesFilled(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<annotations.XYPointerAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<AbstractBlock: void setMargin(double,double,double,double)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<Week: org.jfree.data.time.Week parseWeek(java.lang.String)>" -> "<org.jfree.data.time.Week: int findSeparator(java.lang.String)>";
"<dial.StandardDialFrame: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DefaultChartEditor: void <init>(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.editor.DefaultPlotEditor: void <init>(org.jfree.chart.plot.Plot)>";
"<DefaultMultiValueCategoryDataset: void <init>()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<LogFormat: void <init>(double,java.lang.String,boolean)>" -> "<org.jfree.chart.util.LogFormat: void <init>(double,java.lang.String,java.lang.String,boolean)>";
"<statistics.HistogramDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<plot.FastScatterPlot: java.lang.Object clone()>" -> "<org.jfree.chart.axis.ValueAxis: java.lang.Object clone()>";
"<plot.DefaultDrawingSupplier: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.DefaultDrawingSupplier: boolean equalShapes(java.awt.Shape[],java.awt.Shape[])>";
"<general.DefaultValueDataset: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<LineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<axis.LogAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<category.ScatterRenderer: void setUseOutlinePaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<LegendRenderingOrder: void <clinit>()>" -> "<org.jfree.chart.LegendRenderingOrder: void <init>(java.lang.String)>";
"<CSV: org.jfree.data.category.CategoryDataset readCategoryDataset(java.io.Reader)>" -> "<org.jfree.data.io.CSV: void extractRowKeyAndData(java.lang.String,org.jfree.data.category.DefaultCategoryDataset,java.util.List)>";
"<annotations.XYBoxAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<general.CombinedDataset: int getItemCount(int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<ProjectInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.awt.Image,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.ui.BasicProjectInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
"<time.TimeSeries: java.lang.Object clone()>" -> "<org.jfree.data.general.Series: java.lang.Object clone()>";
"<plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<labels.BoxAndWhiskerXYToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>";
"<title.LegendTitle: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>()>";
"<editor.DefaultChartEditor: void <init>(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.editor.DefaultTitleEditor: void <init>(org.jfree.chart.title.Title)>";
"<xy.HighLowRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<XYTitleAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.xy.CandlestickRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<xy.XIntervalDataItem: void <init>(double,double,double,double)>" -> "<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>";
"<annotations.XYImageAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<XYPolygonAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<axis.ModuloAxis: double lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<needle.ArrowNeedle: void <init>(boolean)>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<xy.XIntervalDataItem: void <init>(double,double,double,double)>" -> "<org.jfree.data.xy.YWithXInterval: void <init>(double,double,double)>";
"<XIntervalSeries: void add(double,double,double,double)>" -> "<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>";
"<plot.SpiderWebPlot: void <init>(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.plot.SpiderWebPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)>";
"<IntervalCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat)>" -> "<org.jfree.chart.labels.StandardCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat)>";
"<axis.ValueAxis: void setAutoRangeMinimumSize(double,boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ohlc.OHLCSeries: void add(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>" -> "<org.jfree.data.time.ohlc.OHLCItem: void <init>(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>";
"<IntervalXYDelegate: double recalculateInterval()>" -> "<org.jfree.data.xy.IntervalXYDelegate: double calculateIntervalForSeries(int)>";
"<xy.XYItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.RendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<axis.DateTick: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<CategoryPointerAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<AbstractCategoryItemRenderer: boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<time.TimePeriodValues: void delete(int,int)>" -> "<org.jfree.data.time.TimePeriodValues: void recalculateBounds()>";
"<StandardXYToolTipGenerator: org.jfree.chart.labels.StandardXYToolTipGenerator getTimeSeriesInstance()>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>";
"<plot.dial.DialTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<KeyedObjects2D: void removeColumn(java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<DefaultStatisticalCategoryDataset: void <init>()>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<IntervalBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>";
"<plot.RingPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<GanttRenderer: void setStartPercent(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CategoryStepRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<renderer.xy.XYLineAndShapeRenderer: void drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean isPointInRect(java.awt.geom.Rectangle2D,double,double)>";
"<WaferMapRenderer: void <init>(java.lang.Integer,java.lang.Integer)>" -> "<org.jfree.chart.renderer.AbstractRenderer: void <init>()>";
"<xy.XIntervalSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<annotations.XYDrawableAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<time.SerialDate: java.lang.String toString()>" -> "<org.jfree.data.time.SerialDate: java.lang.String monthCodeToString(int)>";
"<AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.AbstractRenderer: java.lang.Object clone()>";
"<ExtendedCategoryAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<block.AbstractBlock: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<XYLineAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<renderer.xy.StackedXYAreaRenderer2: void <init>()>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<category.BarRenderer: void setItemMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XIntervalSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<StandardPieURLGenerator: void <init>(java.lang.String,java.lang.String)>" -> "<org.jfree.chart.urls.StandardPieURLGenerator: void <init>(java.lang.String,java.lang.String,java.lang.String)>";
"<axis.LogarithmicAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.category.WaterfallBarRenderer: void <init>()>";
"<RefineryUtilities: javax.swing.JPanel createTablePanel(javax.swing.table.TableModel)>" -> "<org.jfree.chart.util.NumberCellRenderer: void <init>()>";
"<plot.dial.StandardDialFrame: void setStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<TimeSeries: org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries)>" -> "<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem)>";
"<KeyedObjects2D: void removeObject(java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<XYShapeAnnotation: void <init>(java.awt.Shape,java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.annotations.XYShapeAnnotation: void <init>(java.awt.Shape,java.awt.Stroke,java.awt.Paint,java.awt.Paint)>";
"<IntervalMarker: void setEndValue(double)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<general.CombinedDataset: java.lang.Number getX(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<xy.DefaultWindDataset: void <init>(java.lang.String[],java.lang.Object[][][])>" -> "<org.jfree.data.xy.DefaultWindDataset: void <init>(java.util.List,java.lang.Object[][][])>";
"<BarRenderer3D: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.xy.XYAreaRenderer2: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<block.LineBorder: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<imagemap.ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.StandardURLTagFragmentGenerator: void <init>()>";
"<category.DefaultIntervalCategoryDataset: boolean equals(java.lang.Object)>" -> "<org.jfree.data.category.DefaultIntervalCategoryDataset: boolean equal(java.lang.Number[][],java.lang.Number[][])>";
"<LabelBlock: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.entity.StandardEntityCollection: void <init>()>";
"<xy.YIntervalRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<plot.dial.DialCap: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<MeterPlot: void drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,boolean)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<Task: void <init>(java.lang.String,java.util.Date,java.util.Date)>" -> "<org.jfree.data.time.SimpleTimePeriod: void <init>(java.util.Date,java.util.Date)>";
"<renderer.xy.StandardXYItemRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>";
"<dial.DialTextAnnotation: void setLabel(java.lang.String)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<KeyToGroupMap: java.lang.Object clone()>" -> "<org.jfree.data.KeyToGroupMap: java.util.Collection clone(java.util.Collection)>";
"<StandardCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<title.DateTitle: void <init>(int,java.util.Locale,java.awt.Font,java.awt.Paint)>" -> "<org.jfree.chart.title.DateTitle: void <init>(int,java.util.Locale,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<XYAreaRenderer2: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<renderer.xy.AbstractXYItemRenderer: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<title.LegendGraphic: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<annotations.XYDrawableAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<text.TextUtilities: void <clinit>()>" -> "<org.jfree.chart.util.ObjectUtilities: boolean isJDK14()>";
"<BooleanList: void <init>()>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>()>";
"<xy.XYStepAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<PiePlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<dial.StandardDialRange: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<statistics.SimpleHistogramDataset: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<MeterPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<title.ImageTitle: void setImage(java.awt.Image)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<category.StackedBarRenderer: void setRenderAsPercentages(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.XYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<DialShape: void <clinit>()>" -> "<org.jfree.chart.plot.DialShape: void <init>(java.lang.String)>";
"<axis.PeriodAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<xy.StandardXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer$State: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<time.Month: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Month: void <init>(java.util.Date,java.util.TimeZone)>";
"<plot.ThermometerPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<FixedMillisecond: void <init>(java.util.Date)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<axis.LogAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.ValueAxis: void <init>(java.lang.String,org.jfree.chart.axis.TickUnitSource)>";
"<RectangleConstraint: void <init>(org.jfree.data.Range,double)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<time.Quarter: org.jfree.data.time.Quarter parseQuarter(java.lang.String)>" -> "<org.jfree.data.time.TimePeriodFormatException: void <init>(java.lang.String)>";
"<AbstractBlock: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>()>";
"<StackedXYAreaRenderer2: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<plot.dial.ArcDialFrame: void setForegroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<plot.XYPlot: void mapDatasetToDomainAxis(int,int)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<block.CenterArrangement: org.jfree.chart.util.Size2D arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<statistics.Statistics: double calculateMedian(java.util.List,int,int,boolean)>" -> "<org.jfree.data.statistics.Statistics: double calculateMedian(java.util.List,boolean)>";
"<dial.DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<editor.DefaultNumberAxisEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: void actionPerformed(java.awt.event.ActionEvent)>";
"<block.LabelBlock: void <init>(java.lang.String,java.awt.Font)>" -> "<org.jfree.chart.block.LabelBlock: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<dial.DialCap: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<StandardDialFrame: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<labels.BoxAndWhiskerToolTipGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: boolean equals(java.lang.Object)>";
"<axis.PeriodAxis: void setAutoRangeTimePeriodClass(java.lang.Class)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<renderer.category.WaterfallBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean equals(java.lang.Object)>";
"<xy.YIntervalSeries: void add(double,double,double,double)>" -> "<org.jfree.data.xy.YIntervalDataItem: void <init>(double,double,double,double)>";
"<ImageTitle: void <init>(java.awt.Image,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)>" -> "<org.jfree.chart.title.ImageTitle: void <init>(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<annotations.XYShapeAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<annotations.XYShapeAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.xy.XYDotRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<block.LabelBlock: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<TimeSeriesChartDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart)>";
"<DialCap: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<block.RectangleConstraint: org.jfree.chart.block.RectangleConstraint toRangeWidth(org.jfree.data.Range)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<DefaultDrawingSupplier: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<renderer.category.LineRenderer3D: void setWallPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<urls.StandardXYURLGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.xy.CandlestickRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<TimePeriodValuesCollection: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<MinMaxCategoryRenderer: void setObjectIcon(javax.swing.Icon)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<RectangleEdge: void <clinit>()>" -> "<org.jfree.chart.util.RectangleEdge: void <init>(java.lang.String)>";
"<RelativeDateFormat: void <init>(java.util.Date)>" -> "<org.jfree.chart.util.RelativeDateFormat: void <init>(long)>";
"<axis.PeriodAxis: void <init>(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)>" -> "<org.jfree.chart.axis.PeriodAxis: void <init>(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>";
"<xy.XYBarRenderer: void setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.CyclicXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>";
"<PlumNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<plot.dial.AbstractDialLayer: void addChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Class class$(java.lang.String)>";
"<AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<plot.CombinedRangeXYPlot: void <init>()>" -> "<org.jfree.chart.plot.CombinedRangeXYPlot: void <init>(org.jfree.chart.axis.ValueAxis)>";
"<DynamicTimeSeriesCollection: void findDomainLimits()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<category.LineAndShapeRenderer: void setBaseLinesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<RelativeDateFormat: void <init>()>" -> "<org.jfree.chart.util.RelativeDateFormat: void <init>(long)>";
"<plot.RingPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<category.AbstractCategoryItemRenderer: void setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.MeterInterval: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<xy.DefaultTableXYDataset: void <init>(boolean)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<ScatterRenderer: void setUseOutlinePaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<VectorRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<plot.MeterPlot: void drawTick(java.awt.Graphics2D,java.awt.geom.Rectangle2D,double,boolean)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<PiePlot3D: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.entity.PieSectionEntity: void <init>(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)>";
"<plot.dial.DialValueIndicator: void <init>()>" -> "<org.jfree.chart.plot.dial.DialValueIndicator: void <init>(int)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: org.jfree.chart.labels.StandardXYToolTipGenerator getTimeSeriesInstance()>";
"<title.CompositeTitle: void <init>()>" -> "<org.jfree.chart.title.CompositeTitle: void <init>(org.jfree.chart.block.BlockContainer)>";
"<plot.CombinedDomainXYPlot: void <init>()>" -> "<org.jfree.chart.plot.CombinedDomainXYPlot: void <init>(org.jfree.chart.axis.ValueAxis)>";
"<PaintScaleLegend: void setStripWidth(double)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<axis.DateAxis: void zoomRange(double,double)>" -> "<org.jfree.data.time.DateRange: void <init>(double,double)>";
"<CombinedDataset: int getChildPosition(org.jfree.data.general.Dataset)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<PolarPlot: void drawCornerTextItems(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<XYAreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<renderer.xy.XYStepAreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYStepAreaRenderer: void <init>(int)>";
"<StrokeList: void <init>()>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>()>";
"<axis.NumberAxis: void setRangeType(org.jfree.data.RangeType)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<time.Minute: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Minute: void <init>(java.util.Date,java.util.TimeZone)>";
"<plot.dial.AbstractDialLayer: void setVisible(boolean)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<annotations.XYPointerAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<ChartUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)>" -> "<org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator: void <init>()>";
"<util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.geom.GeneralPath,java.awt.geom.GeneralPath)>";
"<block.LabelBlock: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<ChartChangeEvent: void <init>(java.lang.Object)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)>";
"<KeyedObject: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<io.CSV: org.jfree.data.category.CategoryDataset readCategoryDataset(java.io.Reader)>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<dial.DialValueIndicator: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<renderer.AbstractRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.PolarPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<labels.IntervalCategoryToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<axis.PeriodAxis: void setMinorTickMarksVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<AbstractObjectList: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,int)>";
"<ChartEntity: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.String)>";
"<AbstractCategoryItemRenderer: void setLegendItemURLGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.MiddlePinNeedle: void <init>()>";
"<SpiderWebPlot: void drawRadarPoly(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotRenderingInfo,int,int,double,double)>" -> "<org.jfree.chart.entity.CategoryItemEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)>";
"<plot.dial.StandardDialScale: void setExtent(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<dial.DialPointer: void setDatasetIndex(int)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<NumberAxis: org.jfree.chart.axis.TickUnitSource createIntegerTickUnits()>" -> "<org.jfree.chart.axis.TickUnits: void <init>()>";
"<axis.SegmentedTimeline: void addException(long)>" -> "<org.jfree.chart.axis.SegmentedTimeline$Segment: void <init>(org.jfree.chart.axis.SegmentedTimeline,long)>";
"<ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>" -> "<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>";
"<time.SerialDate: org.jfree.data.time.SerialDate addMonths(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: int lastDayOfMonth(int,int)>";
"<ArcDialFrame: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<renderer.xy.XYErrorRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<DateAxis: org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits(java.util.TimeZone)>" -> "<org.jfree.chart.axis.TickUnits: void <init>()>";
"<GridArrangement: org.jfree.chart.util.Size2D arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,double)>";
"<ValueAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<ScatterRenderer: void setItemMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<dial.DialBackground: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<block.RectangleConstraint: void <init>(double,double)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<axis.ValueAxis: void centerRange(double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<JDBCCategoryDataset: void executeQuery(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCCategoryDataset: int getRowCount()>";
"<ColorBlock: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<CategoryAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<renderer.category.StackedBarRenderer3D: void <init>(boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: void <init>()>";
"<gantt.Task: void <init>(java.lang.String,java.util.Date,java.util.Date)>" -> "<org.jfree.data.time.SimpleTimePeriod: void <init>(java.util.Date,java.util.Date)>";
"<AbstractCategoryItemRenderer: java.awt.geom.Point2D calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<xy.XYSeriesCollection: void <init>(org.jfree.data.xy.XYSeries)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<BarRenderer3D: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>";
"<TimePeriodValues: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<StandardCategoryURLGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<dial.DialTextAnnotation: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYSplineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<LookupPaintScale: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<dial.StandardDialRange: void setBounds(double,double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<axis.DateTick: void <init>(java.util.Date,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>" -> "<org.jfree.chart.axis.ValueTick: void <init>(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<PeriodAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<HighLowItemLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.HighLowItemLabelGenerator: void <init>(java.text.DateFormat,java.text.NumberFormat)>";
"<TaskSeriesCollection: void seriesChanged(org.jfree.data.general.SeriesChangeEvent)>" -> "<org.jfree.data.gantt.TaskSeriesCollection: void refreshKeys()>";
"<LegendGraphic: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<category.WaterfallBarRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<FlowArrangement: org.jfree.chart.util.Size2D arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.geom.Ellipse2D,java.awt.geom.Ellipse2D)>";
"<ChartFactory: org.jfree.chart.JFreeChart createScatterPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<renderer.category.DefaultCategoryItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void <init>()>";
"<DefaultStatisticalCategoryDataset: void removeRow(int)>" -> "<org.jfree.data.statistics.DefaultStatisticalCategoryDataset: void updateBounds()>";
"<ChartFactory: org.jfree.chart.JFreeChart createBubbleChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYZDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<JDBCCategoryDataset: void executeQuery(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCCategoryDataset: void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>";
"<plot.dial.DialCap: void setOutlinePaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<dial.DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<renderer.xy.StackedXYBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.data.general.DatasetUtilities: double calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)>";
"<title.Title: java.lang.Object clone()>" -> "<org.jfree.chart.block.AbstractBlock: java.lang.Object clone()>";
"<statistics.SimpleHistogramDataset: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<time.Year: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Year: void <init>(int)>";
"<annotations.XYBoxAnnotation: void <init>(double,double,double,double,java.awt.Stroke,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
"<block.CenterArrangement: org.jfree.chart.util.Size2D arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<MeterInterval: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.MatrixSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.MatrixSeriesCollection: void <init>(org.jfree.data.xy.MatrixSeries)>";
"<ModuloAxis: double transEnd(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<plot.Plot: void drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)>";
"<axis.Axis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<PeriodAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<xy.XYErrorRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<BarChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart,boolean)>";
"<category.ScatterRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<util.StrokeList: void <init>()>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>()>";
"<DateAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.DateAxis: java.util.Date calculateDateForPosition(org.jfree.data.time.RegularTimePeriod,org.jfree.chart.axis.DateTickMarkPosition)>";
"<XYStepAreaRenderer: void setPlotArea(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.XYDifferenceRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<PiePlot: void drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.G2TextMeasurer: void <init>(java.awt.Graphics2D)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.PiePlot3D: void <init>(org.jfree.data.general.PieDataset)>";
"<xy.WindItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<ui.BasicProjectInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.ui.BasicProjectInfo: void <init>()>";
"<renderer.category.StatisticalLineAndShapeRenderer: void setErrorIndicatorPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.category.StatisticalLineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void <init>(boolean,boolean)>";
"<TimeSeriesCollection: void setXPosition(org.jfree.data.time.TimePeriodAnchor)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<XYTitleAnnotationDemo1: void main(java.lang.String[])>" -> "<org.jfree.chart.util.RefineryUtilities: void centerFrameOnScreen(java.awt.Window)>";
"<SegmentedTimeline: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.SegmentedTimeline: boolean equals(java.lang.Object,java.lang.Object)>";
"<plot.DefaultDrawingSupplier: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<category.ScatterRenderer: void setSeriesShapesFilled(int,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.category.LineAndShapeRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<JFreeChart: void addProgressListener(org.jfree.chart.event.ChartProgressListener)>" -> "<org.jfree.chart.JFreeChart: java.lang.Class class$(java.lang.String)>";
"<DatasetUtilities: org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double[][])>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<axis.CategoryAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.Axis: boolean equals(java.lang.Object)>";
"<plot.CombinedRangeCategoryPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<TextTitle: void <init>(java.lang.String,java.awt.Font)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<CombinedDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<renderer.xy.XYErrorRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>";
"<PieDatasetHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>" -> "<org.jfree.data.xml.ItemHandler: void <init>(org.jfree.data.xml.RootHandler,org.xml.sax.helpers.DefaultHandler)>";
"<BarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<xy.DefaultXYZDataset: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractXYZDataset: java.lang.Object clone()>";
"<xml.DatasetReader: org.jfree.data.general.PieDataset readPieDatasetFromXML(java.io.InputStream)>" -> "<org.jfree.data.xml.PieDatasetHandler: org.jfree.data.general.PieDataset getDataset()>";
"<XYShapeAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<ChartFactory: org.jfree.chart.JFreeChart createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>(java.util.Locale)>";
"<editor.DefaultTitleEditor: void <init>(org.jfree.chart.title.Title)>" -> "<org.jfree.chart.ui.FontDisplayField: void <init>(java.awt.Font)>";
"<CyclicNumberAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<Marker: void setAlpha(float)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<TimeSeriesChartDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.chart.demo.TimeSeriesChartDemo1: org.jfree.data.xy.XYDataset createDataset()>";
"<axis.ValueAxis: void setLowerBound(double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<axis.AxisState: void <init>()>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<renderer.xy.XYBlockRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<axis.ExtendedCategoryAxis: org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)>" -> "<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)>";
"<LogAxis: java.util.List refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<labels.BubbleXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<plot.dial.DialValueIndicator: void setDatasetIndex(int)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<plot.XYPlot: org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int)>" -> "<org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>";
"<AbstractCategoryItemLabelGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<plot.dial.StandardDialScale: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<AbstractCategoryItemLabelGenerator: java.lang.Object[] createItemArray(org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.data.DataUtilities: double calculateColumnTotal(org.jfree.data.Values2D,int)>";
"<time.Hour: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<time.TimePeriodValuesCollection: void <init>()>" -> "<org.jfree.data.time.TimePeriodValuesCollection: void <init>(org.jfree.data.time.TimePeriodValues)>";
"<StandardXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<ChartFactory: org.jfree.chart.JFreeChart createMultiplePieChart(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>()>";
"<MinMaxCategoryRenderer: void setGroupPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<general.CombinedDataset: java.lang.Number getClose(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<CategoryLineAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions replaceBottomPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)>" -> "<org.jfree.chart.axis.CategoryLabelPositions: void <init>(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)>";
"<WaferMapRenderer: java.awt.Paint getChipColor(java.lang.Number)>" -> "<org.jfree.chart.renderer.WaferMapRenderer: int getPaintIndex(java.lang.Number)>";
"<annotations.XYImageAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<renderer.xy.XYLineAndShapeRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<axis.DateAxis: void setRange(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.data.time.DateRange: void <init>(org.jfree.data.Range)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<renderer.xy.XYAreaRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<XYStepAreaRenderer: void setOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<StandardXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.DateFormat)>";
"<PieChartDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.chart.demo.PieChartDemo1: org.jfree.data.general.PieDataset createDataset()>";
"<servlet.ServletUtilities: java.lang.String saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.servlet.ServletUtilities: java.lang.String saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>";
"<XYAreaRenderer2: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<PolarPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<editor.DefaultChartEditor: void <init>(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.editor.DefaultPlotEditor: void <init>(org.jfree.chart.plot.Plot)>";
"<PlotOrientation: void <clinit>()>" -> "<org.jfree.chart.plot.PlotOrientation: void <init>(java.lang.String)>";
"<DefaultIntervalCategoryDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<plot.CombinedRangeXYPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotRenderingInfo: void <init>(org.jfree.chart.ChartRenderingInfo)>";
"<xy.XYLineAndShapeRenderer: void setDrawSeriesLineAsPath(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<SegmentedTimeline: void addException(long,long)>" -> "<org.jfree.chart.axis.SegmentedTimeline: void addException(org.jfree.chart.axis.SegmentedTimeline$Segment)>";
"<block.AbstractBlock: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<TextBlock: void addLine(java.lang.String,java.awt.Font,java.awt.Paint)>" -> "<org.jfree.chart.text.TextLine: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<plot.RingPlot: void drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<MinMaxCategoryRenderer: void setMaxIcon(javax.swing.Icon)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<text.TextBox: void <init>(java.lang.String)>" -> "<org.jfree.chart.text.TextBox: void <init>(org.jfree.chart.text.TextBlock)>";
"<time.TimePeriodValues: boolean equals(java.lang.Object)>" -> "<org.jfree.data.general.Series: boolean equals(java.lang.Object)>";
"<StandardXYURLGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<BarChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.demo.BarChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.category.CategoryDataset)>";
"<xy.XYStepAreaRenderer: void setOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.category.BarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<CyclicNumberAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<ImageTitle: void <init>(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.title.Title: void <init>(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<axis.CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<axis.LogAxis: void selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<xy.XYBlockRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<TextLine: void <init>(java.lang.String)>" -> "<org.jfree.chart.text.TextLine: void <init>(java.lang.String,java.awt.Font)>";
"<plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>()>";
"<statistics.DefaultBoxAndWhiskerCategoryDataset: void clear()>" -> "<org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset: void updateBounds()>";
"<ChartFactory: org.jfree.chart.JFreeChart createMultiplePieChart3D(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.PiePlot3D: void <init>(org.jfree.data.general.PieDataset)>";
"<XYPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>";
"<urls.StandardXYURLGenerator: void <init>()>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>(java.lang.String,java.lang.String,java.lang.String)>";
"<Hour: org.jfree.data.time.Hour parseHour(java.lang.String)>" -> "<org.jfree.data.time.Day: org.jfree.data.time.Day parseDay(java.lang.String)>";
"<general.Series: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.WaferMapRenderer: void <init>()>" -> "<org.jfree.chart.renderer.WaferMapRenderer: void <init>(java.lang.Integer,java.lang.Integer)>";
"<renderer.AbstractRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<plot.MultiplePiePlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.MultiplePiePlot: void prefetchSectionPaints()>";
"<renderer.xy.XYBarRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<CyclicNumberAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<XYBlockRenderer: void setBlockHeight(double)>" -> "<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>";
"<Year: org.jfree.data.time.Year parseYear(java.lang.String)>" -> "<org.jfree.data.time.Year: void <init>(int)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<renderer.xy.XYAreaRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<title.Title: void setVerticalAlignment(org.jfree.chart.util.VerticalAlignment)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<StandardDialFrame: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<statistics.Statistics: double calculateMean(java.lang.Number[])>" -> "<org.jfree.data.statistics.Statistics: double calculateMean(java.lang.Number[],boolean)>";
"<xy.IntervalXYDelegate: void setAutoWidth(boolean)>" -> "<org.jfree.data.xy.IntervalXYDelegate: double recalculateInterval()>";
"<xy.XYDotRenderer: void setLegendShape(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>()>";
"<renderer.category.GanttRenderer: void setStartPercent(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<AbstractBlock: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<ThermometerPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<BarRenderer3D: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<plot.XYPlot: boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>";
"<renderer.xy.XYLineAndShapeRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<CombinedDomainXYPlot: void <init>()>" -> "<org.jfree.chart.plot.CombinedDomainXYPlot: void <init>(org.jfree.chart.axis.ValueAxis)>";
"<block.AbstractBlock: void setPadding(double,double,double,double)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<general.DefaultKeyedValueDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<PeriodAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<time.TimeSeries: org.jfree.data.time.TimeSeries createCopy(int,int)>" -> "<org.jfree.data.general.Series: java.lang.Object clone()>";
"<Marker: void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)>" -> "<org.jfree.chart.plot.Marker: java.lang.Class class$(java.lang.String)>";
"<RectangleAnchor: void <clinit>()>" -> "<org.jfree.chart.util.RectangleAnchor: void <init>(java.lang.String)>";
"<category.MinMaxCategoryRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,boolean,boolean)>";
"<ValueAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<plot.SpiderWebPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<ArcDialFrame: void <init>()>" -> "<org.jfree.chart.plot.dial.ArcDialFrame: void <init>(double,double)>";
"<Plot: void <init>()>" -> "<org.jfree.chart.plot.DefaultDrawingSupplier: void <init>()>";
"<CompositeTitle: void <init>()>" -> "<org.jfree.chart.block.BorderArrangement: void <init>()>";
"<plot.CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.plot.Plot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>";
"<xy.AbstractXYZDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<labels.StandardPieSectionLabelGenerator: void <init>(java.lang.String)>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<FastScatterPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<ObjectList: java.lang.Object get(int)>" -> "<org.jfree.chart.util.AbstractObjectList: java.lang.Object get(int)>";
"<AbstractCategoryItemRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<plot.CombinedRangeCategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<labels.StandardPieSectionLabelGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.AbstractPieItemLabelGenerator: boolean equals(java.lang.Object)>";
"<axis.SubCategoryAxis: double getMaxDim(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<TextLine: void draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)>" -> "<org.jfree.chart.text.TextLine: float calculateBaselineOffset(java.awt.Graphics2D,org.jfree.chart.text.TextAnchor)>";
"<xy.XYErrorRenderer: void setDrawXError(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.category.LevelRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>";
"<category.ScatterRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<axis.CategoryAxis3D: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<plot.PlotUtilities: boolean isEmptyOrNull(org.jfree.chart.plot.XYPlot)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.xy.XYDataset)>";
"<annotations.XYPointerAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.XYTextAnnotation: boolean equals(java.lang.Object)>";
"<CategoryPointerAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<labels.SymbolicXYItemLabelGenerator: java.lang.String generateToolTip(org.jfree.data.xy.XYDataset,int,int)>" -> "<org.jfree.chart.labels.SymbolicXYItemLabelGenerator: double round(double,int)>";
"<CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.PinNeedle: void <init>()>";
"<title.TextTitle: void setExpandToFitSpace(boolean)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<LabelBlock: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<xy.XYAreaRenderer2: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<axis.ModuloAxis: void <init>(java.lang.String,org.jfree.data.Range)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<xy.XYSplineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<renderer.AbstractRenderer: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.awt.Paint)>";
"<plot.CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.PlumNeedle: void <init>()>";
"<axis.ValueAxis: void setRangeWithMargins(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<xy.IntervalXYDelegate: void <init>(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.xy.IntervalXYDelegate: void <init>(org.jfree.data.xy.XYDataset,boolean)>";
"<StandardXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<DefaultCategoryItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void <init>()>";
"<ValueAxis: void setInverted(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<XYStepAreaRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>";
"<plot.Marker: void setLabelOffsetType(org.jfree.chart.util.LengthAdjustmentType)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<Statistics: double[] getLinearFit(java.lang.Number[],java.lang.Number[])>" -> "<org.jfree.data.statistics.Statistics: double getSlope(java.lang.Number[],java.lang.Number[])>";
"<SpiderWebPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<plot.dial.StandardDialScale: void setMajorTickIncrement(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<plot.CombinedRangeCategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleEdge: double coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>";
"<plot.dial.DialPointer: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<DialPointer: void <init>()>" -> "<org.jfree.chart.plot.dial.DialPointer: void <init>(int)>";
"<SymbolAxis: java.util.List refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<TextTitle: void <init>(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.title.Title: void <init>(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<FontDisplayField: void setDisplayFont(java.awt.Font)>" -> "<org.jfree.chart.ui.FontDisplayField: java.lang.String fontToString(java.awt.Font)>";
"<renderer.category.StackedAreaRenderer: double getPreviousHeight(org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.data.DataUtilities: double calculateColumnTotal(org.jfree.data.Values2D,int)>";
"<Axis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.Marker: void setLabelFont(java.awt.Font)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<RingPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<category.GroupedStackedBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer: boolean equals(java.lang.Object)>";
"<ComparableObjectSeries: boolean equals(java.lang.Object)>" -> "<org.jfree.data.general.Series: boolean equals(java.lang.Object)>";
"<category.StatisticalBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<labels.MultipleXYSeriesLabelGenerator: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.String)>";
"<demo.TimeSeriesChartDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.chart.demo.TimeSeriesChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.xy.XYDataset)>";
"<renderer.LookupPaintScale: void <init>()>" -> "<org.jfree.chart.renderer.LookupPaintScale: void <init>(double,double,java.awt.Paint)>";
"<XYPointerAnnotation: int hashCode()>" -> "<org.jfree.chart.annotations.XYTextAnnotation: int hashCode()>";
"<XYAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<renderer.category.WaterfallBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<renderer.AbstractRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer$State: int access$000(org.jfree.chart.renderer.xy.StandardXYItemRenderer$State)>";
"<LegendGraphic: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<CandlestickRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<block.RectangleConstraint: org.jfree.chart.block.RectangleConstraint toRangeHeight(org.jfree.data.Range)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<plot.PiePlotState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.RendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<ChartFactory: org.jfree.chart.JFreeChart createHistogram(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<plot.RingPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.PiePlot: boolean equals(java.lang.Object)>";
"<annotations.XYShapeAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<DefaultPlotEditor: void <init>(org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.ui.StrokeSample: void <init>(java.awt.Stroke)>";
"<CombinedDomainXYPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<renderer.xy.XYLineAndShapeRenderer: void setBaseShapesFilled(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.PolarPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>";
"<dial.DialValueIndicator: void <init>(int)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<dial.StandardDialFrame: void setForegroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<Minute: void <init>()>" -> "<org.jfree.data.time.Minute: void <init>(java.util.Date)>";
"<title.LegendItemBlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.block.BlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>";
"<title.PaintScaleLegend: void setStripWidth(double)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<plot.CombinedRangeCategoryPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<plot.MultiplePiePlot: void <init>(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<renderer.xy.XYDifferenceRenderer: void setNegativePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.dial.DialValueIndicator: void setFont(java.awt.Font)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<plot.CategoryPlot: boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>";
"<XYBubbleRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<category.BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.OutlierListCollection: void <init>()>";
"<CategoryAxis3D: java.lang.Object clone()>" -> "<org.jfree.chart.axis.CategoryAxis: java.lang.Object clone()>";
"<jdbc.JDBCCategoryDataset: void <init>(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCCategoryDataset: void <init>(java.sql.Connection)>";
"<axis.NumberAxis: void selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<category.AbstractCategoryItemRenderer: void setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<needle.MeterNeedle: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<text.TextBlock: void draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)>" -> "<org.jfree.chart.text.TextBlock: float[] calculateOffsets(org.jfree.chart.text.TextBlockAnchor,double,double)>";
"<dial.StandardDialFrame: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<dial.AbstractDialLayer: void addChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Class class$(java.lang.String)>";
"<axis.PeriodAxis: void <init>(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>" -> "<org.jfree.chart.axis.ValueAxis: void <init>(java.lang.String,org.jfree.chart.axis.TickUnitSource)>";
"<renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<Axis: void setVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<WaterfallBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<time.TimeSeries: org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>" -> "<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>";
"<util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.lang.Class class$(java.lang.String)>";
"<axis.DateAxis: void setTimeline(org.jfree.chart.axis.Timeline)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<DefaultTitleEditor: void attemptFontSelection()>" -> "<org.jfree.chart.ui.FontChooserPanel: void <init>(java.awt.Font)>";
"<general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>";
"<MonthDateFormat: void main(java.lang.String[])>" -> "<org.jfree.data.time.Month: void <init>(int,int)>";
"<editor.DefaultPlotEditor: void <init>(org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.ui.LCBLayout: void <init>(int)>";
"<PieChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.demo.PieChartDemo1: javax.swing.JPanel createDemoPanel()>";
"<plot.SpiderWebPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<PiePlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<needle.LineNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<category.MinMaxCategoryRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<axis.SymbolAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>";
"<Quarter: org.jfree.data.time.Quarter parseQuarter(java.lang.String)>" -> "<org.jfree.data.time.Year: org.jfree.data.time.Year parseYear(java.lang.String)>";
"<DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<renderer.AbstractRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<xy.StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: boolean isPointInRect(java.awt.geom.Rectangle2D,double,double)>";
"<plot.CombinedRangeXYPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleEdge: double coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>";
"<dial.StandardDialScale: void setTickLabelPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<CombinedRangeCategoryPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<annotations.XYLineAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<LegendGraphic: void <init>(java.awt.Shape,java.awt.Paint)>" -> "<org.jfree.chart.block.AbstractBlock: void <init>()>";
"<LineAndShapeRenderer: void setSeriesShapesVisible(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.SymbolAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<axis.Axis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<plot.XYPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<util.SerialUtilities: boolean isSerializable(java.lang.Class)>" -> "<org.jfree.chart.util.SerialUtilities: java.lang.Class class$(java.lang.String)>";
"<Task: void <init>(java.lang.String,java.util.Date,java.util.Date)>" -> "<org.jfree.data.gantt.Task: void <init>(java.lang.String,org.jfree.data.time.TimePeriod)>";
"<axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions replaceTopPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)>" -> "<org.jfree.chart.axis.CategoryLabelPositions: void <init>(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)>";
"<xy.VectorSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractXYDataset: java.lang.Object clone()>";
"<DialTextAnnotation: void <init>(java.lang.String)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<JFreeChart: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<axis.SymbolAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<ComparableObjectSeries: int hashCode()>" -> "<org.jfree.data.general.Series: int hashCode()>";
"<dial.AbstractDialLayer: void setVisible(boolean)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<Axis: void setTickMarkInsideLength(float)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<util.ObjectList: void <init>()>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>()>";
"<CyclicNumberAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<TextBox: void <init>(java.lang.String)>" -> "<org.jfree.chart.text.TextBlock: void <init>()>";
"<dial.StandardDialScale: void setMinorTickLength(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<StandardDialScale: void setMajorTickStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYLineAnnotation: void <init>(double,double,double,double)>" -> "<org.jfree.chart.annotations.XYLineAnnotation: void <init>(double,double,double,double,java.awt.Stroke,java.awt.Paint)>";
"<general.CombinedDataset: java.lang.Comparable getSeriesKey(int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<renderer.category.AbstractCategoryItemRenderer: int hashCode()>" -> "<org.jfree.chart.renderer.AbstractRenderer: int hashCode()>";
"<dial.DialValueIndicator: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.CategoryPlot: void handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<MonthDateFormat: void <init>(java.util.Locale,int)>" -> "<org.jfree.chart.axis.MonthDateFormat: void <init>(java.util.TimeZone,java.util.Locale,int,boolean,boolean)>";
"<IntervalXYDelegate: void setAutoWidth(boolean)>" -> "<org.jfree.data.xy.IntervalXYDelegate: double recalculateInterval()>";
"<StandardTickUnitSource: org.jfree.chart.axis.TickUnit getCeilingTickUnit(double)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<StandardDialScale: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<XYTitleAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<BorderArrangement: org.jfree.chart.util.Size2D arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,double)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,double)>";
"<servlet.DisplayChart: void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>" -> "<org.jfree.chart.servlet.ServletUtilities: java.lang.String searchReplace(java.lang.String,java.lang.String,java.lang.String)>";
"<ValueMarker: void <init>(double)>" -> "<org.jfree.chart.plot.Marker: void <init>()>";
"<encoders.EncoderUtil: void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float,boolean)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,float,boolean)>";
"<plot.dial.DialTextAnnotation: void <init>(java.lang.String)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<axis.ValueAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisState: void <init>()>";
"<dial.DialBackground: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<TimeSeriesChartDemo1: org.jfree.data.xy.XYDataset createDataset()>" -> "<org.jfree.data.time.Month: void <init>(int,int)>";
"<general.AbstractSeriesDataset: void <init>()>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<title.LegendTitle: void setLegendItemGraphicPadding(org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<category.BarRenderer3D: void <init>(double,double)>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)>";
"<plot.dial.StandardDialFrame: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<block.LineBorder: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<plot.dial.DialBackground: void <init>()>" -> "<org.jfree.chart.plot.dial.DialBackground: void <init>(java.awt.Paint)>";
"<SerialDate: org.jfree.data.time.SerialDate getEndOfCurrentMonth(org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int,int,int)>";
"<CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<CombinedDomainXYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.XYPlot: java.lang.Object clone()>";
"<DialValueIndicator: void setNumberFormat(java.text.NumberFormat)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<dial.StandardDialFrame: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<MeterInterval: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>()>";
"<ArcDialFrame: void setInnerRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<plot.dial.DialCap: void setOutlineStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<category.StatisticalBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean equals(java.lang.Object)>";
"<PeriodAxis: void setTimeZone(java.util.TimeZone)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<XYDataItem: void <init>(double,double)>" -> "<org.jfree.data.xy.XYDataItem: void <init>(java.lang.Number,java.lang.Number)>";
"<dial.ArcDialFrame: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<StackedBarRenderer: void setRenderAsPercentages(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.PolarPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.TickUnit: boolean equals(java.lang.Object)>";
"<renderer.category.StackedBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer: void <init>(boolean)>";
"<XYShapeAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<RectangleConstraint: void <clinit>()>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<xy.YIntervalSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<needle.ShipNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<general.DefaultKeyedValueDataset: void <init>(org.jfree.data.KeyedValue)>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<axis.MarkerAxisBand: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<axis.ValueAxis: void setRangeWithMargins(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range,boolean,boolean)>";
"<XYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.axis.ValueAxis: java.lang.Object clone()>";
"<DefaultIntervalCategoryDataset: java.lang.Object clone()>" -> "<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] clone(java.lang.Number[][])>";
"<title.LegendTitle: void <init>(org.jfree.chart.LegendItemSource)>" -> "<org.jfree.chart.block.ColumnArrangement: void <init>()>";
"<RingPlot: void <init>()>" -> "<org.jfree.chart.plot.RingPlot: void <init>(org.jfree.data.general.PieDataset)>";
"<category.AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<FastScatterPlot: void <init>()>" -> "<org.jfree.chart.plot.FastScatterPlot: void <init>(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)>";
"<xy.YIntervalSeries: void <init>(java.lang.Comparable,boolean,boolean)>" -> "<org.jfree.data.ComparableObjectSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<LineBorder: void <init>()>" -> "<org.jfree.chart.block.LineBorder: void <init>(java.awt.Paint,java.awt.Stroke,org.jfree.chart.util.RectangleInsets)>";
"<xy.XYDifferenceRenderer: void setShapesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<time.TimeSeries: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<statistics.SimpleHistogramDataset: void clearObservations()>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<LineAndShapeRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void <init>(boolean,boolean)>";
"<PiePlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<CombinedRangeXYPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<editor.DefaultAxisEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: void attemptModifyLabelPaint()>";
"<PieChartDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.chart.demo.PieChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.general.PieDataset)>";
"<editor.DefaultPlotEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultPlotEditor: void attemptDrawShapesSelection()>";
"<ModuloAxis: double trans(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<XYDrawableAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<TimePeriodValues: void recalculateBounds()>" -> "<org.jfree.data.time.TimePeriodValues: void updateBounds(org.jfree.data.time.TimePeriod,int)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWindPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.WindDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.WindItemRenderer: void <init>()>";
"<ValueAxis: void setUpperBound(double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<CombinedDataset: java.lang.Number getEndY(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<XYPointerAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<StackedXYAreaRenderer2: void <init>()>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<WaferMapPlot: void <init>()>" -> "<org.jfree.chart.plot.WaferMapPlot: void <init>(org.jfree.data.general.WaferMapDataset)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>()>";
"<renderer.xy.XYAreaRenderer2: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>()>";
"<renderer.category.LineAndShapeRenderer: void setDrawOutlines(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<XYSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<plot.RingPlot: void drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)>" -> "<org.jfree.chart.plot.RingPlot: java.awt.geom.Line2D extendLine(java.awt.geom.Line2D,double,double)>";
"<TimeSeries: org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>" -> "<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>";
"<XYAreaRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<ChartUtilities: void writeChartAsJPEG(java.io.OutputStream,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.encoders.EncoderUtil: void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float)>";
"<SubCategoryAxis: void addSubCategory(java.lang.Comparable)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<urls.StandardCategoryURLGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.xy.XYLineAndShapeRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<plot.IntervalMarker: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Marker: boolean equals(java.lang.Object)>";
"<time.Week: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Week: void <init>(java.util.Date,java.util.TimeZone,java.util.Locale)>";
"<entity.AxisLabelEntity: void <init>(org.jfree.chart.axis.Axis,java.awt.Shape,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<DefaultTitleEditor: void <init>(org.jfree.chart.title.Title)>" -> "<org.jfree.chart.ui.LCBLayout: void <init>(int)>";
"<category.StackedAreaRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset)>";
"<xy.ClusteredXYBarRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: java.lang.Object clone()>";
"<LogAxis: void setBase(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<util.ShapeList: void <init>()>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>()>";
"<DialBackground: void setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<time.ohlc.OHLCSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.ComparableObjectSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<renderer.category.StackedAreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.StackedAreaRenderer: void <init>(boolean)>";
"<BoxAndWhiskerRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<statistics.HistogramDataset: java.lang.Number getY(int,int)>" -> "<org.jfree.data.statistics.HistogramDataset: double getBinWidth(int)>";
"<ShipNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<editor.DefaultNumberAxisEditor: void setAxisProperties(org.jfree.chart.axis.Axis)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: void setAxisProperties(org.jfree.chart.axis.Axis)>";
"<xy.StackedXYBarRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer$XYBarRendererState: void <init>(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)>";
"<StackedXYBarRenderer: void <init>(double)>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)>";
"<block.LineBorder: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.CyclicXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>";
"<labels.AbstractXYItemLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<TimePeriodValues: void add(org.jfree.data.time.TimePeriod,java.lang.Number)>" -> "<org.jfree.data.time.TimePeriodValue: void <init>(org.jfree.data.time.TimePeriod,java.lang.Number)>";
"<axis.LogAxis: void autoAdjustRange()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<NumberAxis: void setMarkerBand(org.jfree.chart.axis.MarkerAxisBand)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<TextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<YIntervalSeries: void <init>(java.lang.Comparable,boolean,boolean)>" -> "<org.jfree.data.ComparableObjectSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<renderer.category.BarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer: java.awt.geom.Point2D calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)>";
"<CombinedDomainXYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<Second: void <init>(int,int,int,int,int,int)>" -> "<org.jfree.data.time.Minute: void <init>(int,int,int,int,int)>";
"<labels.StandardCategoryItemLabelGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: boolean equals(java.lang.Object)>";
"<category.AbstractCategoryItemRenderer: boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<statistics.DefaultMultiValueCategoryDataset: void <init>()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<ArcDialFrame: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<category.MinMaxCategoryRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<xy.XYLineAndShapeRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<general.CombinedDataset: int getChildPosition(org.jfree.data.general.Dataset)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<renderer.xy.XYSplineAndShapeRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>";
"<GanttRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<axis.PeriodAxis: void <init>(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>" -> "<org.jfree.chart.axis.PeriodAxisLabelInfo: void <init>(java.lang.Class,java.text.DateFormat)>";
"<DateAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<CombinedDataset: java.lang.Number getEndX(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<RingPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<CategoryStepRenderer: void setStagger(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<StandardDialScale: void setMajorTickPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<renderer.DefaultPolarItemRenderer: org.jfree.chart.LegendItem getLegendItem(int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<time.DynamicTimeSeriesCollection: void <init>(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<dial.ArcDialFrame: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<statistics.DefaultStatisticalCategoryDataset: void <init>()>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<time.TimePeriodValue: void <init>(org.jfree.data.time.TimePeriod,double)>" -> "<org.jfree.data.time.TimePeriodValue: void <init>(org.jfree.data.time.TimePeriod,java.lang.Number)>";
"<SpreadsheetDate: void <init>(int,int,int)>" -> "<org.jfree.data.time.SerialDate: void <init>()>";
"<RingPlot: void drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)>" -> "<org.jfree.chart.entity.PieSectionEntity: void <init>(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)>";
"<category.BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawLowFarOut(double,java.awt.Graphics2D,double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>()>";
"<SubCategoryAxis: double getMaxDim(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<category.CategoryStepRenderer: void <init>(boolean)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<Month: void <init>(int,org.jfree.data.time.Year)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<labels.StandardXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>";
"<XYPointerAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<ChartPanel: void mouseMoved(java.awt.event.MouseEvent)>" -> "<org.jfree.chart.ChartMouseEvent: void <init>(org.jfree.chart.JFreeChart,java.awt.event.MouseEvent,org.jfree.chart.entity.ChartEntity)>";
"<BarRenderer3D: void setWallPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<PaintScaleLegend: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.XYIntervalDataItem: void <init>(double,double,double,double,double,double)>" -> "<org.jfree.data.xy.XYInterval: void <init>(double,double,double,double,double)>";
"<needle.MeterNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>(java.awt.Paint,java.awt.Paint,java.awt.Paint)>";
"<plot.CategoryPlot: org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int)>" -> "<org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>";
"<renderer.category.MinMaxCategoryRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<axis.CategoryAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<StandardDialFrame: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<AbstractXYItemRenderer: void drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<axis.ValueAxis: void setUpperBound(double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<title.LegendGraphic: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<xy.VectorRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<StandardCategoryItemLabelGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: boolean equals(java.lang.Object)>";
"<dial.StandardDialScale: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.XYBarDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<entity.XYItemEntity: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.entity.ChartEntity: boolean equals(java.lang.Object)>";
"<LegendItem: void <init>(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>" -> "<org.jfree.chart.LegendItem: void <init>(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<general.DatasetUtilities: org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)>" -> "<org.jfree.data.general.DatasetUtilities: double calculatePieDatasetTotal(org.jfree.data.general.PieDataset)>";
"<CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions replaceTopPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)>" -> "<org.jfree.chart.axis.CategoryLabelPositions: void <init>(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)>";
"<AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<CategorySeriesHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>" -> "<org.jfree.data.xml.ItemHandler: void <init>(org.jfree.data.xml.RootHandler,org.xml.sax.helpers.DefaultHandler)>";
"<category.StackedBarRenderer3D: void setRenderAsPercentages(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYBubbleRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<ohlc.OHLCItem: void <init>(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>" -> "<org.jfree.data.time.ohlc.OHLC: void <init>(double,double,double,double)>";
"<Millisecond: void <init>(int,int,int,int,int,int,int)>" -> "<org.jfree.data.time.Millisecond: void <init>(int,org.jfree.data.time.Second)>";
"<PeriodAxis: void setMinorTickMarkPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ColumnArrangement: org.jfree.chart.util.Size2D arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<NumberAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<category.WaterfallBarRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<DefaultKeyedValues2D: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<time.MovingAverage: org.jfree.data.time.TimeSeriesCollection createMovingAverage(org.jfree.data.time.TimeSeriesCollection,java.lang.String,int,int)>" -> "<org.jfree.data.time.TimeSeriesCollection: void <init>()>";
"<renderer.category.BarRenderer3D: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>";
"<Axis: void setTickLabelFont(java.awt.Font)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<xy.XYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<TextTitle: int hashCode()>" -> "<org.jfree.chart.title.Title: int hashCode()>";
"<block.RectangleConstraint: void <init>(org.jfree.data.Range,org.jfree.data.Range)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<LogarithmicAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<plot.ValueMarker: void <init>(double,java.awt.Paint,java.awt.Stroke)>" -> "<org.jfree.chart.plot.ValueMarker: void <init>(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<axis.DateTickUnit: void <init>(int,int,int,int,java.text.DateFormat)>" -> "<org.jfree.chart.axis.DateTickUnit: long getMillisecondCount(int,int)>";
"<XYPlot: java.util.Map drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisCollection: void <init>()>";
"<KeyedObjects: void setObject(java.lang.Comparable,java.lang.Object)>" -> "<org.jfree.data.KeyedObject: void <init>(java.lang.Comparable,java.lang.Object)>";
"<CategoryPlot: void handleClick(int,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<CategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<ChartFactory: org.jfree.chart.JFreeChart createMultiplePieChart3D(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>()>";
"<Axis: void setTickMarkOutsideLength(float)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ArcDialFrame: void <init>(double,double)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<axis.DateAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.DateTick: void <init>(java.util.Date,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<XYDotRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<dial.StandardDialRange: void setOuterRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<category.AbstractCategoryItemRenderer: int hashCode()>" -> "<org.jfree.chart.renderer.AbstractRenderer: int hashCode()>";
"<category.AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<block.EmptyBlock: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<renderer.xy.AbstractXYItemRenderer: java.awt.geom.Point2D calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<XYSeries: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<PolarChartPanel: javax.swing.JPopupMenu createPopupMenu(boolean,boolean,boolean,boolean)>" -> "<org.jfree.chart.ChartPanel: javax.swing.JPopupMenu createPopupMenu(boolean,boolean,boolean,boolean)>";
"<block.BorderArrangement: org.jfree.chart.util.Size2D arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,double)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<renderer.category.LineAndShapeRenderer: void setBaseShapesFilled(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardCategoryURLGenerator: void <init>()>";
"<PolarPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>";
"<annotations.XYImageAnnotation: void <init>(double,double,java.awt.Image,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
"<servlet.ServletUtilities: void sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse)>" -> "<org.jfree.chart.servlet.ServletUtilities: void sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse,java.lang.String)>";
"<renderer.xy.XYBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: boolean isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)>";
"<axis.CategoryAxis3D: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<AbstractCategoryItemRenderer: void setLegendItemToolTipGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<time.Day: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int,int,int)>";
"<StackedAreaRenderer: void <init>(boolean)>" -> "<org.jfree.chart.renderer.category.AreaRenderer: void <init>()>";
"<ohlc.OHLCSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.ComparableObjectSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<renderer.xy.XYLine3DRenderer: void drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)>";
"<dial.DialValueIndicator: void <init>(int)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<LegendGraphic: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.dial.StandardDialScale: void setTickLabelFormatter(java.text.NumberFormat)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<axis.SubCategoryAxis: org.jfree.chart.axis.AxisState drawSubCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.SubCategoryAxis: double getMaxDim(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)>";
"<RectangleConstraint: org.jfree.chart.util.Size2D calculateConstrainedSize(org.jfree.chart.util.Size2D)>" -> "<org.jfree.chart.util.Size2D: void <init>()>";
"<demo.TimeSeriesChartDemo1: void main(java.lang.String[])>" -> "<org.jfree.chart.demo.TimeSeriesChartDemo1: void <init>(java.lang.String)>";
"<DateAxis: void setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<annotations.XYBoxAnnotation: void <init>(double,double,double,double)>" -> "<org.jfree.chart.annotations.XYBoxAnnotation: void <init>(double,double,double,double,java.awt.Stroke,java.awt.Paint)>";
"<XYTitleAnnotationDemo1: org.jfree.data.xy.XYDataset createDataset()>" -> "<org.jfree.data.time.TimeSeriesCollection: void <init>()>";
"<util.ObjectList: void set(int,java.lang.Object)>" -> "<org.jfree.chart.util.AbstractObjectList: void set(int,java.lang.Object)>";
"<title.Title: void setNotify(boolean)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<xml.KeyHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.data.xml.ValueHandler: void <init>(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)>";
"<DeviationRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<AbstractXYItemRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<YIntervalDataItem: void <init>(double,double,double,double)>" -> "<org.jfree.data.xy.YInterval: void <init>(double,double,double)>";
"<dial.DialTextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<xy.XYLine3DRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>()>";
"<PiePlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>()>";
"<axis.CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<renderer.DefaultPolarItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.AbstractRenderer: void <init>()>";
"<renderer.xy.StackedXYAreaRenderer2: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: double[] adjustedStackValues(double[],double[])>";
"<BarRenderer: void setDrawBarOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<category.AreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<axis.MonthDateFormat: void <init>(java.util.TimeZone,java.util.Locale,int,boolean,boolean)>" -> "<org.jfree.chart.axis.MonthDateFormat: void <init>(java.util.TimeZone,java.util.Locale,int,boolean[],java.text.DateFormat)>";
"<xy.XYBlockRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<renderer.category.AreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<xy.XYErrorRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<plot.MultiplePiePlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<DateAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<category.StackedBarRenderer3D: void setIgnoreZeroValues(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<PiePlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<annotations.XYLineAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<axis.CyclicNumberAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>";
"<DatasetUtilities: org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)>" -> "<org.jfree.data.general.DatasetUtilities: double calculatePieDatasetTotal(org.jfree.data.general.PieDataset)>";
"<ChartUtilities: void writeBufferedImageAsPNG(java.io.OutputStream,java.awt.image.BufferedImage)>" -> "<org.jfree.chart.encoders.EncoderUtil: void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream)>";
"<CategoryLabelPositions: void <init>()>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>()>";
"<CombinedDomainXYPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<DefaultKeyedValueDataset: void <init>()>" -> "<org.jfree.data.general.DefaultKeyedValueDataset: void <init>(org.jfree.data.KeyedValue)>";
"<renderer.xy.StandardXYItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>";
"<dial.AbstractDialLayer: void removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Class class$(java.lang.String)>";
"<Marker: void setLabelOffset(org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<MovingAverage: org.jfree.data.time.TimeSeries createPointMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int)>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable,java.lang.Class)>";
"<statistics.DefaultBoxAndWhiskerXYDataset: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<renderer.xy.XYBarRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<axis.ValueAxis: void setRange(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ArcDialFrame: void setForegroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DefaultTitleEditor: void setTitleProperties(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.title.TextTitle: void <init>()>";
"<util.AbstractObjectList: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.AbstractObjectList: void set(int,java.lang.Object)>";
"<AbstractCategoryItemRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<DateAxis: void <clinit>()>" -> "<org.jfree.data.time.DateRange: void <init>()>";
"<xy.XYBubbleRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<renderer.xy.XYBlockRenderer: void <init>()>" -> "<org.jfree.chart.renderer.LookupPaintScale: void <init>()>";
"<CategoryAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.axis.CategoryAxis: java.util.Map readPaintMap(java.io.ObjectInputStream)>";
"<category.LevelRenderer: void setItemMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardCategoryURLGenerator: void <init>()>";
"<axis.SegmentedTimeline: void addBaseTimelineExclusions(long,long)>" -> "<org.jfree.chart.axis.SegmentedTimeline: void addException(org.jfree.chart.axis.SegmentedTimeline$Segment)>";
"<DialBackground: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<Marker: void setOutlineStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<CombinedDataset: java.lang.Number getHigh(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<plot.dial.DialTextAnnotation: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<LogAxis: void setSmallestValue(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<SegmentedTimeline: void addBaseTimelineExclusions(long,long)>" -> "<org.jfree.chart.axis.SegmentedTimeline$BaseTimelineSegmentRange: void <init>(org.jfree.chart.axis.SegmentedTimeline,long,long)>";
"<DefaultTableXYDataset: void <init>()>" -> "<org.jfree.data.xy.DefaultTableXYDataset: void <init>(boolean)>";
"<time.Minute: org.jfree.data.time.Hour getHour()>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<text.TextFragment: void <init>(java.lang.String)>" -> "<org.jfree.chart.text.TextFragment: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<Statistics: double[] getLinearFit(java.lang.Number[],java.lang.Number[])>" -> "<org.jfree.data.statistics.Statistics: double calculateMean(java.lang.Number[])>";
"<dial.DialPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<general.CombinedDataset: java.lang.Number getStartX(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<Month: org.jfree.data.time.Year getYear()>" -> "<org.jfree.data.time.Year: void <init>(int)>";
"<BarRenderer3D: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<renderer.AbstractRenderer: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.Object)>";
"<encoders.EncoderUtil: void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String)>";
"<category.StackedBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer: void <init>(boolean)>";
"<xy.XYSplineAndShapeRenderer: void drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer: void solveTridiag(float[],float[],float[],float[],int)>";
"<RectangleConstraint: void <init>(org.jfree.data.Range,org.jfree.data.Range)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<plot.XYPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.CrosshairState: void <init>()>";
"<xy.XYSeries: int hashCode()>" -> "<org.jfree.data.general.Series: int hashCode()>";
"<LogFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>" -> "<org.jfree.chart.util.LogFormat: double calculateLog(double)>";
"<axis.SymbolAxis: void setGridBandPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<general.DefaultKeyedValueDataset: void setValue(java.lang.Comparable,java.lang.Number)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<plot.CombinedRangeCategoryPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<CategoryAxis3D: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<plot.Marker: void setOutlineStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<xy.XYAreaRenderer2: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<XYPlot: org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int)>" -> "<org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>";
"<category.StatisticalBarRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.PlotRenderingInfo: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<axis.LogAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<axis.NumberTickUnit: void <init>(double)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<StandardDialRange: void setInnerRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<axis.ValueAxis: org.jfree.chart.axis.AxisState drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<Title: void <clinit>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<renderer.category.LevelRenderer: void setMaximumItemWidth(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.PiePlot: void drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: double calculatePieDatasetTotal(org.jfree.data.general.PieDataset)>";
"<block.AbstractBlock: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<plot.RingPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<XYDataItem: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<plot.dial.ArcDialFrame: void setOuterRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<TimePeriodValues: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.time.TimePeriodValues: void <init>(java.lang.Comparable,java.lang.String,java.lang.String)>";
"<Range: org.jfree.data.Range shift(org.jfree.data.Range,double,boolean)>" -> "<org.jfree.data.Range: double shiftWithNoZeroCrossing(double,double)>";
"<Second: void <init>(int,int,int,int,int,int)>" -> "<org.jfree.data.time.Second: void <init>(int,org.jfree.data.time.Minute)>";
"<xy.XYLine3DRenderer: void setWallPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.XYErrorRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<renderer.xy.CyclicXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>";
"<ProjectInfo: void <init>()>" -> "<org.jfree.chart.ui.BasicProjectInfo: void <init>()>";
"<block.RectangleConstraint: void <clinit>()>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<renderer.category.AbstractCategoryItemRenderer: void setLegendItemLabelGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYPlot: org.jfree.chart.util.RectangleEdge getDomainAxisEdge()>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<entity.CategoryItemEntity: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.xy.XYLine3DRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<PaintScaleLegend: void setAxisOffset(double)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<XYBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<time.Week: org.jfree.data.time.Year getYear()>" -> "<org.jfree.data.time.Year: void <init>(int)>";
"<plot.CombinedDomainCategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<CyclicNumberAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>";
"<StandardDialFrame: void setForegroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<title.TextTitle: org.jfree.chart.util.Size2D arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<block.AbstractBlock: org.jfree.data.Range trimToContentHeight(org.jfree.data.Range)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<block.BlockBorder: void <init>()>" -> "<org.jfree.chart.block.BlockBorder: void <init>(java.awt.Paint)>";
"<ChartFactory: org.jfree.chart.JFreeChart createAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.category.AreaRenderer: void <init>()>";
"<plot.XYPlot: org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<xy.VectorSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<statistics.DefaultStatisticalCategoryDataset: void removeRow(java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultStatisticalCategoryDataset: void updateBounds()>";
"<PieChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>";
"<LogAxis: void <init>(java.lang.String)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<annotations.XYPointerAnnotation: java.lang.Object clone()>" -> "<org.jfree.chart.annotations.XYTextAnnotation: java.lang.Object clone()>";
"<ChartEntity: void <init>(java.awt.Shape)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String)>";
"<StackedXYAreaRenderer2: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer2: boolean equals(java.lang.Object)>";
"<CategoryAxis: void addCategoryLabelToolTip(java.lang.Comparable,java.lang.String)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<plot.CombinedRangeCategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotState: void <init>()>";
"<plot.CombinedDomainXYPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.XYPlot: boolean equals(java.lang.Object)>";
"<LogAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.ValueAxis: boolean equals(java.lang.Object)>";
"<StackedXYAreaRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)>";
"<labels.IntervalCategoryToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat)>";
"<StandardPieSectionLabelGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.AbstractPieItemLabelGenerator: boolean equals(java.lang.Object)>";
"<plot.FastScatterPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<XYPointerAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<ModuloAxis: double lengthToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<util.PaintList: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<time.Second: void <init>(int,org.jfree.data.time.Minute)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<xy.XYAreaRenderer2: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<plot.FastScatterPlot: org.jfree.data.Range calculateXDataRange(float[][])>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<general.Series: void removeChangeListener(org.jfree.data.general.SeriesChangeListener)>" -> "<org.jfree.data.general.Series: java.lang.Class class$(java.lang.String)>";
"<block.AbstractBlock: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<SerialDate: org.jfree.data.time.SerialDate getFollowingDayOfWeek(int)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)>";
"<ValueAxis: void centerRange(double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<NumberTickUnit: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.TickUnit: boolean equals(java.lang.Object)>";
"<time.DynamicTimeSeriesCollection: void <init>(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection: java.lang.Class class$(java.lang.String)>";
"<util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Polygon,java.awt.Polygon)>";
"<labels.StandardPieToolTipGenerator: void <init>(java.util.Locale)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>(java.lang.String,java.util.Locale)>";
"<needle.MeterNeedle: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<Task: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)>" -> "<org.jfree.chart.text.TextBlock: void <init>()>";
"<StandardDialFrame: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<category.LineAndShapeRenderer: void setItemMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<util.RefineryUtilities: javax.swing.JPanel createTablePanel(javax.swing.table.TableModel)>" -> "<org.jfree.chart.util.RefineryUtilities: java.lang.Class class$(java.lang.String)>";
"<renderer.category.ScatterRenderer: void setDrawOutlines(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<dial.ArcDialFrame: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<TimeSeries: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<renderer.xy.XYStepAreaRenderer: void setOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<CombinedDataset: java.lang.Number getVolume(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<time.DynamicTimeSeriesCollection: void <init>(int,int,org.jfree.data.time.RegularTimePeriod)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection: void <init>(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>";
"<TimeSeriesChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<editor.DefaultNumberAxisEditor: void <init>(org.jfree.chart.axis.NumberAxis)>" -> "<org.jfree.chart.ui.PaintSample: void <init>(java.awt.Paint)>";
"<CyclicXYItemRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int)>";
"<renderer.xy.XYDifferenceRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<renderer.category.LineAndShapeRenderer: void setSeriesShapesFilled(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.StackedXYAreaRenderer2: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.lang.Object clone()>";
"<CategoryAxis: void setLowerMargin(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<time.Minute: org.jfree.data.time.Minute parseMinute(java.lang.String)>" -> "<org.jfree.data.time.Minute: void <init>(int,org.jfree.data.time.Hour)>";
"<plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<block.BlockContainer: void <init>(org.jfree.chart.block.Arrangement)>" -> "<org.jfree.chart.block.AbstractBlock: void <init>()>";
"<editor.DefaultTitleEditor: void <init>(org.jfree.chart.title.Title)>" -> "<org.jfree.chart.ui.PaintSample: void <init>(java.awt.Paint)>";
"<time.SerialDate: org.jfree.data.time.SerialDate getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate addDays(int,org.jfree.data.time.SerialDate)>";
"<time.Month: org.jfree.data.time.Month parseMonth(java.lang.String)>" -> "<org.jfree.data.time.Month: void <init>(int,org.jfree.data.time.Year)>";
"<BlockBorder: void <init>()>" -> "<org.jfree.chart.block.BlockBorder: void <init>(java.awt.Paint)>";
"<ThermometerPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<plot.MultiplePiePlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.category.CategoryDataset)>";
"<DateAxis: java.lang.Object clone()>" -> "<org.jfree.chart.axis.ValueAxis: java.lang.Object clone()>";
"<PiePlot3D: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>";
"<renderer.category.StackedBarRenderer3D: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<renderer.xy.XYBarRenderer: void setLegendBar(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<SerialDate: org.jfree.data.time.SerialDate createInstance(java.util.Date)>" -> "<org.jfree.data.time.SpreadsheetDate: void <init>(int,int,int)>";
"<PeriodAxis: void autoAdjustRange()>" -> "<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)>";
"<xy.HighLowRenderer: void setOpenTickPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<MultiplePiePlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<DateTickUnit: void <init>(int,int,int,int,java.text.DateFormat)>" -> "<org.jfree.chart.axis.DateTickUnit: long getMillisecondCount(int,int)>";
"<renderer.xy.VectorRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<xy.StackedXYAreaRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<time.FixedMillisecond: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.FixedMillisecond: void <init>(long)>";
"<BoxAndWhiskerRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<BlockContainer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.block.AbstractBlock: boolean equals(java.lang.Object)>";
"<Second: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Second: void <init>(int,org.jfree.data.time.Minute)>";
"<DatasetUtilities: org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues)>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<renderer.category.StackedBarRenderer3D: void drawStackHorizontal(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer3D: java.awt.Shape[] createHorizontalBlock(double,double,double,double,boolean)>";
"<RingPlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>";
"<WaferMapPlot: void <init>(org.jfree.data.general.WaferMapDataset,org.jfree.chart.renderer.WaferMapRenderer)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<plot.CombinedDomainCategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleEdge: double coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>";
"<WaferMapPlot: void setDataset(org.jfree.data.general.WaferMapDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<DefaultNumberAxisEditor: void <init>(org.jfree.chart.axis.NumberAxis)>" -> "<org.jfree.chart.ui.LCBLayout: void <init>(int)>";
"<MultiplePiePlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.MultiplePiePlot: void prefetchSectionPaints()>";
"<renderer.xy.XYSplineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<ImageTitle: org.jfree.chart.util.Size2D drawHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<LogAxis: void selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<Month: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Month: void <init>(int,int)>";
"<title.TextTitle: int hashCode()>" -> "<org.jfree.chart.title.Title: int hashCode()>";
"<statistics.DefaultStatisticalCategoryDataset: void <init>()>" -> "<org.jfree.data.KeyedObjects2D: void <init>()>";
"<Week: void <init>(java.util.Date,java.util.TimeZone,java.util.Locale)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<AreaRendererEndType: void <clinit>()>" -> "<org.jfree.chart.renderer.AreaRendererEndType: void <init>(java.lang.String)>";
"<ServletUtilities: void sendTempFile(java.lang.String,javax.servlet.http.HttpServletResponse)>" -> "<org.jfree.chart.servlet.ServletUtilities: void sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse)>";
"<axis.DateAxis: void setTimeZone(java.util.TimeZone)>" -> "<org.jfree.chart.axis.DateAxis: org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits(java.util.TimeZone)>";
"<xy.XIntervalSeries: void <init>(java.lang.Comparable,boolean,boolean)>" -> "<org.jfree.data.ComparableObjectSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<plot.dial.StandardDialFrame: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<DatasetUtilities: org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<AbstractRenderer: void <init>()>" -> "<org.jfree.chart.util.PaintList: void <init>()>";
"<general.DatasetUtilities: org.jfree.data.xy.XYDataset sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)>" -> "<org.jfree.data.xy.XYSeriesCollection: void <init>(org.jfree.data.xy.XYSeries)>";
"<Rotation: void <clinit>()>" -> "<org.jfree.chart.util.Rotation: void <init>(java.lang.String,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<LegendItemEntity: void <init>(java.awt.Shape)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape)>";
"<demo.TimeSeriesChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.demo.TimeSeriesChartDemo1: javax.swing.JPanel createDemoPanel()>";
"<TextTitle: void <init>()>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String)>";
"<StandardPieToolTipGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>(java.lang.String)>";
"<util.PaintUtilities: java.awt.Color stringToColor(java.lang.String)>" -> "<org.jfree.chart.util.PaintUtilities: java.lang.Class class$(java.lang.String)>";
"<plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(org.jfree.chart.util.UnitType,double,double,double,double)>";
"<StandardXYItemRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>";
"<JDBCPieDataset: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<category.GroupedStackedBarRenderer: void <init>()>" -> "<org.jfree.data.KeyToGroupMap: void <init>()>";
"<VectorSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator: void <init>()>";
"<ScatterRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<ohlc.OHLCSeries: void add(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>" -> "<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>";
"<demo.BarChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions createUpRotationLabelPositions(double)>";
"<renderer.xy.StackedXYBarRenderer: int hashCode()>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: int hashCode()>";
"<Title: void notifyListeners(org.jfree.chart.event.TitleChangeEvent)>" -> "<org.jfree.chart.title.Title: java.lang.Class class$(java.lang.String)>";
"<time.TimeTableXYDataset: double getXValue(int,int)>" -> "<org.jfree.data.time.TimeTableXYDataset: long getXValue(org.jfree.data.time.TimePeriod)>";
"<HighLowRenderer: void setDrawCloseTicks(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<category.StatisticalBarRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<renderer.category.MinMaxCategoryRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<LabelBlock: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.block.BlockResult: void <init>()>";
"<DialCap: void <init>()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<LegendItemEntity: java.lang.Object clone()>" -> "<org.jfree.chart.entity.ChartEntity: java.lang.Object clone()>";
"<ChartFactory: org.jfree.chart.JFreeChart createWindPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.WindDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.DateAxis: void <init>(java.lang.String)>";
"<CombinedDomainCategoryPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.CategoryPlot: boolean equals(java.lang.Object)>";
"<plot.IntervalMarker: void <init>(double,double)>" -> "<org.jfree.chart.plot.IntervalMarker: void <init>(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<renderer.xy.XYStepRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYStepRenderer: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<XYBoxAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<renderer.category.MinMaxCategoryRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<editor.DefaultAxisEditor: org.jfree.chart.util.RectangleInsets getTickLabelInsets()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<plot.CategoryPlot: org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int)>" -> "<org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>";
"<PiePlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<ChartUtilities: void saveChartAsJPEG(java.io.File,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.ChartUtilities: void writeChartAsJPEG(java.io.OutputStream,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>";
"<renderer.category.LineRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<AbstractXYDataset: void <init>()>" -> "<org.jfree.data.general.AbstractSeriesDataset: void <init>()>";
"<time.Second: void <init>(int,int,int,int,int,int)>" -> "<org.jfree.data.time.Second: void <init>(int,org.jfree.data.time.Minute)>";
"<ClusteredXYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: boolean equals(java.lang.Object)>";
"<ThermometerPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<ModuloAxis: double transEnd(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<needle.PlumNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<PiePlot: void drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<LegendTitle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.title.Title: boolean equals(java.lang.Object)>";
"<renderer.category.MinMaxCategoryRenderer: void setMaxIcon(javax.swing.Icon)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<IntervalXYDelegate: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.data.xy.IntervalXYDelegate: double recalculateInterval()>";
"<StandardXYZToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat)>";
"<NumberAxis3D: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<renderer.category.AbstractCategoryItemRenderer: void removeAnnotations()>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.DefaultDrawingSupplier: void <clinit>()>" -> "<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] createStandardSeriesShapes()>";
"<plot.CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.LineNeedle: void <init>()>";
"<Second: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.Day: void <init>(java.util.Date,java.util.TimeZone)>";
"<SegmentedTimeline: org.jfree.chart.axis.SegmentedTimeline newFifteenMinuteTimeline()>" -> "<org.jfree.chart.axis.SegmentedTimeline: org.jfree.chart.axis.SegmentedTimeline newMondayThroughFridayTimeline()>";
"<plot.ValueMarker: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Marker: boolean equals(java.lang.Object)>";
"<MultiplePiePlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<EmptyBlock: java.lang.Object clone()>" -> "<org.jfree.chart.block.AbstractBlock: java.lang.Object clone()>";
"<JFreeChart: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<Hour: void <init>(int,int,int,int)>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<DefaultTableXYDataset: void <init>(boolean)>" -> "<org.jfree.data.xy.IntervalXYDelegate: void <init>(org.jfree.data.xy.XYDataset,boolean)>";
"<renderer.WaferMapRenderer: void makePaintIndex()>" -> "<org.jfree.chart.renderer.WaferMapRenderer: void makePositionIndex(java.util.Set)>";
"<BoxAndWhiskerToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<annotations.XYLineAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<VectorSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.xy.VectorSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<labels.HighLowItemLabelGenerator: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.Object)>";
"<DefaultChartEditor: void <init>(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.ui.LCBLayout: void <init>(int)>";
"<util.StrokeList: int hashCode()>" -> "<org.jfree.chart.util.AbstractObjectList: int hashCode()>";
"<BoxAndWhiskerRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>";
"<CategoryPlot: org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int)>" -> "<org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>";
"<AbstractXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<axis.LogarithmicAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<renderer.xy.XYLineAndShapeRenderer: void setSeriesShapesFilled(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<StandardDialFrame: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<category.LineRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<util.StrokeList: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.AbstractObjectList: boolean equals(java.lang.Object)>";
"<DialValueIndicator: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>";
"<renderer.xy.XYStepAreaRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>";
"<time.Second: org.jfree.data.time.Second parseSecond(java.lang.String)>" -> "<org.jfree.data.time.Second: void <init>(int,org.jfree.data.time.Minute)>";
"<category.LevelRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)>" -> "<org.jfree.chart.text.TextUtilities: int nextLineBreak(java.lang.String,int,float,java.text.BreakIterator,org.jfree.chart.text.TextMeasurer)>";
"<DialTextAnnotation: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<PiePlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.PaintMap: void <init>()>";
"<dial.DialValueIndicator: void setTextAnchor(org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<TimeTableXYDataset: void <init>(java.util.TimeZone)>" -> "<org.jfree.data.time.TimeTableXYDataset: void <init>(java.util.TimeZone,java.util.Locale)>";
"<renderer.xy.XYLine3DRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<SpreadsheetDate: void <init>(int,int,int)>" -> "<org.jfree.data.time.SpreadsheetDate: int calcSerial(int,int,int)>";
"<DialBackground: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<plot.DatasetRenderingOrder: void <clinit>()>" -> "<org.jfree.chart.plot.DatasetRenderingOrder: void <init>(java.lang.String)>";
"<CombinedDomainXYPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotState: void <init>()>";
"<AbstractCategoryItemRenderer: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<editor.DefaultAxisEditor: void attemptTickLabelFontSelection()>" -> "<org.jfree.chart.ui.FontChooserPanel: void <init>(java.awt.Font)>";
"<DefaultPlotEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultPlotEditor: void attemptOutlineStrokeSelection()>";
"<Month: void <init>(int,int)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<block.FlowArrangement: org.jfree.chart.util.Size2D arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<CategoryTableXYDataset: void <init>()>" -> "<org.jfree.data.xy.IntervalXYDelegate: void <init>(org.jfree.data.xy.XYDataset)>";
"<XYBarRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<labels.MultipleXYSeriesLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.MultipleXYSeriesLabelGenerator: void <init>(java.lang.String)>";
"<TextTitle: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.entity.StandardEntityCollection: void <init>()>";
"<xy.VectorSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.xy.VectorSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<xy.XYAreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List,boolean)>" -> "<org.jfree.data.statistics.BoxAndWhiskerCalculator: double calculateQ3(java.util.List)>";
"<labels.StandardCategoryItemLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<text.TextUtilities: float[] deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<dial.DialBackground: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<LegendItem: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<CombinedDataset: java.lang.Number getStartX(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<LegendItem: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<DynamicTimeSeriesCollection: void addValue(int,int,float)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence: void <init>(org.jfree.data.time.DynamicTimeSeriesCollection,int)>";
"<StandardDialScale: void setMajorTickLength(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<plot.CategoryPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.LookupPaintScale: void add(double,java.awt.Paint)>" -> "<org.jfree.chart.renderer.LookupPaintScale$PaintItem: void <init>(org.jfree.chart.renderer.LookupPaintScale,double,java.awt.Paint)>";
"<NumberAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<plot.CategoryPlot: org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<plot.dial.DialValueIndicator: void setNumberFormat(java.text.NumberFormat)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<annotations.CategoryLineAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<axis.Axis: void setTickMarkInsideLength(float)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<axis.DateAxis: void autoAdjustRange()>" -> "<org.jfree.data.time.DateRange: void <init>(double,double)>";
"<DateAxis: void selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.DateAxis: double estimateMaximumTickLabelHeight(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)>";
"<AbstractDataset: void <init>()>" -> "<org.jfree.data.general.DatasetGroup: void <init>()>";
"<TimeTableXYDataset: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<CombinedDataset: java.lang.Number getVolume(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<CategoryPlot: void setDataset(int,org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<LegendItem: void <init>(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.LegendItem: java.lang.String characterIteratorToString(java.text.CharacterIterator)>";
"<HistogramDataset: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<axis.SegmentedTimeline: void addBaseTimelineExclusions(long,long)>" -> "<org.jfree.chart.axis.SegmentedTimeline$BaseTimelineSegmentRange: void <init>(org.jfree.chart.axis.SegmentedTimeline,long,long)>";
"<Axis: void setAxisLineVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<XYImageAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.category.IntervalBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>";
"<renderer.xy.WindItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<renderer.xy.XYBarRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<text.TextBox: void <init>()>" -> "<org.jfree.chart.text.TextBox: void <init>(org.jfree.chart.text.TextBlock)>";
"<MultiplePiePlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.XYPlot: org.jfree.chart.util.RectangleEdge getRangeAxisEdge()>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<Range: org.jfree.data.Range expandToInclude(org.jfree.data.Range,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<Year: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Year: void <init>(int)>";
"<DateTickUnit: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<ValueAxis: void setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<CombinedDomainCategoryPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>";
"<G2TextMeasurer: float getStringWidth(java.lang.String,int,int)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<renderer.category.AreaRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<DialPointer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<XYBubbleRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<DefaultPlotEditor: void updatePlotProperties(org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: void setAxisProperties(org.jfree.chart.axis.Axis)>";
"<block.BorderArrangement: org.jfree.chart.util.Size2D arrangeRR(org.jfree.chart.block.BlockContainer,org.jfree.data.Range,org.jfree.data.Range,java.awt.Graphics2D)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(org.jfree.data.Range,org.jfree.data.Range)>";
"<CombinedDataset: int[] getMap()>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<labels.StandardXYZToolTipGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: boolean equals(java.lang.Object)>";
"<XYBoxAndWhiskerRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<DateAxis: void setRange(double,double)>" -> "<org.jfree.data.time.DateRange: void <init>(double,double)>";
"<XYImageAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<renderer.xy.DeviationRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.DeviationRenderer$State: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<plot.dial.StandardDialFrame: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<CombinedDataset: java.lang.Number getClose(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<xy.XYIntervalSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<title.TextTitle: org.jfree.chart.util.Size2D arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)>" -> "<org.jfree.chart.text.G2TextMeasurer: void <init>(java.awt.Graphics2D)>";
"<MeterPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<TextFragment: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<statistics.DefaultStatisticalCategoryDataset: void removeRow(int)>" -> "<org.jfree.data.statistics.DefaultStatisticalCategoryDataset: void updateBounds()>";
"<xy.XYAreaRenderer: void setLegendArea(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYBoxAndWhiskerRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<renderer.xy.XYStepAreaRenderer: void setRangeBase(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<statistics.BoxAndWhiskerCalculator: double calculateQ1(java.util.List)>" -> "<org.jfree.data.statistics.Statistics: double calculateMedian(java.util.List,int,int)>";
"<xy.XYLineAndShapeRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<ValueAxis: void setRightArrow(java.awt.Shape)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<xy.StackedXYAreaRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer$StackedXYAreaRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<XYAreaRenderer2: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<TaskSeries: boolean equals(java.lang.Object)>" -> "<org.jfree.data.general.Series: boolean equals(java.lang.Object)>";
"<time.Minute: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.Day: void <init>(java.util.Date,java.util.TimeZone)>";
"<CategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<JFreeChart: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<CompassPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<TextTitle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<labels.StandardPieSectionLabelGenerator: java.lang.String generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)>" -> "<org.jfree.chart.labels.AbstractPieItemLabelGenerator: java.lang.String generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)>";
"<labels.StandardXYZToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<plot.dial.StandardDialScale: void setMinorTickStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<CompositeTitle: void <init>()>" -> "<org.jfree.chart.title.CompositeTitle: void <init>(org.jfree.chart.block.BlockContainer)>";
"<JFreeChart: void addChangeListener(org.jfree.chart.event.ChartChangeListener)>" -> "<org.jfree.chart.JFreeChart: java.lang.Class class$(java.lang.String)>";
"<PaintList: int hashCode()>" -> "<org.jfree.chart.util.AbstractObjectList: int hashCode()>";
"<CyclicXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: void <init>(double[],double[],org.jfree.data.xy.XYDataset)>";
"<annotations.XYPolygonAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<CombinedDataset: java.lang.Comparable getSeriesKey(int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<Marker: void setLabelAnchor(org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<general.CombinedDataset: void add(org.jfree.data.general.SeriesDataset[])>" -> "<org.jfree.data.general.CombinedDataset: void fastAdd(org.jfree.data.general.SeriesDataset)>";
"<ChartChangeEventType: void <clinit>()>" -> "<org.jfree.chart.event.ChartChangeEventType: void <init>(java.lang.String)>";
"<time.Quarter: void <init>(int,org.jfree.data.time.Year)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<WaferMapRenderer: void makePaintIndex()>" -> "<org.jfree.chart.renderer.WaferMapRenderer: void makePositionIndex(java.util.Set)>";
"<plot.CategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotRenderingInfo: void <init>(org.jfree.chart.ChartRenderingInfo)>";
"<XYPlot: org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<DefaultKeyedValues: java.lang.Number getValue(java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<plot.ThermometerPlot: void setDataset(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<renderer.category.BoxAndWhiskerRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>";
"<general.CombinedDataset: java.lang.Number getClose(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<BarRenderer3D: void <init>(double,double)>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)>";
"<title.LegendTitle: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYStepAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<TimeSeriesCollection: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<ThermometerPlot: void setDataset(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<CategoryAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.CategoryAxis: boolean equalPaintMaps(java.util.Map,java.util.Map)>";
"<DefaultTableXYDataset: void addSeries(org.jfree.data.xy.XYSeries)>" -> "<org.jfree.data.xy.DefaultTableXYDataset: void updateXPoints(org.jfree.data.xy.XYSeries)>";
"<general.DatasetUtilities: org.jfree.data.general.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<RingPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<Minute: org.jfree.data.time.Minute parseMinute(java.lang.String)>" -> "<org.jfree.data.time.Day: org.jfree.data.time.Day parseDay(java.lang.String)>";
"<Axis: void setTickLabelInsets(org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ChartUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>";
"<axis.ModuloAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.ModuloAxis: double mapValueToFixedRange(double)>";
"<CombinedDomainXYPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotRenderingInfo: void <init>(org.jfree.chart.ChartRenderingInfo)>";
"<axis.PeriodAxisLabelInfo: void <init>(java.lang.Class,java.text.DateFormat)>" -> "<org.jfree.chart.axis.PeriodAxisLabelInfo: void <init>(java.lang.Class,java.text.DateFormat,org.jfree.chart.util.RectangleInsets,java.awt.Font,java.awt.Paint,boolean,java.awt.Stroke,java.awt.Paint)>";
"<util.Size2D: void <init>()>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<plot.dial.DialPointer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<category.CategoryStepRenderer: void setStagger(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<SerialDate: java.lang.String toString()>" -> "<org.jfree.data.time.SerialDate: java.lang.String monthCodeToString(int)>";
"<xy.ClusteredXYBarRenderer: org.jfree.data.Range findDomainBoundsWithOffset(org.jfree.data.xy.IntervalXYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<needle.MeterNeedle: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<category.WaterfallBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<AbstractRenderer: void fireChangeEvent()>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.ThermometerPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.plot.ThermometerPlot: boolean inSubrange(int,double)>";
"<plot.dial.StandardDialScale: void setMajorTickLength(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<WaferMapPlot: void <init>(org.jfree.data.general.WaferMapDataset)>" -> "<org.jfree.chart.plot.WaferMapPlot: void <init>(org.jfree.data.general.WaferMapDataset,org.jfree.chart.renderer.WaferMapRenderer)>";
"<DatasetRenderingOrder: void <clinit>()>" -> "<org.jfree.chart.plot.DatasetRenderingOrder: void <init>(java.lang.String)>";
"<category.DefaultIntervalCategoryDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<CyclicNumberAxis: void <init>(double,double)>" -> "<org.jfree.chart.axis.CyclicNumberAxis: void <init>(double,double,java.lang.String)>";
"<Minute: void <init>(int,int,int,int,int)>" -> "<org.jfree.data.time.Minute: void <init>(int,org.jfree.data.time.Hour)>";
"<ValueAxis: void setLowerBound(double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<axis.CategoryAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.axis.CategoryAxis: void writePaintMap(java.util.Map,java.io.ObjectOutputStream)>";
"<category.MinMaxCategoryRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<ImageTitle: org.jfree.chart.util.Size2D drawVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<XYIntervalSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<annotations.CategoryPointerAnnotation: java.lang.Object clone()>" -> "<org.jfree.chart.annotations.CategoryTextAnnotation: java.lang.Object clone()>";
"<plot.MultiplePiePlot: void <init>()>" -> "<org.jfree.chart.plot.MultiplePiePlot: void <init>(org.jfree.data.category.CategoryDataset)>";
"<renderer.xy.XYDifferenceRenderer: void setRoundXCoordinates(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.SymbolAxis: java.util.List refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<plot.Marker: void <init>()>" -> "<org.jfree.chart.plot.Marker: void <init>(java.awt.Paint)>";
"<demo.BarChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart,boolean)>";
"<XYLine3DRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<block.AbstractBlock: org.jfree.chart.block.RectangleConstraint toContentConstraint(org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.block.AbstractBlock: org.jfree.data.Range trimToContentHeight(org.jfree.data.Range)>";
"<xy.XYSeries: org.jfree.data.xy.XYDataItem addOrUpdate(java.lang.Number,java.lang.Number)>" -> "<org.jfree.data.xy.XYDataItem: void <init>(java.lang.Number,java.lang.Number)>";
"<dial.StandardDialFrame: void <init>()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<CategoryPlot: org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<renderer.category.BarRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>";
"<time.Second: void <init>(int,int,int,int,int,int)>" -> "<org.jfree.data.time.Minute: void <init>(int,int,int,int,int)>";
"<Day: void <init>()>" -> "<org.jfree.data.time.Day: void <init>(java.util.Date)>";
"<NumberAxis: void <clinit>()>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<axis.PeriodAxis: void <init>(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: java.lang.Class downsize(java.lang.Class)>";
"<plot.ThermometerPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<renderer.AbstractRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<text.TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: float[] deriveRotationAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)>";
"<plot.dial.ArcDialFrame: void <init>(double,double)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<general.CombinedDataset: java.lang.Comparable getSeriesKey(int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<title.PaintScaleLegend: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<annotations.CategoryLineAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<category.MinMaxCategoryRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,java.awt.Paint,java.awt.Paint)>";
"<PeriodAxis: void setRange(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range,boolean,boolean)>";
"<plot.CombinedDomainCategoryPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<plot.Marker: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<renderer.category.BarRenderer: void setBase(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<jdbc.JDBCXYDataset: void <init>(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCXYDataset: void <init>(java.sql.Connection)>";
"<ChartFactory: org.jfree.chart.JFreeChart createCandlestickChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<AbstractCategoryItemRenderer: void drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<xy.XYBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: void <init>(double)>";
"<AbstractDialLayer: void removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Class class$(java.lang.String)>";
"<Title: void removeChangeListener(org.jfree.chart.event.TitleChangeListener)>" -> "<org.jfree.chart.title.Title: java.lang.Class class$(java.lang.String)>";
"<renderer.xy.StackedXYBarRenderer: void setRenderAsPercentages(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.CombinedDomainCategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.CategoryPlot: java.lang.Object clone()>";
"<text.TextBox: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<category.BarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer: java.awt.geom.Point2D calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)>";
"<DialValueIndicator: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<BarRenderer: void setIncludeBaseInRange(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<title.LegendItemBlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.block.BlockResult: void <init>()>";
"<CyclicNumberAxis: void setFixedAutoRange(double)>" -> "<org.jfree.chart.axis.NumberAxis: void setFixedAutoRange(double)>";
"<XYSeries: int hashCode()>" -> "<org.jfree.data.general.Series: int hashCode()>";
"<XYBoxAndWhiskerRenderer: void <init>(double)>" -> "<org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator: void <init>()>";
"<WaterfallBarRenderer: void <init>(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>(org.jfree.chart.util.GradientPaintTransformType)>";
"<XYDrawableAnnotation: void <init>(double,double,double,double,org.jfree.chart.Drawable)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
"<renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<axis.ValueAxis: void setLeftArrow(java.awt.Shape)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<axis.MonthDateFormat: void main(java.lang.String[])>" -> "<org.jfree.data.time.Month: void <init>(int,int)>";
"<RingPlot: void drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(org.jfree.chart.util.UnitType,double,double,double,double)>";
"<XYLineAndShapeRenderer: void setBaseShapesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.CategoryAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<Day: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Day: void <init>(org.jfree.data.time.SerialDate)>";
"<DynamicTimeSeriesCollection: org.jfree.data.Range getRangeBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<xy.DefaultXYZDataset: void addSeries(java.lang.Comparable,double[][])>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<block.BorderArrangement: org.jfree.chart.util.Size2D arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<title.PaintScaleLegend: void setScale(org.jfree.chart.renderer.PaintScale)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<gantt.TaskSeries: boolean equals(java.lang.Object)>" -> "<org.jfree.data.general.Series: boolean equals(java.lang.Object)>";
"<xy.DefaultOHLCDataset: void <init>(java.lang.Comparable,org.jfree.data.xy.OHLCDataItem[])>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<plot.PiePlot: org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: double calculatePieDatasetTotal(org.jfree.data.general.PieDataset)>";
"<AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.ValueMarker: void <init>(double)>";
"<time.Quarter: org.jfree.data.time.Quarter parseQuarter(java.lang.String)>" -> "<org.jfree.data.time.Year: org.jfree.data.time.Year parseYear(java.lang.String)>";
"<axis.DateTickUnit: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.TickUnit: boolean equals(java.lang.Object)>";
"<RefineryUtilities: void positionFrameRandomly(java.awt.Window)>" -> "<org.jfree.chart.util.RefineryUtilities: void positionFrameOnScreen(java.awt.Window,double,double)>";
"<DatasetUtilities: org.jfree.data.general.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset,java.lang.Comparable)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.general.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)>";
"<title.TextTitle: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<xy.XYStepAreaRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>";
"<ServletUtilities: java.lang.String saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.servlet.ServletUtilities: void createTempDir()>";
"<dial.ArcDialFrame: void setStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<category.GroupedStackedBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)>";
"<util.ShapeList: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<XYDifferenceRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<BorderArrangement: org.jfree.chart.util.Size2D arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<ValueAxis: void setRange(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<xy.XYStepAreaRenderer: void setShapesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<category.MinMaxCategoryRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,java.awt.Paint,java.awt.Paint)>";
"<labels.BoxAndWhiskerXYToolTipGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<plot.dial.StandardDialScale: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<statistics.BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List,boolean)>" -> "<org.jfree.data.statistics.BoxAndWhiskerCalculator: double calculateQ1(java.util.List)>";
"<axis.CyclicNumberAxis: void <init>(double,java.lang.String)>" -> "<org.jfree.chart.axis.CyclicNumberAxis: void <init>(double,double,java.lang.String)>";
"<renderer.category.ScatterRenderer: void <init>()>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<TextTitle: void <init>(java.lang.String)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<axis.Tick: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<MeterPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<XYPolygonAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<DateAxis: void <init>()>" -> "<org.jfree.chart.axis.DateAxis: void <init>(java.lang.String)>";
"<XYAreaRenderer: void setLegendArea(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CombinedRangeXYPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<LineRenderer3D: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<CyclicNumberAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<title.LegendTitle: void setItemFont(java.awt.Font)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<ExtendedCategoryAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<axis.CategoryAxis: double calculateTextBlockHeight(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape rotateShape(java.awt.Shape,double,float,float)>";
"<plot.dial.DialCap: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<StatisticalBarRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<DialPlot: void <init>()>" -> "<org.jfree.chart.plot.dial.DialPlot: void <init>(org.jfree.data.general.ValueDataset)>";
"<category.GanttRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.IntervalBarRenderer: void <init>()>";
"<PiePlot: void <init>()>" -> "<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>";
"<DefaultStatisticalCategoryDataset: void add(java.lang.Number,java.lang.Number,java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultStatisticalCategoryDataset: void updateBounds()>";
"<xy.XYDotRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<CategoryAxis: double calculateTextBlockHeight(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape rotateShape(java.awt.Shape,double,float,float)>";
"<StackedXYAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<SegmentedTimeline: org.jfree.chart.axis.SegmentedTimeline newMondayThroughFridayTimeline()>" -> "<org.jfree.chart.axis.SegmentedTimeline: void <init>(long,int,int)>";
"<plot.PolarPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<axis.CategoryAxis: void clearCategoryLabelToolTips()>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<PaintUtilities: java.awt.Color stringToColor(java.lang.String)>" -> "<org.jfree.chart.util.PaintUtilities: java.lang.Class class$(java.lang.String)>";
"<StackedBarRenderer: void <init>(boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerCategoryDataset,boolean)>" -> "<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void <init>()>";
"<WaterfallBarRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<SubCategoryAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<block.BlockBorder: void <init>(double,double,double,double)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<ChartUtilities: void saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.ChartUtilities: void writeChartAsJPEG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>";
"<axis.LogarithmicAxis: void setRange(org.jfree.data.Range)>" -> "<org.jfree.chart.axis.NumberAxis: void setRange(org.jfree.data.Range)>";
"<xy.XYDotRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<axis.SubCategoryAxis: org.jfree.chart.axis.AxisState drawSubCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<StandardDialRange: void setScaleIndex(int)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<ObjectUtilities: boolean isJDK14()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.String[] parseVersions(java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<axis.Axis: void setTickLabelFont(java.awt.Font)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<renderer.xy.CyclicXYItemRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int)>";
"<editor.ChartEditorManager: void <clinit>()>" -> "<org.jfree.chart.editor.DefaultChartEditorFactory: void <init>()>";
"<BlockContainer: java.lang.Object clone()>" -> "<org.jfree.chart.block.AbstractBlock: java.lang.Object clone()>";
"<time.Year: org.jfree.data.time.Year parseYear(java.lang.String)>" -> "<org.jfree.data.time.Year: void <init>(int)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<ChartPanel: void removeChartMouseListener(org.jfree.chart.ChartMouseListener)>" -> "<org.jfree.chart.ChartPanel: java.lang.Class class$(java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWindPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.WindDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>()>";
"<general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<renderer.xy.XYBlockRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)>";
"<labels.StandardCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<block.BlockBorder: void <init>(double,double,double,double,java.awt.Paint)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<plot.dial.StandardDialFrame: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<SymbolAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<plot.dial.StandardDialScale: void setTickLabelsVisible(boolean)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<time.Month: org.jfree.data.time.Month parseMonth(java.lang.String)>" -> "<org.jfree.data.time.Month: org.jfree.data.time.Year evaluateAsYear(java.lang.String)>";
"<DialCap: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<xy.XYLineAndShapeRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<axis.PeriodAxis: org.jfree.chart.axis.AxisState drawTickLabels(int,java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<PiePlot: void drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<renderer.xy.StandardXYItemRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<annotations.XYTextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<dial.DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<BarChartDemo1: org.jfree.data.category.CategoryDataset createDataset()>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<StandardPieToolTipGenerator: void <init>(java.lang.String)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>(java.lang.String,java.util.Locale)>";
"<category.AbstractCategoryItemRenderer: void removeAnnotations()>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYLineAndShapeRenderer: void setSeriesLinesVisible(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.XYDotRenderer: void setLegendShape(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.StackedXYAreaRenderer2: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: double[] getStackValues(org.jfree.data.xy.TableXYDataset,int,int)>";
"<plot.CompassPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<renderer.xy.XYStepRenderer: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,double)>";
"<ColorBlock: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.dial.DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardPieURLGenerator: void <init>()>";
"<LevelRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<xy.XYBubbleRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<plot.dial.ArcDialFrame: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<axis.TickType: void <clinit>()>" -> "<org.jfree.chart.axis.TickType: void <init>(java.lang.String)>";
"<BoxAndWhiskerToolTipGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: boolean equals(java.lang.Object)>";
"<category.BoxAndWhiskerRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<annotations.CategoryLineAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<LogarithmicAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<CombinedRangeXYPlot: void <init>()>" -> "<org.jfree.chart.plot.CombinedRangeXYPlot: void <init>(org.jfree.chart.axis.ValueAxis)>";
"<editor.DefaultAxisEditor: void <init>(org.jfree.chart.axis.Axis)>" -> "<org.jfree.chart.ui.FontDisplayField: void <init>(java.awt.Font)>";
"<title.Title: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.block.AbstractBlock: boolean equals(java.lang.Object)>";
"<ServletUtilities: java.lang.String saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.ChartUtilities: void saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>";
"<Week: org.jfree.data.time.Week parseWeek(java.lang.String)>" -> "<org.jfree.data.time.Week: int stringToWeek(java.lang.String)>";
"<plot.CombinedDomainXYPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<AxisLabelEntity: void <init>(org.jfree.chart.axis.Axis,java.awt.Shape,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<CombinedDomainCategoryPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<renderer.xy.XYBlockRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<axis.PeriodAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<renderer.xy.DeviationRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<TimeSeries: org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries)>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable,java.lang.Class)>";
"<XYLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<FlowArrangement: org.jfree.chart.util.Size2D arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<JThermometer: void <init>()>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<XYBarDataset: void setBarWidth(double)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<CombinedDataset: java.lang.Number getStartY(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<CombinedDomainXYPlot: void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)>" -> "<org.jfree.chart.plot.XYPlot: void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<renderer.xy.StackedXYBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StackedXYBarRenderer: java.lang.Class class$(java.lang.String)>";
"<util.ShapeList: int hashCode()>" -> "<org.jfree.chart.util.AbstractObjectList: int hashCode()>";
"<title.TextTitle: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<XYAreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<category.CategoryStepRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.CategoryStepRenderer: void <init>(boolean)>";
"<XYStepRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.XYStepRenderer: void drawLine(java.awt.Graphics2D,java.awt.geom.Line2D,double,double,double,double)>";
"<xy.XYSeries: boolean equals(java.lang.Object)>" -> "<org.jfree.data.general.Series: boolean equals(java.lang.Object)>";
"<CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions replaceLeftPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)>" -> "<org.jfree.chart.axis.CategoryLabelPositions: void <init>(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)>";
"<ThermometerPlot: void <init>()>" -> "<org.jfree.data.general.DefaultValueDataset: void <init>()>";
"<xy.XYBarRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<xy.YIntervalSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>" -> "<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>";
"<labels.StandardXYZToolTipGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardXYZToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)>";
"<imagemap.ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>" -> "<org.jfree.chart.util.StringUtilities: java.lang.String getLineSeparator()>";
"<Quarter: org.jfree.data.time.Year getYear()>" -> "<org.jfree.data.time.Year: void <init>(int)>";
"<axis.DateAxis: void autoAdjustRange()>" -> "<org.jfree.data.time.DateRange: void <init>(java.util.Date,java.util.Date)>";
"<plot.CategoryPlot: org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int)>" -> "<org.jfree.chart.util.RectangleEdge: org.jfree.chart.util.RectangleEdge opposite(org.jfree.chart.util.RectangleEdge)>";
"<xy.XYBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: java.awt.geom.Point2D calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)>";
"<ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator: void <init>()>";
"<xy.XYIntervalSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,double,float,float)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)>";
"<xy.XYLineAndShapeRenderer: void setBaseShapesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<MeterInterval: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<StackedXYAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.category.ScatterRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<axis.AxisLocation: void <clinit>()>" -> "<org.jfree.chart.axis.AxisLocation: void <init>(java.lang.String)>";
"<renderer.xy.StackedXYAreaRenderer2: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: double[] getStackValues(org.jfree.data.xy.TableXYDataset,int,int)>";
"<urls.StandardPieURLGenerator: void <init>(java.lang.String,java.lang.String)>" -> "<org.jfree.chart.urls.StandardPieURLGenerator: void <init>(java.lang.String,java.lang.String,java.lang.String)>";
"<SegmentedTimeline: int access$400(org.jfree.chart.axis.SegmentedTimeline,org.jfree.chart.axis.SegmentedTimeline$Segment)>" -> "<org.jfree.chart.axis.SegmentedTimeline: int binarySearchExceptionSegments(org.jfree.chart.axis.SegmentedTimeline$Segment)>";
"<SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.lang.Class class$(java.lang.String)>";
"<AbstractSeriesDataset: void <init>()>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<PiePlot: void drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(org.jfree.chart.util.UnitType,double,double,double,double)>";
"<renderer.AbstractRenderer: void <init>()>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<CSV: java.util.List extractColumnKeys(java.lang.String)>" -> "<org.jfree.data.io.CSV: java.lang.String removeStringDelimiters(java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<ValueAxis: void setNegativeArrowVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<plot.CombinedRangeXYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.XYPlot: java.lang.Object clone()>";
"<statistics.BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List,boolean)>" -> "<org.jfree.data.statistics.Statistics: double calculateMean(java.util.Collection,boolean)>";
"<demo.PieChartDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.chart.demo.PieChartDemo1: org.jfree.data.general.PieDataset createDataset()>";
"<TextTitle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<WaferMapRenderer: void <init>(int,int)>" -> "<org.jfree.chart.renderer.WaferMapRenderer: void <init>(java.lang.Integer,java.lang.Integer)>";
"<BarRenderer3D: void <init>(double,double)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<plot.PiePlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<time.Week: org.jfree.data.time.Week parseWeek(java.lang.String)>" -> "<org.jfree.data.time.Week: int findSeparator(java.lang.String)>";
"<renderer.xy.StackedXYAreaRenderer2: void setRoundXCoordinates(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<ColorBlock: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<time.Second: org.jfree.data.time.Minute getMinute()>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<DateAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<ChartFactory: org.jfree.chart.JFreeChart createHistogram(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: void <init>()>";
"<DefaultBoxAndWhiskerCategoryDataset: void removeRow(java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset: void updateBounds()>";
"<axis.CategoryAxis: void setUpperMargin(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<NumberAxis: void setRangeType(org.jfree.data.RangeType)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<labels.StandardXYItemLabelGenerator: java.lang.Object clone()>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: java.lang.Object clone()>";
"<renderer.xy.StackedXYAreaRenderer2: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer2: boolean equals(java.lang.Object)>";
"<annotations.XYShapeAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<xy.XYAreaRenderer2: void setLegendArea(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartUtilities: void writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,boolean,int)>" -> "<org.jfree.chart.ChartUtilities: void writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,boolean,int)>";
"<renderer.xy.YIntervalRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<demo.TimeSeriesChartDemo1: org.jfree.data.xy.XYDataset createDataset()>" -> "<org.jfree.data.time.Month: void <init>(int,int)>";
"<xy.XYDifferenceRenderer: void drawItemPass1(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<CombinedDataset: java.lang.Number getOpen(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<XYLineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<TimePeriodValuesCollection: void <init>(org.jfree.data.time.TimePeriodValues)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<axis.SymbolAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<LogarithmicAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<axis.DateAxis: java.util.List refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.DateTick: void <init>(java.util.Date,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<OHLCSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.lang.Class class$(java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerXYDataset,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<StandardXYSeriesLabelGenerator: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.String)>";
"<JFreeChart: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.util.Align: void align(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,int)>";
"<MovingAverage: org.jfree.data.time.TimeSeries createMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int,int)>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable,java.lang.Class)>";
"<xy.DefaultWindDataset: void <init>(java.util.List,java.lang.Object[][][])>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<dial.DialValueIndicator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<DateTickUnit: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.TickUnit: boolean equals(java.lang.Object)>";
"<XYAreaRenderer2: void setOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYTitleAnnotationDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.util.ApplicationFrame: void <init>(java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPolarChart(java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<ServletUtilities: void sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse)>" -> "<org.jfree.chart.servlet.ServletUtilities: void sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse,java.lang.String)>";
"<XYTitleAnnotation: void <init>(double,double,org.jfree.chart.title.Title)>" -> "<org.jfree.experimental.chart.annotations.XYTitleAnnotation: void <init>(double,double,org.jfree.chart.title.Title,org.jfree.chart.util.RectangleAnchor)>";
"<renderer.xy.XYErrorRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<plot.CombinedRangeXYPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>" -> "<org.jfree.chart.plot.XYPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<util.RefineryUtilities: void positionDialogRelativeToParent(java.awt.Dialog,double,double)>" -> "<org.jfree.chart.util.RefineryUtilities: java.awt.Rectangle getMaximumWindowBounds()>";
"<CategoryItemEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<CategoryPlot: org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<plot.CombinedRangeXYPlot: void <init>()>" -> "<org.jfree.chart.axis.NumberAxis: void <init>()>";
"<Quarter: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Quarter: void <init>(int,int)>";
"<category.DefaultIntervalCategoryDataset: java.lang.Number getValue(java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<renderer.category.StatisticalLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<xy.XYLineAndShapeRenderer: void setUseFillPaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,java.util.Locale,boolean,boolean)>" -> "<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>";
"<time.Year: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<ServletUtilities: java.lang.String saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.ChartUtilities: void saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>";
"<block.BorderArrangement: org.jfree.chart.util.Size2D arrangeRR(org.jfree.chart.block.BlockContainer,org.jfree.data.Range,org.jfree.data.Range,java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<time.TimeSeries: org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries)>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable,java.lang.Class)>";
"<CombinedDomainXYPlot: void <init>()>" -> "<org.jfree.chart.axis.NumberAxis: void <init>()>";
"<DialBackground: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.MeterPlot: void setDataset(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<renderer.AbstractRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.xy.CyclicXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>";
"<entity.LegendItemEntity: java.lang.Object clone()>" -> "<org.jfree.chart.entity.ChartEntity: java.lang.Object clone()>";
"<TextBox: void draw(java.awt.Graphics2D,float,float,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Rectangle2D createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)>";
"<StandardDialScale: void setStartAngle(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DefaultNumberAxisEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultNumberAxisEditor: void attemptGridStrokeSelection()>";
"<plot.dial.ArcDialFrame: void setStartAngle(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<dial.StandardDialRange: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<CategoryLineAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<ChartFactory: org.jfree.chart.JFreeChart createScatterPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>()>";
"<LegendTitle: void setItemLabelPadding(org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<renderer.xy.XYAreaRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<MinMaxCategoryRenderer: void setGroupStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CombinedDomainCategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleEdge: double coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>";
"<axis.Axis: void setTickLabelsVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<KeyedObject: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<annotations.XYImageAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<dial.ArcDialFrame: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<StandardCategorySeriesLabelGenerator: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.String)>";
"<plot.Marker: void setLabelTextAnchor(org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<axis.SubCategoryAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<RefineryUtilities: void centerDialogInParent(java.awt.Dialog)>" -> "<org.jfree.chart.util.RefineryUtilities: void positionDialogRelativeToParent(java.awt.Dialog,double,double)>";
"<category.StackedBarRenderer3D: void drawStackHorizontal(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer3D: java.awt.Shape[] createHorizontalBlock(double,double,double,double,boolean)>";
"<StackedBarRenderer3D: void <init>(boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: void <init>()>";
"<PeriodAxis: void <init>(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>" -> "<org.jfree.chart.axis.PeriodAxisLabelInfo: void <init>(java.lang.Class,java.text.DateFormat)>";
"<dial.StandardDialFrame: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<renderer.xy.StackedXYAreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: java.lang.Object clone()>";
"<ChartFactory: org.jfree.chart.JFreeChart createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>(java.util.Locale)>";
"<util.BooleanList: void <init>()>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>()>";
"<Plot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<XYAreaRenderer2: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<FastScatterPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<DateAxis: void setMinimumDate(java.util.Date)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<util.ShapeList: java.lang.Object clone()>" -> "<org.jfree.chart.util.AbstractObjectList: java.lang.Object clone()>";
"<general.DatasetUtilities: org.jfree.data.general.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,java.lang.Comparable)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.general.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)>";
"<axis.PeriodAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)>" -> "<org.jfree.chart.plot.RingPlot: void <init>(org.jfree.data.general.PieDataset)>";
"<CombinedDataset: java.lang.Number getX(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<ChartPanel: void mouseReleased(java.awt.event.MouseEvent)>" -> "<org.jfree.chart.ChartPanel: void drawZoomRectangle(java.awt.Graphics2D)>";
"<plot.CategoryPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<GridArrangement: org.jfree.chart.util.Size2D arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>()>";
"<PaintScaleLegend: void setAxis(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<jdbc.JDBCCategoryDataset: void <init>(java.sql.Connection)>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<ChartUtilities: void writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int)>" -> "<org.jfree.chart.ChartUtilities: void writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>";
"<axis.SubCategoryAxis: void setSubLabelPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<XYDifferenceRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<jdbc.JDBCCategoryDataset: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<category.StatisticalBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<xy.XYSeries: java.lang.Object clone()>" -> "<org.jfree.data.general.Series: java.lang.Object clone()>";
"<LineAndShapeRenderer: void setBaseShapesFilled(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<MultiplePiePlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<XIntervalSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>" -> "<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>";
"<time.DynamicTimeSeriesCollection: void addValue(int,int,float)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence: void <init>(org.jfree.data.time.DynamicTimeSeriesCollection,int)>";
"<plot.MeterInterval: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<ChartRenderingInfo: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<StrokeChooserPanel: void <init>(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])>" -> "<org.jfree.chart.ui.StrokeChooserPanel$1: void <init>(org.jfree.chart.ui.StrokeChooserPanel)>";
"<CategoryAxis3D: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<plot.PiePlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<renderer.WaferMapRenderer: void makePaintIndex()>" -> "<org.jfree.chart.renderer.WaferMapRenderer: void makeValueIndex(java.lang.Number,java.lang.Number,java.util.Set)>";
"<DateAxis: void setMaximumDate(java.util.Date)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<plot.XYPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.XYPlot: java.util.List getDatasetsMappedToDomainAxis(java.lang.Integer)>";
"<SpiderWebPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<xy.XYLine3DRenderer: void drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)>";
"<BooleanList: int hashCode()>" -> "<org.jfree.chart.util.AbstractObjectList: int hashCode()>";
"<xy.XYBarRenderer: void setDrawBarOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartPanel: void mousePressed(java.awt.event.MouseEvent)>" -> "<org.jfree.chart.ChartPanel: java.awt.Point getPointInRectangle(int,int,java.awt.geom.Rectangle2D)>";
"<plot.PiePlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<xy.XYBlockRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<xy.XYSeries: void add(org.jfree.data.xy.XYDataItem,boolean)>" -> "<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>";
"<renderer.AbstractRenderer: void <init>()>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)>";
"<plot.CategoryPlot: void setDataset(int,org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<LegendTitle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<ValueAxis: void setAutoRange(boolean,boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<LineBorder: void <init>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<xy.XYBoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.Outlier: void <init>(double,double,double)>";
"<time.Day: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Day: void <init>(java.util.Date,java.util.TimeZone)>";
"<StackedBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<CategoryAxis: void setCategoryLabelPositionOffset(int)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<TextBox: void <init>(java.lang.String)>" -> "<org.jfree.chart.text.TextBox: void <init>(org.jfree.chart.text.TextBlock)>";
"<SpiderWebPlot: void setDataset(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<block.LabelBlock: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.entity.StandardEntityCollection: void <init>()>";
"<XYPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<Year: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<StackedAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.StackedAreaRenderer: double[] averageStackValues(double[],double[])>";
"<MeterPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.dial.DialTextAnnotation: void setLabel(java.lang.String)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<category.ScatterRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)>";
"<plot.SpiderWebPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<YIntervalSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<PaintList: void <init>()>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>()>";
"<CompassPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<renderer.xy.XYBubbleRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<DefaultKeyedValueDataset: void <init>(org.jfree.data.KeyedValue)>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<LabelBlock: void <init>(java.lang.String)>" -> "<org.jfree.chart.block.LabelBlock: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<xy.XYBubbleRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<BubbleXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat)>";
"<plot.dial.StandardDialScale: void setTickLabelOffset(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<block.EmptyBlock: void <init>(double,double)>" -> "<org.jfree.chart.block.AbstractBlock: void <init>()>";
"<time.DynamicTimeSeriesCollection: void <init>(int,int,java.util.TimeZone)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection: void <init>(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>";
"<axis.CyclicNumberAxis: void setFixedAutoRange(double)>" -> "<org.jfree.chart.axis.NumberAxis: void setFixedAutoRange(double)>";
"<axis.Axis: void setLabel(java.lang.String)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ChartUtilities: void saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.ChartUtilities: void writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>";
"<LogarithmicAxis: void zoomRange(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<util.ObjectUtilities: java.lang.Object loadAndInstantiate(java.lang.String,java.lang.Class)>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.ClassLoader getClassLoader(java.lang.Class)>";
"<encoders.EncoderUtil: byte[] encode(java.awt.image.BufferedImage,java.lang.String,float)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,float)>";
"<QuarterDateFormat: void <init>()>" -> "<org.jfree.chart.axis.QuarterDateFormat: void <init>(java.util.TimeZone)>";
"<dial.ArcDialFrame: void <init>()>" -> "<org.jfree.chart.plot.dial.ArcDialFrame: void <init>(double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createGanttChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.IntervalCategoryDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<axis.NumberAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.ValueAxis: void <init>(java.lang.String,org.jfree.chart.axis.TickUnitSource)>";
"<annotations.XYShapeAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<category.GanttRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.IntervalBarRenderer: boolean equals(java.lang.Object)>";
"<time.TimeSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.time.TimeSeries: java.lang.Class class$(java.lang.String)>";
"<CombinedDataset: java.lang.Number getHigh(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<TextFragment: org.jfree.chart.util.Size2D calculateDimensions(java.awt.Graphics2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<xy.StackedXYAreaRenderer2: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<LogAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.ValueAxis: void <init>(java.lang.String,org.jfree.chart.axis.TickUnitSource)>";
"<CategoryPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<StandardDialScale: void setTickLabelOffset(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<SubCategoryAxis: org.jfree.chart.axis.AxisState drawSubCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<renderer.xy.XYItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.RendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<dial.DialCap: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<plot.Plot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<TextFragment: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>" -> "<org.jfree.chart.text.TextFragment: void <init>(java.lang.String,java.awt.Font,java.awt.Paint,float)>";
"<XIntervalDataItem: void <init>(double,double,double,double)>" -> "<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>";
"<time.TimeTableXYDataset: void <init>()>" -> "<org.jfree.data.time.TimeTableXYDataset: void <init>(java.util.TimeZone,java.util.Locale)>";
"<renderer.xy.XYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<XYPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<MeterPlot: void setDataset(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<time.ohlc.OHLCSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>" -> "<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>";
"<category.BarRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>";
"<title.PaintScaleLegend: void setAxisOffset(double)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<axis.Axis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<xml.CategoryDatasetHandler: void <init>()>" -> "<org.jfree.data.xml.RootHandler: void <init>()>";
"<axis.DateTickUnit: int getCalendarField()>" -> "<org.jfree.chart.axis.DateTickUnit: int getCalendarField(int)>";
"<DatasetUtilities: org.jfree.data.general.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<CategoryPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<dial.StandardDialFrame: void setStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<xy.XYDataItem: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<jdbc.JDBCPieDataset: void <init>(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCPieDataset: void <init>(java.sql.Connection)>";
"<dial.ArcDialFrame: void setOuterRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<renderer.category.BoxAndWhiskerRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<axis.ValueAxis: void setFixedAutoRange(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<XYDifferenceRenderer: void <init>(java.awt.Paint,java.awt.Paint,boolean)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<renderer.xy.AbstractXYItemRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<plot.dial.StandardDialRange: void setBounds(double,double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<plot.CombinedRangeXYPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<JDBCCategoryDataset: void executeQuery(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCCategoryDataset: void removeRow(int)>";
"<MultiplePiePlot: void <init>()>" -> "<org.jfree.chart.plot.MultiplePiePlot: void <init>(org.jfree.data.category.CategoryDataset)>";
"<axis.DateAxis: org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits()>" -> "<org.jfree.chart.axis.DateAxis: org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits(java.util.TimeZone)>";
"<XYPlot: boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.RendererUtilities: int[] findLiveItems(org.jfree.data.xy.XYDataset,int,double,double)>";
"<axis.NumberAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.AxisState drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>";
"<AbstractDialLayer: void notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Class class$(java.lang.String)>";
"<block.ColumnArrangement: org.jfree.chart.util.Size2D arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>()>";
"<renderer.xy.XYBlockRenderer: void setBlockHeight(double)>" -> "<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>()>";
"<ModuloAxis: void <init>(java.lang.String,org.jfree.data.Range)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<labels.MultipleXYSeriesLabelGenerator: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<plot.PlotRenderingInfo: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<axis.ValueAxis: org.jfree.chart.axis.AxisState drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<time.Month: void <init>(int,org.jfree.data.time.Year)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardCategoryURLGenerator: void <init>()>";
"<labels.AbstractCategoryItemLabelGenerator: java.lang.Object[] createItemArray(org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.data.DataUtilities: double calculateColumnTotal(org.jfree.data.Values2D,int)>";
"<ChartUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)>" -> "<org.jfree.chart.imagemap.StandardURLTagFragmentGenerator: void <init>()>";
"<BubbleXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<ChartUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)>" -> "<org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator: void <init>()>";
"<needle.PinNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<time.FixedMillisecond: void <init>()>" -> "<org.jfree.data.time.FixedMillisecond: void <init>(java.util.Date)>";
"<axis.ValueAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<general.CombinedDataset: java.lang.Number getStartY(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<jdbc.JDBCCategoryDataset: void executeQuery(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCCategoryDataset: void removeRow(int)>";
"<TimeSeriesChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.util.ApplicationFrame: void <init>(java.lang.String)>";
"<XYSeries: org.jfree.data.xy.XYDataItem addOrUpdate(java.lang.Number,java.lang.Number)>" -> "<org.jfree.data.xy.XYDataItem: void <init>(java.lang.Number,java.lang.Number)>";
"<PeriodAxis: org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)>" -> "<org.jfree.chart.axis.PeriodAxis: java.lang.Class class$(java.lang.String)>";
"<plot.MultiplePiePlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<ModuloAxis: double trans(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<ThermometerPlot: void setAxisRange()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<CyclicNumberAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>";
"<Minute: void <init>(int,int,int,int,int)>" -> "<org.jfree.data.time.Day: void <init>(int,int,int)>";
"<time.ohlc.OHLCSeries: void add(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>" -> "<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>";
"<plot.CombinedDomainXYPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>()>";
"<dial.StandardDialFrame: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<time.Millisecond: void <init>()>" -> "<org.jfree.data.time.Millisecond: void <init>(java.util.Date)>";
"<axis.ValueTick: void <init>(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>" -> "<org.jfree.chart.axis.Tick: void <init>(java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<ThermometerPlot: void setDisplayRange(int,double,double)>" -> "<org.jfree.chart.plot.ThermometerPlot: boolean isValidNumber(double)>";
"<BarChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.demo.BarChartDemo1: org.jfree.data.category.CategoryDataset createDataset()>";
"<plot.CategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.axis.ValueAxis: java.lang.Object clone()>";
"<StandardXYSeriesLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardXYSeriesLabelGenerator: void <init>(java.lang.String)>";
"<CyclicNumberAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<LegendTitle: void setLegendItemGraphicPadding(org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<ChartFactory: org.jfree.chart.JFreeChart createHistogram(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<axis.PeriodAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<annotations.XYPolygonAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<xy.XYSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<StandardXYItemRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<MeterNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>(java.awt.Paint,java.awt.Paint,java.awt.Paint)>";
"<XYBarRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.AbstractRenderer: java.lang.Object clone()>";
"<DynamicTimeSeriesCollection: void <init>(int,int,org.jfree.data.time.RegularTimePeriod)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection: void <init>(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>";
"<time.TimePeriodValuesCollection: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<LongNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<CategoryLineAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<TextBox: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<DefaultTitleEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultTitleEditor: void attemptModifyShowTitle()>";
"<StandardDialScale: void setTickLabelFont(java.awt.Font)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<dial.DialBackground: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<renderer.xy.XYBarRenderer: void setUseYInterval(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYTitleAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.Object)>";
"<ChartEntity: java.lang.String getShapeCoords()>" -> "<org.jfree.chart.entity.ChartEntity: java.lang.String getPolyCoords(java.awt.Shape)>";
"<LogAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<DefaultMultiValueCategoryDataset: void <init>()>" -> "<org.jfree.data.KeyedObjects2D: void <init>()>";
"<util.GradientPaintTransformType: void <clinit>()>" -> "<org.jfree.chart.util.GradientPaintTransformType: void <init>(java.lang.String)>";
"<category.BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawMultipleEllipse(java.awt.geom.Point2D,double,double,java.awt.Graphics2D)>";
"<renderer.xy.AbstractXYItemRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<axis.ExtendedCategoryAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<XYBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<TextBlockAnchor: void <clinit>()>" -> "<org.jfree.chart.text.TextBlockAnchor: void <init>(java.lang.String)>";
"<block.LabelBlock: void setFont(java.awt.Font)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<OHLCItem: void <init>(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>" -> "<org.jfree.data.time.ohlc.OHLC: void <init>(double,double,double,double)>";
"<category.BarRenderer3D: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<LineBorder: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)>" -> "<org.jfree.chart.text.TextUtilities: float[] deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)>";
"<BarRenderer: void setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createStandardTickUnits(java.util.Locale)>" -> "<org.jfree.chart.axis.TickUnits: void <init>()>";
"<plot.CategoryPlot: org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>";
"<block.RectangleConstraint: void <init>(org.jfree.data.Range,double)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<general.CombinedDataset: void <init>(org.jfree.data.general.SeriesDataset[])>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<xy.StandardXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<IntervalBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<AbstractRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<axis.DateAxis: void selectHorizontalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.DateAxis: double estimateMaximumTickLabelWidth(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)>";
"<plot.DefaultDrawingSupplier: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<MinMaxCategoryRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<SpiderWebPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<title.Title: void addChangeListener(org.jfree.chart.event.TitleChangeListener)>" -> "<org.jfree.chart.title.Title: java.lang.Class class$(java.lang.String)>";
"<renderer.DefaultPolarItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.AbstractRenderer: boolean equals(java.lang.Object)>";
"<ImageEncoderFactory: void <clinit>()>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: void init()>";
"<general.DatasetUtilities: org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.String,java.lang.String,double[][])>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<xy.XYDifferenceRenderer: void setRoundXCoordinates(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DateAxis: java.util.Date previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)>" -> "<org.jfree.chart.axis.DateAxis: java.util.Date calculateDateForPosition(org.jfree.data.time.RegularTimePeriod,org.jfree.chart.axis.DateTickMarkPosition)>";
"<TextTitle: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.category.AbstractCategoryItemRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>";
"<axis.PeriodAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<plot.dial.DialTextAnnotation: void setFont(java.awt.Font)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DialValueIndicator: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<BorderArrangement: org.jfree.chart.util.Size2D arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,double)>";
"<WaferMapRenderer: org.jfree.chart.LegendItemCollection getLegendCollection()>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<DefaultAxisEditor: void <init>(org.jfree.chart.axis.Axis)>" -> "<org.jfree.chart.ui.FontDisplayField: void <init>(java.awt.Font)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<time.Week: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Week: void <init>(int,int)>";
"<ThermometerPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.ThermometerPlot: boolean equal(double[][],double[][])>";
"<CategoryAnchor: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryAnchor: void <init>(java.lang.String)>";
"<plot.CategoryPlot: java.util.Map drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisCollection: void <init>()>";
"<CombinedDomainCategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>" -> "<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<plot.CompassPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<servlet.DisplayChart: void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>" -> "<org.jfree.chart.servlet.ServletUtilities: void sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse)>";
"<BarChartDemo1: void main(java.lang.String[])>" -> "<org.jfree.chart.demo.BarChartDemo1: void <init>(java.lang.String)>";
"<ValueAxis: void setUpperMargin(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ArcDialFrame: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<annotations.XYPolygonAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<editor.DefaultAxisEditor: org.jfree.chart.util.RectangleInsets getLabelInsets()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<XYLineAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<CombinedDataset: void add(org.jfree.data.general.SeriesDataset)>" -> "<org.jfree.data.general.CombinedDataset: void fastAdd(org.jfree.data.general.SeriesDataset)>";
"<category.AbstractCategoryItemRenderer: void <init>()>" -> "<org.jfree.chart.labels.StandardCategorySeriesLabelGenerator: void <init>()>";
"<HighLowRenderer: void setCloseTickPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.PiePlot3D: void drawSide(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Arc2D,java.awt.geom.Area,java.awt.geom.Area,java.awt.Paint,java.awt.Paint,java.awt.Stroke,boolean,boolean)>" -> "<org.jfree.chart.plot.PiePlot3D: boolean isAngleAtBack(double)>";
"<general.CombinedDataset: java.lang.Number getVolume(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<editor.DefaultPlotEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultPlotEditor: void attemptOutlineStrokeSelection()>";
"<renderer.xy.XYLineAndShapeRenderer: void drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)>";
"<jdbc.JDBCPieDataset: void executeQuery(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCPieDataset: void setValue(java.lang.Comparable,double)>";
"<DefaultKeyedValues: void sortByValues(org.jfree.chart.util.SortOrder)>" -> "<org.jfree.data.DefaultKeyedValue: void <init>(java.lang.Comparable,java.lang.Number)>";
"<MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer$1: void <init>(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,java.awt.Paint,java.awt.Paint,int,int)>";
"<Axis: void setTickMarksVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<xy.XYBlockRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<xy.AbstractXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<plot.dial.DialValueIndicator: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<AbstractRenderer: void <init>()>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<LegendItem: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<TimePeriodValues: void delete(int,int)>" -> "<org.jfree.data.time.TimePeriodValues: void recalculateBounds()>";
"<BarRenderer3D: void <init>()>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: void <init>(double,double)>";
"<labels.StandardXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.DateFormat)>";
"<Axis: void setLabelURL(java.lang.String)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<StandardPieToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractPieItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<title.DateTitle: void <init>()>" -> "<org.jfree.chart.title.DateTitle: void <init>(int)>";
"<axis.ModuloAxis: double trans(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<labels.StandardPieSectionLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractPieItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<TextBox: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<renderer.category.BarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: float[] deriveRotationAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)>";
"<xy.XYBarDataset: void setBarWidth(double)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<statistics.SimpleHistogramBin: void <init>(double,double)>" -> "<org.jfree.data.statistics.SimpleHistogramBin: void <init>(double,double,boolean,boolean)>";
"<ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>";
"<annotations.XYLineAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<AbstractBlock: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<plot.dial.StandardDialScale: void setTickRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<CompassPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.RendererUtilities: int[] findLiveItems(org.jfree.data.xy.XYDataset,int,double,double)>" -> "<org.jfree.chart.renderer.RendererUtilities: int findLiveItemsUpperBound(org.jfree.data.xy.XYDataset,int,double,double)>";
"<DatasetUtilities: org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double,int)>";
"<plot.dial.DialPlot: void setDataset(int,org.jfree.data.general.ValueDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<axis.NumberAxis: void setAutoRangeStickyZero(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<axis.SubCategoryAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.CategoryAxis: boolean equals(java.lang.Object)>";
"<plot.CategoryMarker: void <init>(java.lang.Comparable)>" -> "<org.jfree.chart.plot.CategoryMarker: void <init>(java.lang.Comparable,java.awt.Paint,java.awt.Stroke)>";
"<ChartFactory: org.jfree.chart.JFreeChart createGanttChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.IntervalCategoryDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<Year: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Year: void <init>(java.util.Date,java.util.TimeZone)>";
"<renderer.category.ScatterRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<annotations.XYPointerAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.lang.Class class$(java.lang.String)>";
"<TimePeriodValues: void add(org.jfree.data.time.TimePeriod,java.lang.Number)>" -> "<org.jfree.data.time.TimePeriodValues: void add(org.jfree.data.time.TimePeriodValue)>";
"<LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<axis.CategoryAxis: void setMaximumCategoryLabelWidthRatio(float)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<util.RefineryUtilities: javax.swing.JPanel createTablePanel(javax.swing.table.TableModel)>" -> "<org.jfree.chart.util.NumberCellRenderer: void <init>()>";
"<StandardDialRange: void setUpperBound(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<MinMaxCategoryRenderer: void setMinIcon(javax.swing.Icon)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYTitleAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<renderer.category.MinMaxCategoryRenderer: void setDrawLines(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<TextAnchor: void <clinit>()>" -> "<org.jfree.chart.text.TextAnchor: void <init>(java.lang.String)>";
"<CategoryDatasetHandler: void <init>()>" -> "<org.jfree.data.xml.RootHandler: void <init>()>";
"<category.LineRenderer3D: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<time.Quarter: void <init>(int,int)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<title.CompositeTitle: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<demo.BarChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.util.ApplicationFrame: void <init>(java.lang.String)>";
"<axis.SegmentedTimeline: long toMillisecond(long)>" -> "<org.jfree.chart.axis.SegmentedTimeline$Segment: void <init>(org.jfree.chart.axis.SegmentedTimeline,long)>";
"<CombinedDataset: org.jfree.data.general.SeriesDataset getParent()>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<plot.XYPlot: org.jfree.chart.util.RectangleEdge getDomainAxisEdge()>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<XYTitleAnnotationDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.experimental.chart.demo.XYTitleAnnotationDemo1: org.jfree.data.xy.XYDataset createDataset()>";
"<renderer.xy.XYBlockRenderer: void setBlockWidth(double)>" -> "<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>";
"<DateAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.DateTick: void <init>(java.util.Date,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<Plot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>" -> "<org.jfree.chart.plot.Plot: java.lang.Class class$(java.lang.String)>";
"<dial.ArcDialFrame: java.awt.Shape getWindow(java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<BoxAndWhiskerRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<MinMaxCategoryRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<text.TextFragment: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>" -> "<org.jfree.chart.text.TextFragment: void <init>(java.lang.String,java.awt.Font,java.awt.Paint,float)>";
"<plot.CombinedRangeXYPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<time.Hour: void <init>(int,org.jfree.data.time.Day)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<renderer.category.WaterfallBarRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<DialBackground: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<axis.SymbolAxis: void setGridBandAlternatePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<needle.PinNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<UnitType: void <clinit>()>" -> "<org.jfree.chart.util.UnitType: void <init>(java.lang.String)>";
"<editor.DefaultTitleEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultTitleEditor: void attemptModifyShowTitle()>";
"<Hour: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Hour: void <init>(java.util.Date,java.util.TimeZone)>";
"<XYBoxAndWhiskerRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void <init>(double)>";
"<ValueAxis: void setAutoRangeMinimumSize(double,boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<entity.CategoryLabelEntity: void <init>(java.lang.Comparable,java.awt.Shape,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.entity.TickLabelEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<dial.DialCap: void setFillPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<AbstractBlock: org.jfree.chart.block.RectangleConstraint toContentConstraint(org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.block.AbstractBlock: org.jfree.data.Range trimToContentWidth(org.jfree.data.Range)>";
"<xy.XYBarRenderer: void <init>(double)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<XYSplineAndShapeRenderer: void drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer: void solveTridiag(float[],float[],float[],float[],int)>";
"<renderer.category.LineAndShapeRenderer: void setSeriesShapesVisible(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<annotations.XYPolygonAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<statistics.BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List)>" -> "<org.jfree.data.statistics.BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List,boolean)>";
"<MultiplePiePlot: void <init>(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font)>";
"<AreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<JDBCXYDataset: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCXYDataset: void <init>()>";
"<ObjectUtilities: java.lang.Object clone(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<servlet.ServletUtilities: java.lang.String saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.ChartUtilities: void saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>";
"<servlet.ServletUtilities: java.lang.String saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.servlet.ServletUtilities: void createTempDir()>";
"<xy.XYSplineAndShapeRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>";
"<renderer.category.StackedAreaRenderer: void <init>(boolean)>" -> "<org.jfree.chart.renderer.category.AreaRenderer: void <init>()>";
"<SymbolAxis: void drawGridBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,java.util.List)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<HistogramDataset: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<plot.PolarPlot: void render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.xy.XYDataset)>";
"<category.LevelRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<axis.ValueAxis: void setRangeAboutValue(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis3D: void <init>(java.lang.String)>";
"<CategoryPointerAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<Plot: void <clinit>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<renderer.category.GanttRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<time.MovingAverage: org.jfree.data.time.TimeSeries createMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int,int)>" -> "<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>";
"<xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.AbstractRenderer: boolean equals(java.lang.Object)>";
"<xy.CandlestickRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<CategoryStepRenderer: void <init>(boolean)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<Month: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Month: void <init>(java.util.Date,java.util.TimeZone)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer: void <init>()>";
"<statistics.DefaultBoxAndWhiskerCategoryDataset: void add(java.util.List,java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.statistics.BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List)>";
"<renderer.category.StackedBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean equals(java.lang.Object)>";
"<Week: org.jfree.data.time.Year evaluateAsYear(java.lang.String)>" -> "<org.jfree.data.time.Year: org.jfree.data.time.Year parseYear(java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<XYBlockRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<plot.DefaultDrawingSupplier: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<axis.ValueAxis: void setRange(org.jfree.data.Range)>" -> "<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range,boolean,boolean)>";
"<JDBCPieDataset: void <init>(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCPieDataset: void <init>(java.sql.Connection)>";
"<SegmentedTimeline: void addException(long,long)>" -> "<org.jfree.chart.axis.SegmentedTimeline$SegmentRange: void <init>(org.jfree.chart.axis.SegmentedTimeline,long,long)>";
"<GanttRenderer: void setCompletePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.CompassPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<axis.Axis: void setTickMarkPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<DialPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<DialBackground: void <init>()>" -> "<org.jfree.chart.plot.dial.DialBackground: void <init>(java.awt.Paint)>";
"<DefaultPolarItemRenderer: void <init>()>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<servlet.ServletUtilities: java.lang.String searchReplace(java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.servlet.ServletUtilities: java.lang.String searchReplace(java.lang.String,java.lang.String,java.lang.String)>";
"<FastScatterPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<util.RectangleAnchor: void <clinit>()>" -> "<org.jfree.chart.util.RectangleAnchor: void <init>(java.lang.String)>";
"<block.RectangleConstraint: org.jfree.chart.util.Size2D calculateConstrainedSize(org.jfree.chart.util.Size2D)>" -> "<org.jfree.chart.util.Size2D: void <init>()>";
"<axis.DateAxis: void <clinit>()>" -> "<org.jfree.chart.axis.DateAxis$DefaultTimeline: void <init>(org.jfree.chart.axis.DateAxis$1)>";
"<RangeType: void <clinit>()>" -> "<org.jfree.data.RangeType: void <init>(java.lang.String)>";
"<XYSeriesCollection: void <init>(org.jfree.data.xy.XYSeries)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<XYAreaRenderer2: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<time.Millisecond: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Millisecond: void <init>(java.util.Date,java.util.TimeZone)>";
"<plot.PiePlot: org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PiePlotState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<XYDifferenceRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<XYBlockRenderer: void setBlockAnchor(org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>";
"<axis.LogAxis: void setNumberFormatOverride(java.text.NumberFormat)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<xy.StackedXYAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: boolean equals(java.lang.Object)>";
"<category.ScatterRenderer: void setUseSeriesOffset(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions createUpRotationLabelPositions(double)>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)>";
"<statistics.DefaultBoxAndWhiskerCategoryDataset: void <init>()>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<renderer.category.BarRenderer: void setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<MatrixSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.MatrixSeriesCollection: void <init>(org.jfree.data.xy.MatrixSeries)>";
"<block.ColumnArrangement: org.jfree.chart.util.Size2D arrangeNF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<demo.BarChartDemo1: org.jfree.data.category.CategoryDataset createDataset()>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<renderer.category.BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawLowFarOut(double,java.awt.Graphics2D,double,double)>";
"<annotations.XYShapeAnnotation: void <init>(java.awt.Shape)>" -> "<org.jfree.chart.annotations.XYShapeAnnotation: void <init>(java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<renderer.xy.XYSplineAndShapeRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>()>";
"<xy.XIntervalSeries: void add(double,double,double,double)>" -> "<org.jfree.data.xy.XIntervalDataItem: void <init>(double,double,double,double)>";
"<renderer.category.LineRenderer3D: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<xy.XYLineAndShapeRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: void <init>()>";
"<TaskSeries: void <init>(java.lang.String)>" -> "<org.jfree.data.general.Series: void <init>(java.lang.Comparable)>";
"<axis.Axis: void setLabelURL(java.lang.String)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<axis.ValueAxis: void setAutoRange(boolean,boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<PaintScaleLegend: org.jfree.chart.util.Size2D arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<ValueAxis: void setFixedAutoRange(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<SpiderWebPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.CombinedDomainXYPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<AbstractRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.Marker: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<renderer.xy.XYDifferenceRenderer: void drawItemPass0(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.xy.XYDifferenceRenderer: boolean isEitherSeriesDegenerate(org.jfree.data.xy.XYDataset,boolean)>";
"<LineAndShapeRenderer: void setBaseLinesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<time.Millisecond: void <init>(int,int,int,int,int,int,int)>" -> "<org.jfree.data.time.Second: void <init>(int,int,int,int,int,int)>";
"<axis.DateTickUnit: java.util.Date addToDate(java.util.Date)>" -> "<org.jfree.chart.axis.DateTickUnit: int getCalendarField(int)>";
"<plot.CategoryPlot: void mapDatasetToDomainAxis(int,int)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<plot.RingPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<AbstractCategoryItemRenderer: void setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<dial.DialBackground: void <init>(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<annotations.XYTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<TextTitle: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<general.DatasetUtilities: org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double[][])>" -> "<org.jfree.chart.util.ArrayUtilities: boolean hasDuplicateItems(java.lang.Object[])>";
"<AxisState: void <init>()>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<TextFragment: void <init>(java.lang.String)>" -> "<org.jfree.chart.text.TextFragment: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<Month: java.lang.String toString()>" -> "<org.jfree.data.time.SerialDate: java.lang.String monthCodeToString(int)>";
"<axis.NumberAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.StandardURLTagFragmentGenerator: void <init>()>";
"<Axis: void setTickLabelsVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<PeriodAxis: void setMinorTickMarkOutsideLength(float)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<dial.StandardDialScale: void setUpperBound(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<Hour: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<ChartFactory: org.jfree.chart.JFreeChart createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<GridArrangement: org.jfree.chart.util.Size2D arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<TimeSeriesTableModel: void <init>()>" -> "<org.jfree.data.time.TimeSeriesTableModel: void <init>(org.jfree.data.time.TimeSeries)>";
"<CandlestickRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<axis.Axis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>" -> "<org.jfree.chart.axis.Axis: java.lang.Class class$(java.lang.String)>";
"<entity.StandardEntityCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.XYLineAndShapeRenderer: void setSeriesLinesVisible(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartPanel: void paintComponent(java.awt.Graphics)>" -> "<org.jfree.chart.ChartPanel: void drawZoomRectangle(java.awt.Graphics2D)>";
"<xy.XYBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<Quarter: org.jfree.data.time.Quarter parseQuarter(java.lang.String)>" -> "<org.jfree.data.time.TimePeriodFormatException: void <init>(java.lang.String)>";
"<DialValueIndicator: void setAngle(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<dial.DialTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<DateTitle: void <init>(int,java.util.Locale,java.awt.Font,java.awt.Paint)>" -> "<org.jfree.chart.title.DateTitle: void <init>(int,java.util.Locale,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<JFreeChartInfo: void <init>()>" -> "<org.jfree.chart.ui.Contributor: void <init>(java.lang.String,java.lang.String)>";
"<ModuloAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.ModuloAxis: double transStart(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)>";
"<axis.NumberAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<renderer.category.ScatterRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<XYSeries: int indexOf(java.lang.Number)>" -> "<org.jfree.data.xy.XYDataItem: void <init>(java.lang.Number,java.lang.Number)>";
"<plot.Marker: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<title.CompositeTitle: void <init>()>" -> "<org.jfree.chart.block.BorderArrangement: void <init>()>";
"<dial.DialCap: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<FixedMillisecond: void <init>()>" -> "<org.jfree.data.time.FixedMillisecond: void <init>(java.util.Date)>";
"<encoders.ImageEncoderFactory: void <clinit>()>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: void init()>";
"<StandardXYToolTipGenerator: java.lang.Object clone()>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: java.lang.Object clone()>";
"<StrokeMap: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<text.TextBlock: org.jfree.chart.util.Size2D calculateDimensions(java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<Axis: void setTickMarkStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<AreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<VectorSeries: void <init>(java.lang.Comparable,boolean,boolean)>" -> "<org.jfree.data.ComparableObjectSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<plot.Marker: void setStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<jdbc.JDBCXYDataset: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCXYDataset: void <init>()>";
"<XYShapeAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<plot.dial.DialTextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,float,boolean)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String)>";
"<util.LogFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>" -> "<org.jfree.chart.util.LogFormat: double calculateLog(double)>";
"<ScatterRenderer: void setUseSeriesOffset(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.XYErrorRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<block.ColorBlock: void <init>(java.awt.Paint,double,double)>" -> "<org.jfree.chart.block.AbstractBlock: void <init>()>";
"<renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<annotations.CategoryTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<axis.MonthDateFormat: void <init>()>" -> "<org.jfree.chart.axis.MonthDateFormat: void <init>(java.util.TimeZone)>";
"<xy.XYDifferenceRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<renderer.category.BarRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean equals(java.lang.Object)>";
"<DataUtilities: org.jfree.data.KeyedValues getCumulativePercentages(org.jfree.data.KeyedValues)>" -> "<org.jfree.data.DefaultKeyedValues: void <init>()>";
"<PlotRenderingInfo: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<title.LegendTitle: void setItemLabelPadding(org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<LogAxis: void <init>()>" -> "<org.jfree.chart.axis.LogAxis: void <init>(java.lang.String)>";
"<demo.PieChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.demo.PieChartDemo1: javax.swing.JPanel createDemoPanel()>";
"<DefaultXYZDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractXYZDataset: void <init>()>";
"<MultiplePiePlot: void <init>(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<statistics.HistogramDataset: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.DeviationRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<XYErrorRenderer: void setCapLength(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.NumberAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<NumberAxis: org.jfree.chart.axis.TickUnitSource createIntegerTickUnits()>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<XYDifferenceRenderer: void drawItemPass0(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.xy.XYDifferenceRenderer: void createPolygon(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,boolean,java.util.LinkedList,java.util.LinkedList)>";
"<time.SerialDate: org.jfree.data.time.SerialDate createInstance(java.util.Date)>" -> "<org.jfree.data.time.SpreadsheetDate: void <init>(int,int,int)>";
"<plot.PiePlot: void <init>()>" -> "<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>";
"<CategoryAxis: void setUpperMargin(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<plot.dial.StandardDialRange: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<urls.StandardPieURLGenerator: void <init>(java.lang.String)>" -> "<org.jfree.chart.urls.StandardPieURLGenerator: void <init>(java.lang.String,java.lang.String)>";
"<plot.PiePlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<XYBoxAndWhiskerRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<general.DefaultKeyedValueDataset: void <init>(java.lang.Comparable,java.lang.Number)>" -> "<org.jfree.data.general.DefaultKeyedValueDataset: void <init>(org.jfree.data.KeyedValue)>";
"<plot.dial.StandardDialScale: void setTickLabelPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<axis.CategoryAxis: boolean equalPaintMaps(java.util.Map,java.util.Map)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<StandardXYItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<DefaultBoxAndWhiskerCategoryDataset: void removeColumn(int)>" -> "<org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset: void updateBounds()>";
"<axis.CyclicNumberAxis: float[] calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberAxis: float[] calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>";
"<plot.CategoryMarker: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Marker: boolean equals(java.lang.Object)>";
"<xy.VectorRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<XYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<ValueAxis: void setAutoTickUnitSelection(boolean,boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<jdbc.JDBCCategoryDataset: void executeQuery(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCCategoryDataset: void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>";
"<DateTickUnit: java.util.Date addToDate(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.chart.axis.DateTickUnit: int getCalendarField(int)>";
"<plot.PiePlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<renderer.xy.XYErrorRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<MeterNeedle: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<StandardXYZToolTipGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: boolean equals(java.lang.Object)>";
"<time.Millisecond: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.Day: void <init>(java.util.Date,java.util.TimeZone)>";
"<axis.NumberAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<axis.CategoryLabelPositions: void <init>()>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>()>";
"<renderer.WaferMapRenderer: void <init>(java.lang.Integer,java.lang.Integer)>" -> "<org.jfree.chart.renderer.AbstractRenderer: void <init>()>";
"<general.CombinedDataset: int getItemCount(int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<StandardCategoryItemLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<LogAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<AbstractBlock: void setPadding(double,double,double,double)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<xy.XYDotRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<SymbolAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<category.BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawEllipse(java.awt.geom.Point2D,double,java.awt.Graphics2D)>";
"<xy.XYStepAreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYStepAreaRenderer: void <init>(int)>";
"<MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,boolean,boolean)>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer$2: void <init>(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,boolean,boolean,int,int)>";
"<xy.StackedXYBarRenderer: void <init>(double)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: void <init>(double)>";
"<Day: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<labels.MultipleXYSeriesLabelGenerator: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<SubCategoryAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<ClusteredXYBarRenderer: void <init>(double,boolean)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: void <init>(double)>";
"<renderer.xy.XYStepRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.XYStepRenderer: void drawLine(java.awt.Graphics2D,java.awt.geom.Line2D,double,double,double,double)>";
"<XYStepAreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYStepAreaRenderer: void <init>(int)>";
"<ChartFactory: org.jfree.chart.JFreeChart createAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<renderer.xy.XYBlockRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>";
"<plot.CombinedDomainCategoryPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<renderer.xy.XYLineAndShapeRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<PiePlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<plot.dial.DialBackground: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<StatisticalLineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<category.LineAndShapeRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<plot.CombinedDomainXYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<axis.CyclicNumberAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<DefaultBoxAndWhiskerXYDataset: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<title.LegendTitle: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<BlockContainer: void <init>()>" -> "<org.jfree.chart.block.BlockContainer: void <init>(org.jfree.chart.block.Arrangement)>";
"<time.SimpleTimePeriod: void <init>(long,long)>" -> "<org.jfree.data.time.SimpleTimePeriod: void <init>(java.util.Date,java.util.Date)>";
"<xy.XYDotRenderer: void setDotHeight(int)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<needle.WindNeedle: void <init>()>" -> "<org.jfree.chart.needle.ArrowNeedle: void <init>(boolean)>";
"<IntervalMarker: void setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.lang.Class class$(java.lang.String)>";
"<SerialDate: org.jfree.data.time.SerialDate getNearestDayOfWeek(int)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<renderer.category.AbstractCategoryItemRenderer: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<renderer.xy.StackedXYAreaRenderer2: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<util.LogFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>" -> "<org.jfree.chart.util.LogFormat: double calculateLog(double)>";
"<MeterPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<ChartFactory: org.jfree.chart.JFreeChart createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<time.DynamicTimeSeriesCollection: java.lang.Number getX(int,int)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection: long getX(org.jfree.data.time.RegularTimePeriod)>";
"<FastScatterPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<StrokeList: int hashCode()>" -> "<org.jfree.chart.util.AbstractObjectList: int hashCode()>";
"<StackedBarRenderer3D: void drawStackHorizontal(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer3D: java.awt.Shape[] createHorizontalBlock(double,double,double,double,boolean)>";
"<CategoryAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.Axis: boolean equals(java.lang.Object)>";
"<HorizontalAlignment: void <clinit>()>" -> "<org.jfree.chart.util.HorizontalAlignment: void <init>(java.lang.String)>";
"<renderer.category.LayeredBarRenderer: void <init>()>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<XYLineAndShapeRenderer: void setBaseLinesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartPanel: void doSaveAs()>" -> "<org.jfree.chart.ChartUtilities: void saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int)>";
"<axis.DateAxis: org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits(java.util.TimeZone)>" -> "<org.jfree.chart.axis.DateTickUnit: void <init>(int,int,int,int,java.text.DateFormat)>";
"<plot.dial.DialTextAnnotation: void setAngle(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<block.LineBorder: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<axis.DateAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<BorderArrangement: org.jfree.chart.util.Size2D arrangeRR(org.jfree.chart.block.BlockContainer,org.jfree.data.Range,org.jfree.data.Range,java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<PeriodAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<dial.DialValueIndicator: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<axis.ValueAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<axis.DateAxis: void <clinit>()>" -> "<org.jfree.chart.axis.DateTickUnit: void <init>(int,int,java.text.DateFormat)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<MeterInterval: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<CategoryLineAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<FixedMillisecond: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.FixedMillisecond: void <init>(long)>";
"<annotations.XYBoxAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<axis.ValueAxis: void setAutoTickUnitSelection(boolean,boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<DefaultMultiValueCategoryDataset: void <init>()>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<LogAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<category.StatisticalLineAndShapeRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<CategoryAxis: void clearCategoryLabelToolTips()>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<category.StackedBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean equals(java.lang.Object)>";
"<DefaultPieDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions createUpRotationLabelPositions(double)>" -> "<org.jfree.chart.axis.CategoryLabelPositions: void <init>(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)>";
"<DynamicTimeSeriesCollection: java.lang.Number getX(int,int)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection: long getX(org.jfree.data.time.RegularTimePeriod)>";
"<JDBCPieDataset: void executeQuery(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCPieDataset: void fireDatasetChanged()>";
"<renderer.xy.XYErrorRenderer: void setDrawYError(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.PeriodAxis: void <init>(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>" -> "<org.jfree.chart.axis.PeriodAxis: java.lang.Class class$(java.lang.String)>";
"<plot.PiePlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<plot.SpiderWebPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<title.LegendGraphic: int hashCode()>" -> "<org.jfree.chart.util.ObjectUtilities: int hashCode(java.lang.Object)>";
"<category.AreaRenderer: void setEndType(org.jfree.chart.renderer.AreaRendererEndType)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<LookupPaintScale: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<needle.LongNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<category.AbstractCategoryItemRenderer: java.awt.geom.Point2D calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<WaferMapRenderer: void <init>()>" -> "<org.jfree.chart.renderer.WaferMapRenderer: void <init>(java.lang.Integer,java.lang.Integer)>";
"<CombinedRangeCategoryPlot: void <init>()>" -> "<org.jfree.chart.plot.CombinedRangeCategoryPlot: void <init>(org.jfree.chart.axis.ValueAxis)>";
"<SubSeriesDataset: void <init>(org.jfree.data.general.SeriesDataset,int)>" -> "<org.jfree.data.general.SubSeriesDataset: void <init>(org.jfree.data.general.SeriesDataset,int[])>";
"<TimeTableXYDataset: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.time.TimeTableXYDataset: long getXValue(org.jfree.data.time.TimePeriod)>";
"<axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createStandardTickUnits()>" -> "<org.jfree.chart.axis.TickUnits: void <init>()>";
"<dial.DialTextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<GrayPaintScale: void <init>()>" -> "<org.jfree.chart.renderer.GrayPaintScale: void <init>(double,double)>";
"<XYLineAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<Marker: void setLabelPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<XYPointerAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<plot.CategoryMarker: void setDrawAsLine(boolean)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<xy.XYSeries: org.jfree.data.xy.XYDataItem addOrUpdate(java.lang.Number,java.lang.Number)>" -> "<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>";
"<ValueTick: void <init>(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>" -> "<org.jfree.chart.axis.Tick: void <init>(java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<ServletUtilities: void registerChartForDeletion(java.io.File,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.servlet.ChartDeleter: void <init>()>";
"<DefaultNumberAxisEditor: void attemptGridStrokeSelection()>" -> "<org.jfree.chart.ui.StrokeChooserPanel: void <init>(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])>";
"<time.Day: void <init>(int,int,int)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int,int,int)>";
"<title.LegendTitle: org.jfree.chart.block.Block createLegendItemBlock(org.jfree.chart.LegendItem)>" -> "<org.jfree.chart.title.LegendItemBlockContainer: void <init>(org.jfree.chart.block.Arrangement,org.jfree.data.general.Dataset,java.lang.Comparable)>";
"<LegendTitle: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.MeterInterval: void <init>(java.lang.String,org.jfree.data.Range)>" -> "<org.jfree.chart.plot.MeterInterval: void <init>(java.lang.String,org.jfree.data.Range,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<CompassPlot: void <init>()>" -> "<org.jfree.data.general.DefaultValueDataset: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerCategoryDataset,boolean)>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<xy.StandardXYItemRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<LogarithmicAxis: java.util.List refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<plot.Marker: void notifyListeners(org.jfree.chart.event.MarkerChangeEvent)>" -> "<org.jfree.chart.plot.Marker: java.lang.Class class$(java.lang.String)>";
"<plot.MeterPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<xy.XYLine3DRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<LineAndShapeRenderer: void setDrawOutlines(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.XYDifferenceRenderer: void setLegendLine(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.XYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<XYStepAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.XYStepAreaRenderer: double restrictValueToDataArea(double,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D)>";
"<xy.AbstractXYItemRenderer: void addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)>" -> "<org.jfree.chart.entity.XYItemEntity: void <init>(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)>";
"<XYBoxAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<general.DatasetUtilities: org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][])>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<plot.ThermometerPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.ThermometerPlot: java.awt.Paint getCurrentPaint()>";
"<general.DatasetUtilities: org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<KeyedObjects2D: void setObject(java.lang.Object,java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.KeyedObjects: void <init>()>";
"<time.DynamicTimeSeriesCollection: void addSeries(float[],int,java.lang.Comparable)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence: void <init>(org.jfree.data.time.DynamicTimeSeriesCollection,int)>";
"<labels.StandardCategorySeriesLabelGenerator: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.String)>";
"<Hour: void <init>(int,org.jfree.data.time.Day)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardPieURLGenerator: void <init>()>";
"<SimpleHistogramDataset: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<axis.ValueAxis: void setInverted(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<time.Month: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<plot.dial.DialCap: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<renderer.category.AbstractCategoryItemRenderer: void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DefaultDrawingSupplier: java.awt.Shape[] createStandardSeriesShapes()>" -> "<org.jfree.chart.plot.DefaultDrawingSupplier: int[] intArray(double,double,double,double)>";
"<plot.XYPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<ValueAxis: void setRange(org.jfree.data.Range)>" -> "<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range,boolean,boolean)>";
"<category.DefaultIntervalCategoryDataset: void <init>(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])>" -> "<org.jfree.data.general.AbstractSeriesDataset: void <init>()>";
"<plot.JThermometer: void addSubtitle(java.lang.String,java.awt.Font)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font)>";
"<SerialDate: org.jfree.data.time.SerialDate getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate addDays(int,org.jfree.data.time.SerialDate)>";
"<DefaultAxisEditor: void <init>(org.jfree.chart.axis.Axis)>" -> "<org.jfree.chart.ui.LCBLayout: void <init>(int)>";
"<LegendItemBlockContainer: void <init>(org.jfree.chart.block.Arrangement,org.jfree.data.general.Dataset,java.lang.Comparable)>" -> "<org.jfree.chart.block.BlockContainer: void <init>(org.jfree.chart.block.Arrangement)>";
"<XIntervalSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<category.StatisticalLineAndShapeRenderer: void setErrorIndicatorPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<SpreadsheetDate: void <init>(int)>" -> "<org.jfree.data.time.SerialDate: void <init>()>";
"<util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.lang.Class class$(java.lang.String)>";
"<TextBox: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<DefaultPlotEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultPlotEditor: void attemptOutlinePaintSelection()>";
"<Tick: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<MeterNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<general.CombinedDataset: java.lang.Number getVolume(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<DefaultTitleEditor: void <init>(org.jfree.chart.title.Title)>" -> "<org.jfree.chart.editor.DefaultTitleEditor: void enableOrDisableControls()>";
"<dial.DialTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<xy.XYErrorRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<dial.DialValueIndicator: void setValueAnchor(org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DialValueIndicator: void setDatasetIndex(int)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<plot.dial.DialCap: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<axis.ModuloAxis: double trans(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<ValueAxis: void zoomRange(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<plot.dial.DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<plot.PiePlot: void drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<AbstractBlock: org.jfree.chart.block.RectangleConstraint toContentConstraint(org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.block.AbstractBlock: org.jfree.data.Range trimToContentHeight(org.jfree.data.Range)>";
"<title.TextTitle: org.jfree.chart.util.Size2D arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)>";
"<title.CompositeTitle: void <init>(org.jfree.chart.block.BlockContainer)>" -> "<org.jfree.chart.title.Title: void <init>()>";
"<plot.CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>";
"<title.LegendGraphic: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<xy.CandlestickRenderer: void <init>(double)>" -> "<org.jfree.chart.renderer.xy.CandlestickRenderer: void <init>(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)>";
"<MonthDateFormat: void <init>()>" -> "<org.jfree.chart.axis.MonthDateFormat: void <init>(java.util.TimeZone)>";
"<axis.CategoryAxis3D: void <init>()>" -> "<org.jfree.chart.axis.CategoryAxis3D: void <init>(java.lang.String)>";
"<CombinedDataset: java.lang.Number getOpen(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<category.StatisticalLineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>";
"<axis.DateAxis: void selectVerticalAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.DateAxis: double estimateMaximumTickLabelHeight(java.awt.Graphics2D,org.jfree.chart.axis.DateTickUnit)>";
"<xy.XYBarRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<xy.AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<DateAxis: void setRange(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.data.time.DateRange: void <init>(org.jfree.data.Range)>";
"<CrosshairState: void <init>()>" -> "<org.jfree.chart.plot.CrosshairState: void <init>(boolean)>";
"<xy.XYStepAreaRenderer: void setPlotArea(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYAnnotationEntity: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.entity.ChartEntity: boolean equals(java.lang.Object)>";
"<XYDotRenderer: void setDotHeight(int)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<StandardDialScale: void <init>()>" -> "<org.jfree.chart.plot.dial.StandardDialScale: void <init>(double,double,double,double,double,int)>";
"<TimeSeriesChartDemo1: org.jfree.data.xy.XYDataset createDataset()>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable,java.lang.Class)>";
"<general.CombinedDataset: java.lang.Number getStartX(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<DeviationRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void setDrawSeriesLineAsPath(boolean)>";
"<renderer.xy.XYAreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<PiePlot: void drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<ValueAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<DefaultAxisEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: void attemptLabelFontSelection()>";
"<DynamicTimeSeriesCollection: void <init>(int,int)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection: void <init>(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>";
"<category.BarRenderer: void setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.dial.ArcDialFrame: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<OHLCSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>" -> "<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>";
"<plot.CrosshairState: void <init>()>" -> "<org.jfree.chart.plot.CrosshairState: void <init>(boolean)>";
"<time.TimeSeries: void removeAgedItems(boolean)>" -> "<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>";
"<category.IntervalBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<time.TimeSeries: void removeAgedItems(long,boolean)>" -> "<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>";
"<LegendTitle: org.jfree.chart.block.Block createLegendItemBlock(org.jfree.chart.LegendItem)>" -> "<org.jfree.chart.block.CenterArrangement: void <init>()>";
"<StandardPieURLGenerator: void <init>(java.lang.String)>" -> "<org.jfree.chart.urls.StandardPieURLGenerator: void <init>(java.lang.String,java.lang.String)>";
"<PieChartDemo1: org.jfree.data.general.PieDataset createDataset()>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<XYPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.geom.Point2D readPoint2D(java.io.ObjectInputStream)>";
"<plot.ValueMarker: void <init>(double)>" -> "<org.jfree.chart.plot.Marker: void <init>()>";
"<DatasetUtilities: org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<Plot: void fireChangeEvent()>" -> "<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>";
"<DateAxis: void <clinit>()>" -> "<org.jfree.chart.axis.DateTickUnit: void <init>(int,int,java.text.DateFormat)>";
"<StandardCategoryToolTipGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: boolean equals(java.lang.Object)>";
"<SerialDate: org.jfree.data.time.SerialDate addYears(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: int lastDayOfMonth(int,int)>";
"<renderer.category.IntervalBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<plot.dial.StandardDialScale: void setLowerBound(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<category.BarRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean equals(java.lang.Object)>";
"<ValueAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisState: void <init>()>";
"<SimpleHistogramDataset: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<BarRenderer: void setMaximumBarWidth(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<category.GanttRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.PiePlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<dial.StandardDialScale: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<ValueAxis: void setLeftArrow(java.awt.Shape)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<plot.PiePlot3D: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>";
"<title.LegendGraphic: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.xy.XYBoxAndWhiskerRenderer: void <init>(double)>" -> "<org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator: void <init>()>";
"<renderer.category.StatisticalLineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<RingPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.PiePlot: boolean equals(java.lang.Object)>";
"<axis.LogAxis: void <init>()>" -> "<org.jfree.chart.axis.LogAxis: void <init>(java.lang.String)>";
"<DefaultWindDataset: void <init>(java.lang.String[],java.lang.Object[][][])>" -> "<org.jfree.data.xy.DefaultWindDataset: void <init>(java.util.List,java.lang.Object[][][])>";
"<MatrixSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractXYZDataset: java.lang.Object clone()>";
"<SpreadsheetDate: void <init>(int)>" -> "<org.jfree.data.time.SpreadsheetDate: boolean isLeapYear(int)>";
"<plot.PiePlot3D: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: double calculatePieDatasetTotal(org.jfree.data.general.PieDataset)>";
"<PaintScaleLegend: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.title.Title: boolean equals(java.lang.Object)>";
"<XYBarDataset: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<BorderArrangement: org.jfree.chart.util.Size2D arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<PeriodAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.MeterInterval: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<MeterPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<renderer.category.GroupedStackedBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)>";
"<renderer.category.BarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: org.jfree.data.Range expandToInclude(org.jfree.data.Range,double)>";
"<category.MinMaxCategoryRenderer: void setMinIcon(javax.swing.Icon)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<editor.DefaultAxisEditor: void <init>(org.jfree.chart.axis.Axis)>" -> "<org.jfree.chart.ui.LCBLayout: void <init>(int)>";
"<DateTickUnit: int getCalendarField()>" -> "<org.jfree.chart.axis.DateTickUnit: int getCalendarField(int)>";
"<Title: java.lang.Object clone()>" -> "<org.jfree.chart.block.AbstractBlock: java.lang.Object clone()>";
"<MovingAverage: org.jfree.data.time.TimeSeries createMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int,int)>" -> "<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>";
"<plot.IntervalMarker: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<demo.PieChartDemo1: void main(java.lang.String[])>" -> "<org.jfree.chart.demo.PieChartDemo1: void <init>(java.lang.String)>";
"<axis.LogAxis: org.jfree.chart.axis.TickUnitSource createLogTickUnits(java.util.Locale)>" -> "<org.jfree.chart.axis.TickUnits: void <init>()>";
"<DefaultDrawingSupplier: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<CategoryAxis: void removeCategoryLabelToolTip(java.lang.Comparable)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<statistics.BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List,boolean)>" -> "<org.jfree.data.statistics.Statistics: double calculateMedian(java.util.List,boolean)>";
"<plot.MultiplePiePlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<servlet.ServletUtilities: void registerChartForDeletion(java.io.File,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.servlet.ChartDeleter: void <init>()>";
"<CombinedDataset: java.lang.Number getY(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<axis.LogAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<util.TableOrder: void <clinit>()>" -> "<org.jfree.chart.util.TableOrder: void <init>(java.lang.String)>";
"<ArcDialFrame: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<XYBlockRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<ChartRenderingInfo: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.AbstractRenderer: void <init>()>" -> "<org.jfree.chart.util.ShapeList: void <init>()>";
"<PeriodAxis: void <init>(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>" -> "<org.jfree.chart.axis.ValueAxis: void <init>(java.lang.String,org.jfree.chart.axis.TickUnitSource)>";
"<renderer.xy.XYDotRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<YIntervalSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.xy.YIntervalSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<BoxAndWhiskerRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>";
"<general.CombinedDataset: java.lang.Number getOpen(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<TextTitle: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<ShapeList: int hashCode()>" -> "<org.jfree.chart.util.AbstractObjectList: int hashCode()>";
"<DateAxis: org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits(java.util.TimeZone)>" -> "<org.jfree.chart.axis.DateTickUnit: void <init>(int,int,java.text.DateFormat)>";
"<XYDifferenceRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<statistics.DefaultBoxAndWhiskerCategoryDataset: void remove(java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset: void updateBounds()>";
"<xy.AbstractXYItemRenderer: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<XYBlockRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<xy.XYBoxAndWhiskerRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>" -> "<org.jfree.chart.axis.ValueTick: void <init>(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<CombinedDataset: java.lang.Number getStartX(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<XYDatasetTableModel: void <init>(org.jfree.data.xy.TableXYDataset)>" -> "<org.jfree.data.xy.XYDatasetTableModel: void <init>()>";
"<axis.QuarterDateFormat: void <init>(java.util.TimeZone,java.lang.String[])>" -> "<org.jfree.chart.axis.QuarterDateFormat: void <init>(java.util.TimeZone,java.lang.String[],boolean)>";
"<XYTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<renderer.category.GanttRenderer: void setCompletePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.PiePlot: void drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<ChartFactory: org.jfree.chart.JFreeChart createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>()>";
"<ChartEntity: void <init>(java.awt.Shape,java.lang.String)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<TimeSeries: void removeAgedItems(long,boolean)>" -> "<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>";
"<IntervalCategoryToolTipGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<plot.Plot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>" -> "<org.jfree.chart.plot.Plot: java.lang.Class class$(java.lang.String)>";
"<DefaultDrawingSupplier: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<Marker: void setLabelOffsetType(org.jfree.chart.util.LengthAdjustmentType)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<AbstractRenderer: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.awt.Stroke)>";
"<NumberAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<category.DefaultIntervalCategoryDataset: void <init>(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])>" -> "<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] generateKeys(int,java.lang.String)>";
"<event.ChartChangeEvent: void <init>(java.lang.Object,org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)>";
"<BlockBorder: void <init>(double,double,double,double,java.awt.Paint)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<plot.RingPlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>";
"<AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<dial.DialTextAnnotation: void setAngle(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DateAxis: void <init>(java.lang.String,java.util.TimeZone)>" -> "<org.jfree.chart.axis.ValueAxis: void <init>(java.lang.String,org.jfree.chart.axis.TickUnitSource)>";
"<StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<ScatterRenderer: void setBaseShapesFilled(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.XYSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.xy.XYSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<util.Layer: void <clinit>()>" -> "<org.jfree.chart.util.Layer: void <init>(java.lang.String)>";
"<CategoryAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<dial.DialPointer: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<JDBCXYDataset: void <init>(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCXYDataset: void <init>(java.sql.Connection)>";
"<encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,float,boolean)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String)>";
"<StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer$State: boolean access$102(org.jfree.chart.renderer.xy.StandardXYItemRenderer$State,boolean)>";
"<TextUtilities: float[] deriveRotationAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<DialValueIndicator: void setOutlineStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<annotations.CategoryTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<util.HorizontalAlignment: void <clinit>()>" -> "<org.jfree.chart.util.HorizontalAlignment: void <init>(java.lang.String)>";
"<StackedXYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: boolean equals(java.lang.Object)>";
"<RectangleConstraint: org.jfree.chart.block.RectangleConstraint toUnconstrainedWidth()>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<TextBox: void <init>(org.jfree.chart.text.TextBlock)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<TimeTableXYDataset: double getXValue(int,int)>" -> "<org.jfree.data.time.TimeTableXYDataset: long getXValue(org.jfree.data.time.TimePeriod)>";
"<urls.StandardPieURLGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<labels.ItemLabelAnchor: void <clinit>()>" -> "<org.jfree.chart.labels.ItemLabelAnchor: void <init>(java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBubbleChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYZDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<SerialDate: org.jfree.data.time.SerialDate getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate addDays(int,org.jfree.data.time.SerialDate)>";
"<util.RefineryUtilities: void centerFrameOnScreen(java.awt.Window)>" -> "<org.jfree.chart.util.RefineryUtilities: void positionFrameOnScreen(java.awt.Window,double,double)>";
"<TextBlock: void draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)>" -> "<org.jfree.chart.text.TextBlock: float[] calculateOffsets(org.jfree.chart.text.TextBlockAnchor,double,double)>";
"<category.LineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.XYCoordinate: void <init>()>" -> "<org.jfree.data.xy.XYCoordinate: void <init>(double,double)>";
"<LineAndShapeRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.CategoryAxis3D: void <init>(java.lang.String)>";
"<LevelRenderer: void setMaximumItemWidth(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYPolygonAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.VectorSeries: void add(double,double,double,double)>" -> "<org.jfree.data.xy.VectorDataItem: void <init>(double,double,double,double)>";
"<axis.CategoryLabelPositions: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)>";
"<time.Year: void <init>(int)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<CombinedDomainCategoryPlot: void <init>()>" -> "<org.jfree.chart.plot.CombinedDomainCategoryPlot: void <init>(org.jfree.chart.axis.CategoryAxis)>";
"<axis.MonthDateFormat: void <init>(java.util.TimeZone)>" -> "<org.jfree.chart.axis.MonthDateFormat: void <init>(java.util.TimeZone,java.util.Locale,int,boolean,boolean)>";
"<xy.IntervalXYDelegate: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<labels.StandardCategoryToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat)>";
"<renderer.category.BarRenderer: void setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<general.DefaultValueDataset: void <init>(double)>" -> "<org.jfree.data.general.DefaultValueDataset: void <init>(java.lang.Number)>";
"<renderer.xy.XYDifferenceRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<title.LegendGraphic: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<general.DefaultKeyedValueDataset: void <init>(java.lang.Comparable,java.lang.Number)>" -> "<org.jfree.data.DefaultKeyedValue: void <init>(java.lang.Comparable,java.lang.Number)>";
"<time.SerialDate: org.jfree.data.time.SerialDate getNearestDayOfWeek(int)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)>";
"<renderer.xy.StackedXYAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: boolean equals(java.lang.Object)>";
"<XYBarRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<axis.Axis: void setVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<renderer.xy.StackedXYAreaRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)>";
"<XYSplineAndShapeRenderer: void setPrecision(int)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ui.Licences: org.jfree.chart.ui.Licences getInstance()>" -> "<org.jfree.chart.ui.Licences: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<ChartFactory: org.jfree.chart.JFreeChart createAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardCategoryURLGenerator: void <init>()>";
"<renderer.category.BoxAndWhiskerRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<block.BorderArrangement: org.jfree.chart.util.Size2D arrangeRR(org.jfree.chart.block.BlockContainer,org.jfree.data.Range,org.jfree.data.Range,java.awt.Graphics2D)>" -> "<org.jfree.data.Range: org.jfree.data.Range shift(org.jfree.data.Range,double)>";
"<ChartUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>";
"<DialTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<GroupedStackedBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)>";
"<renderer.xy.XYDotRenderer: void setDotWidth(int)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<dial.DialValueIndicator: void <init>()>" -> "<org.jfree.chart.plot.dial.DialValueIndicator: void <init>(int)>";
"<ChartPanel: java.util.EventListener[] getListeners(java.lang.Class)>" -> "<org.jfree.chart.ChartPanel: java.lang.Class class$(java.lang.String)>";
"<Week: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Week: void <init>(java.util.Date,java.util.TimeZone,java.util.Locale)>";
"<labels.StandardXYZToolTipGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<plot.PolarPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<CategoryMarker: void setDrawAsLine(boolean)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<annotations.CategoryPointerAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<CombinedDataset: java.lang.Number getLow(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<StandardPieSectionLabelGenerator: java.lang.String generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)>" -> "<org.jfree.chart.labels.AbstractPieItemLabelGenerator: java.lang.String generateSectionLabel(org.jfree.data.general.PieDataset,java.lang.Comparable)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<Plot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>";
"<PaintScaleLegend: void setStripOutlinePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<plot.CombinedDomainCategoryPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>";
"<PinNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<renderer.category.AbstractCategoryItemRenderer: boolean removeAnnotation(org.jfree.chart.annotations.CategoryAnnotation)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.XYBoxAndWhiskerRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.CategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<annotations.TextAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<dial.DialPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<YIntervalSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<TextFragment: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<renderer.category.CategoryStepRenderer: void setStagger(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ServletUtilities: java.lang.String saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.servlet.ServletUtilities: java.lang.String saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>";
"<Quarter: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Quarter: void <init>(int,int)>";
"<category.WaterfallBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean equals(java.lang.Object)>";
"<editor.DefaultNumberAxisEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultNumberAxisEditor: void attemptGridPaintSelection()>";
"<plot.XYPlot: boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.RendererUtilities: int[] findLiveItems(org.jfree.data.xy.XYDataset,int,double,double)>";
"<block.LineBorder: void <init>()>" -> "<org.jfree.chart.block.LineBorder: void <init>(java.awt.Paint,java.awt.Stroke,org.jfree.chart.util.RectangleInsets)>";
"<time.Quarter: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<XYBoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.OutlierListCollection: void <init>()>";
"<time.RegularTimePeriod: java.lang.Class downsize(java.lang.Class)>" -> "<org.jfree.data.time.RegularTimePeriod: java.lang.Class class$(java.lang.String)>";
"<xy.HighLowRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<TimeSeries: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<TextFragment: void <init>(java.lang.String,java.awt.Font)>" -> "<org.jfree.chart.text.TextFragment: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<plot.dial.DialValueIndicator: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<category.StackedBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)>";
"<renderer.AbstractRenderer: void fireChangeEvent()>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<time.TimeTableXYDataset: void <init>(java.util.TimeZone,java.util.Locale)>" -> "<org.jfree.data.DefaultKeyedValues2D: void <init>(boolean)>";
"<DefaultStatisticalCategoryDataset: void <init>()>" -> "<org.jfree.data.KeyedObjects2D: void <init>()>";
"<AbstractBlock: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<text.TextBox: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<TimeSeries: org.jfree.data.time.TimeSeries createCopy(int,int)>" -> "<org.jfree.data.general.Series: java.lang.Object clone()>";
"<entity.ChartEntity: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<category.StatisticalBarRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.XYBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: boolean isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)>";
"<Title: void <init>(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.block.AbstractBlock: void <init>()>";
"<DialCap: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<util.ObjectUtilities: java.net.URL getResourceRelative(java.lang.String,java.lang.Class)>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.ClassLoader getClassLoader(java.lang.Class)>";
"<editor.DefaultAxisEditor: void <init>(org.jfree.chart.axis.Axis)>" -> "<org.jfree.chart.ui.PaintSample: void <init>(java.awt.Paint)>";
"<category.StackedBarRenderer3D: java.util.List createStackedValueList(org.jfree.data.category.CategoryDataset,java.lang.Comparable,double,boolean)>" -> "<org.jfree.data.DataUtilities: double calculateColumnTotal(org.jfree.data.Values2D,int)>";
"<xy.StackedXYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<xy.AbstractXYItemRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<general.CombinedDataset: org.jfree.data.general.SeriesDataset getParent()>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<renderer.category.WaterfallBarRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<MinMaxCategoryRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<PaintList: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<time.Day: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int)>";
"<Statistics: double calculateMedian(java.util.List,int,int)>" -> "<org.jfree.data.statistics.Statistics: double calculateMedian(java.util.List,int,int,boolean)>";
"<jdbc.JDBCCategoryDataset: void executeQuery(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCCategoryDataset: int getRowCount()>";
"<labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<PeriodAxis: void <init>(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)>" -> "<org.jfree.chart.axis.PeriodAxis: void <init>(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>";
"<axis.NumberAxis: java.lang.Object clone()>" -> "<org.jfree.chart.axis.ValueAxis: java.lang.Object clone()>";
"<time.MovingAverage: org.jfree.data.time.TimeSeries createPointMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int)>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable,java.lang.Class)>";
"<GroupedStackedBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer: boolean equals(java.lang.Object)>";
"<plot.dial.DialCap: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<xml.ItemHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>" -> "<org.jfree.data.xml.KeyHandler: void <init>(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)>";
"<axis.ValueTick: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.Tick: boolean equals(java.lang.Object)>";
"<JDBCCategoryDataset: void <init>(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCCategoryDataset: void <init>(java.sql.Connection)>";
"<CompassPlot: void <init>()>" -> "<org.jfree.chart.plot.CompassPlot: void <init>(org.jfree.data.general.ValueDataset)>";
"<AbstractXYItemRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<XYDifferenceRenderer: void setNegativePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<MiddlePinNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<DialCap: void setOutlineStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<plot.XYPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<renderer.category.StackedBarRenderer3D: void setRenderAsPercentages(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.dial.DialValueIndicator: void setTextAnchor(org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<GanttRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.IntervalBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>";
"<axis.LogAxis: void <init>(java.lang.String)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<time.Millisecond: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Millisecond: void <init>(int,org.jfree.data.time.Second)>";
"<axis.CategoryAnchor: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryAnchor: void <init>(java.lang.String)>";
"<FastScatterPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<renderer.xy.XYDifferenceRenderer: void drawItemPass1(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.entity.XYItemEntity: void <init>(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)>";
"<Axis: void setAxisLinePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<dial.StandardDialScale: void setMajorTickLength(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYBarRenderer: void setDrawBarOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<Month: org.jfree.data.time.Month parseMonth(java.lang.String)>" -> "<org.jfree.data.time.TimePeriodFormatException: void <init>(java.lang.String)>";
"<ExtendedCategoryAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: float[] deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)>";
"<ChartFactory: org.jfree.chart.JFreeChart createGanttChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.IntervalCategoryDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.IntervalCategoryToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat)>";
"<renderer.xy.StackedXYAreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer: void <init>(int)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<general.DatasetUtilities: org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable,org.jfree.data.KeyedValues)>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<axis.PeriodAxis: void setMinorTickMarkInsideLength(float)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<xy.DefaultXYDataset: void removeSeries(java.lang.Comparable)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<renderer.category.StatisticalBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean equals(java.lang.Object)>";
"<text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: float[] deriveRotationAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)>";
"<ItemHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>" -> "<org.jfree.data.xml.ValueHandler: void <init>(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)>";
"<renderer.xy.XYBoxAndWhiskerRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer: void <init>(double)>";
"<plot.ThermometerPlot: void <init>()>" -> "<org.jfree.chart.plot.ThermometerPlot: void <init>(org.jfree.data.general.ValueDataset)>";
"<annotations.XYPointerAnnotation: int hashCode()>" -> "<org.jfree.chart.annotations.XYTextAnnotation: int hashCode()>";
"<XYTitleAnnotationDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<axis.ValueAxis: double findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<LegendTitle: org.jfree.chart.block.Block createLegendItemBlock(org.jfree.chart.LegendItem)>" -> "<org.jfree.chart.title.LegendItemBlockContainer: void <init>(org.jfree.chart.block.Arrangement,org.jfree.data.general.Dataset,java.lang.Comparable)>";
"<editor.DefaultPlotEditor: void <init>(org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: org.jfree.chart.editor.DefaultAxisEditor getInstance(org.jfree.chart.axis.Axis)>";
"<axis.DateAxis: void selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardCategoryURLGenerator: void <init>()>";
"<BlockBorder: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<ChartEntity: java.lang.String getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String htmlEscape(java.lang.String)>";
"<plot.CombinedDomainCategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>" -> "<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<Quarter: long getLastMillisecond(java.util.Calendar)>" -> "<org.jfree.data.time.SerialDate: int lastDayOfMonth(int,int)>";
"<dial.ArcDialFrame: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<PolarPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<axis.CategoryAxis: org.jfree.chart.axis.AxisState drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.entity.CategoryLabelEntity: void <init>(java.lang.Comparable,java.awt.Shape,java.lang.String,java.lang.String)>";
"<plot.FastScatterPlot: void <init>(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.FastScatterPlot: org.jfree.data.Range calculateYDataRange(float[][])>";
"<renderer.category.BoxAndWhiskerRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<XYBarDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<axis.LogAxis: org.jfree.chart.axis.TickUnitSource createLogTickUnits(java.util.Locale)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<StatisticalLineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>";
"<general.CombinedDataset: int[] getMap()>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<TimePeriodValues: void add(org.jfree.data.time.TimePeriod,double)>" -> "<org.jfree.data.time.TimePeriodValues: void add(org.jfree.data.time.TimePeriodValue)>";
"<xy.DeviationRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.DeviationRenderer: void <init>(boolean,boolean)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerXYDataset,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<plot.XYPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>()>";
"<time.DateRange: void <init>(java.util.Date,java.util.Date)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<axis.ExtendedCategoryAxis: org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)>" -> "<org.jfree.chart.text.TextLine: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<StackedXYAreaRenderer2: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.lang.Object clone()>";
"<BarRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean equals(java.lang.Object)>";
"<DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Rectangle2D createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)>";
"<XYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<renderer.category.StatisticalBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<TextUtilities: float[] deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<ChartPanel: void mouseClicked(java.awt.event.MouseEvent)>" -> "<org.jfree.chart.ChartMouseEvent: void <init>(org.jfree.chart.JFreeChart,java.awt.event.MouseEvent,org.jfree.chart.entity.ChartEntity)>";
"<dial.DialValueIndicator: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<StandardDialScale: void setFirstTickLabelVisible(boolean)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DateAxis: void selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<category.BarRenderer: void setMaximumBarWidth(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<SerialDate: org.jfree.data.time.SerialDate addMonths(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: int lastDayOfMonth(int,int)>";
"<StatisticalLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<DefaultNumberAxisEditor: void <init>(org.jfree.chart.axis.NumberAxis)>" -> "<org.jfree.chart.ui.PaintSample: void <init>(java.awt.Paint)>";
"<plot.CategoryPlot: void <init>()>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<Title: void <init>()>" -> "<org.jfree.chart.title.Title: void <init>(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<StackedAreaRenderer: double getPreviousHeight(org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.data.DataUtilities: double calculateColumnTotal(org.jfree.data.Values2D,int)>";
"<general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Class class$(java.lang.String)>";
"<block.BorderArrangement: org.jfree.chart.util.Size2D arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<StatisticalLineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void <init>(boolean,boolean)>";
"<plot.XYPlot: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<statistics.DefaultStatisticalCategoryDataset: void removeColumn(int)>" -> "<org.jfree.data.statistics.DefaultStatisticalCategoryDataset: void updateBounds()>";
"<ChartEntity: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<Title: void setHorizontalAlignment(org.jfree.chart.util.HorizontalAlignment)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<DynamicTimeSeriesCollection: org.jfree.data.time.RegularTimePeriod advanceTime()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<DateTick: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<DefaultAxisEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: void attemptModifyLabelPaint()>";
"<plot.CategoryPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<DefaultDrawingSupplier: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<XYShapeAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.PointerNeedle: void <init>()>";
"<demo.PieChartDemo1: org.jfree.data.general.PieDataset createDataset()>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<DefaultIntervalCategoryDataset: java.lang.Number getStartValue(java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<plot.dial.StandardDialScale: void <init>()>" -> "<org.jfree.chart.plot.dial.StandardDialScale: void <init>(double,double,double,double,double,int)>";
"<axis.DateAxis: void <clinit>()>" -> "<org.jfree.data.time.DateRange: void <init>()>";
"<general.CombinedDataset: java.lang.Number getEndX(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<ChartFactory: org.jfree.chart.JFreeChart createScatterPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<category.MinMaxCategoryRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<DateAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<plot.PolarPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.AbstractXYDataset: void <init>()>" -> "<org.jfree.data.general.AbstractSeriesDataset: void <init>()>";
"<LineAndShapeRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<xy.XIntervalSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<category.BoxAndWhiskerRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<axis.PeriodAxis: void setMinorTickMarkOutsideLength(float)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<PlumNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: float[] deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor,java.awt.geom.Rectangle2D)>";
"<StatisticalBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<category.LineAndShapeRenderer: void setSeriesShapesFilled(int,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.XYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<time.TimeSeriesTableModel: void <init>(org.jfree.data.time.TimeSeries)>" -> "<org.jfree.data.time.TimeSeriesTableModel: void <init>(org.jfree.data.time.TimeSeries,boolean)>";
"<RectangleInsets: void <init>(double,double,double,double)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(org.jfree.chart.util.UnitType,double,double,double,double)>";
"<general.CombinedDataset: void add(org.jfree.data.general.SeriesDataset,int)>" -> "<org.jfree.data.general.SubSeriesDataset: void <init>(org.jfree.data.general.SeriesDataset,int)>";
"<CategoryAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)>";
"<DefaultNumberAxisEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultNumberAxisEditor: void attemptGridPaintSelection()>";
"<title.LegendGraphic: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.block.AbstractBlock: boolean equals(java.lang.Object)>";
"<ChartPanel: void <init>(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)>";
"<renderer.category.LevelRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<editor.DefaultPlotEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultPlotEditor: void attemptOrientationSelection()>";
"<DateAxis: org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits()>" -> "<org.jfree.chart.axis.DateAxis: org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits(java.util.TimeZone)>";
"<axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor)>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)>";
"<DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<LineRenderer3D: void <init>()>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void <init>(boolean,boolean)>";
"<DefaultDrawingSupplier: void <clinit>()>" -> "<org.jfree.chart.ChartColor: java.awt.Paint[] createDefaultPaintArray()>";
"<renderer.xy.XYBarRenderer: void <init>(double)>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>()>";
"<plot.CombinedDomainXYPlot: void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)>" -> "<org.jfree.chart.plot.XYPlot: void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<LineRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<time.Minute: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Minute: void <init>(int,org.jfree.data.time.Hour)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>()>";
"<ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>";
"<CompositeTitle: void <init>()>" -> "<org.jfree.chart.block.BlockContainer: void <init>(org.jfree.chart.block.Arrangement)>";
"<labels.BubbleXYItemLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.BubbleXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)>";
"<ArcDialFrame: java.awt.Shape getOuterWindow(java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<category.AreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<ThermometerPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.ThermometerPlot: java.awt.Paint getCurrentPaint()>";
"<LineRenderer3D: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<renderer.xy.XYDifferenceRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<general.CombinedDataset: java.lang.Number getStartX(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<gantt.Task: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<Plot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<category.StackedBarRenderer3D: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset)>";
"<renderer.xy.StackedXYAreaRenderer2: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: double[] averageStackValues(double[],double[])>";
"<axis.Axis: void setTickMarkStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<renderer.xy.CandlestickRenderer: void <init>(double)>" -> "<org.jfree.chart.renderer.xy.CandlestickRenderer: void <init>(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)>";
"<FastScatterPlot: void <init>(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.FastScatterPlot: org.jfree.data.Range calculateXDataRange(float[][])>";
"<XYBarRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<axis.Axis: void <clinit>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<plot.dial.StandardDialFrame: void <init>()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<PeriodAxisLabelInfo: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<ValueAxis: double findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<StandardGradientPaintTransformer: void <init>()>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>(org.jfree.chart.util.GradientPaintTransformType)>";
"<ChartFactory: org.jfree.chart.JFreeChart createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)>" -> "<org.jfree.chart.labels.HighLowItemLabelGenerator: void <init>()>";
"<Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<Series: void removeChangeListener(org.jfree.data.general.SeriesChangeListener)>" -> "<org.jfree.data.general.Series: java.lang.Class class$(java.lang.String)>";
"<XIntervalSeries: void add(double,double,double,double)>" -> "<org.jfree.data.xy.XIntervalDataItem: void <init>(double,double,double,double)>";
"<CategoryTableXYDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<DatasetUtilities: org.jfree.data.xy.XYDataset sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)>" -> "<org.jfree.data.xy.XYSeriesCollection: void <init>(org.jfree.data.xy.XYSeries)>";
"<LabelBlock: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<axis.DateAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<AbstractObjectList: void <init>(int)>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>(int,int)>";
"<xy.VectorDataItem: void <init>(double,double,double,double)>" -> "<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>";
"<DialTextAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<XYTitleAnnotationDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.chart.title.LegendTitle: void <init>(org.jfree.chart.LegendItemSource)>";
"<renderer.xy.AbstractXYItemRenderer: void <init>()>" -> "<org.jfree.chart.labels.StandardXYSeriesLabelGenerator: void <init>(java.lang.String)>";
"<renderer.xy.XYBarRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<XYSmoothLineAndShapeRenderer: void drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>" -> "<org.jfree.experimental.chart.renderer.xy.XYSmoothLineAndShapeRenderer: java.awt.geom.Point2D$Double[] getBezierCurve(java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,java.awt.geom.Point2D$Double,double,int)>";
"<ShapeList: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<XYErrorRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<StatisticalBarRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<StackedXYAreaRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<BoxAndWhiskerItem: void <init>(double,double,double,double,double,double,double,double,java.util.List)>" -> "<org.jfree.data.statistics.BoxAndWhiskerItem: void <init>(java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.util.List)>";
"<plot.DefaultDrawingSupplier: java.awt.Shape[] createStandardSeriesShapes()>" -> "<org.jfree.chart.plot.DefaultDrawingSupplier: int[] intArray(double,double,double)>";
"<renderer.category.StackedBarRenderer: void setRenderAsPercentages(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<LayeredBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<LegendTitle: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>()>";
"<XYSeries: void add(java.lang.Number,java.lang.Number,boolean)>" -> "<org.jfree.data.xy.XYDataItem: void <init>(java.lang.Number,java.lang.Number)>";
"<JDBCCategoryDataset: void <init>(java.sql.Connection)>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<XYPolygonAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<PeriodAxis: java.lang.Object clone()>" -> "<org.jfree.chart.axis.ValueAxis: java.lang.Object clone()>";
"<plot.CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.LongNeedle: void <init>()>";
"<CategorySeriesHandler: void <init>(org.jfree.data.xml.RootHandler)>" -> "<org.jfree.data.DefaultKeyedValues: void <init>()>";
"<DefaultHighLowDataset: void <init>(java.lang.Comparable,java.util.Date[],double[],double[],double[],double[],double[])>" -> "<org.jfree.data.xy.DefaultHighLowDataset: java.lang.Number[] createNumberArray(double[])>";
"<ohlc.OHLCSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<WaferMapDataset: void <init>(int,int,java.lang.Number)>" -> "<org.jfree.data.DefaultKeyedValues2D: void <init>()>";
"<TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)>" -> "<org.jfree.chart.text.TextBlock: void <init>()>";
"<CombinedDataset: int[] getMap()>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>" -> "<org.jfree.chart.renderer.AbstractRenderer: java.lang.Class class$(java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.DateAxis: void <init>(java.lang.String)>";
"<TimeSeries: int getIndex(org.jfree.data.time.RegularTimePeriod)>" -> "<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,double)>";
"<XYPolygonAnnotation: void <init>(double[],java.awt.Stroke,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
"<LegendGraphic: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.block.AbstractBlock: boolean equals(java.lang.Object)>";
"<axis.DateAxis: void setMaximumDate(java.util.Date)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<TimePeriodValues: void <init>(java.lang.Comparable,java.lang.String,java.lang.String)>" -> "<org.jfree.data.general.Series: void <init>(java.lang.Comparable)>";
"<renderer.xy.ClusteredXYBarRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: java.lang.Object clone()>";
"<LegendGraphic: java.lang.Object clone()>" -> "<org.jfree.chart.block.AbstractBlock: java.lang.Object clone()>";
"<title.Title: void removeChangeListener(org.jfree.chart.event.TitleChangeListener)>" -> "<org.jfree.chart.title.Title: java.lang.Class class$(java.lang.String)>";
"<dial.DialValueIndicator: void setFont(java.awt.Font)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWindPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.WindDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<AbstractXYAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.CategoryAxis3D: void <init>(java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,java.util.Locale,boolean,boolean)>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<XYTitleAnnotationDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.chart.block.BlockBorder: void <init>(java.awt.Paint)>";
"<axis.SymbolAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<xy.StackedXYAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<Second: org.jfree.data.time.Second parseSecond(java.lang.String)>" -> "<org.jfree.data.time.Day: org.jfree.data.time.Day parseDay(java.lang.String)>";
"<RectangleConstraint: org.jfree.chart.block.RectangleConstraint toRangeWidth(org.jfree.data.Range)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<ValueAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<xy.XYLineAndShapeRenderer: void setLegendLine(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CombinedRangeCategoryPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<LegendGraphic: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<axis.SegmentedTimeline: org.jfree.chart.axis.SegmentedTimeline newMondayThroughFridayTimeline()>" -> "<org.jfree.chart.axis.SegmentedTimeline: long firstMondayAfter1900()>";
"<renderer.xy.XYDifferenceRenderer: void drawItemPass0(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.xy.XYDifferenceRenderer: void createPolygon(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,boolean,java.util.LinkedList,java.util.LinkedList)>";
"<general.CombinedDataset: int[] getMap()>" -> "<org.jfree.data.general.CombinedDataset: int[] joinMap(int[],int[])>";
"<MeterPlot: void <init>()>" -> "<org.jfree.chart.plot.MeterPlot: void <init>(org.jfree.data.general.ValueDataset)>";
"<renderer.xy.XYAreaRenderer2: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<BarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<PiePlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<HistogramDataset: void addSeries(java.lang.Comparable,double[],int,double,double)>" -> "<org.jfree.data.statistics.HistogramBin: void <init>(double,double)>";
"<editor.DefaultChartEditorFactory: org.jfree.chart.editor.ChartEditor createEditor(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.editor.DefaultChartEditor: void <init>(org.jfree.chart.JFreeChart)>";
"<renderer.xy.XYStepAreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<xy.XYBoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.OutlierListCollection: void <init>()>";
"<statistics.Statistics: double getStdDev(java.lang.Number[])>" -> "<org.jfree.data.statistics.Statistics: double calculateMean(java.lang.Number[])>";
"<renderer.category.LineAndShapeRenderer: void setSeriesLinesVisible(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DefaultBoxAndWhiskerCategoryDataset: void add(org.jfree.data.statistics.BoxAndWhiskerItem,java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset: void updateBounds()>";
"<renderer.xy.XYBarRenderer: void setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.PeriodAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<dial.StandardDialScale: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<xy.MatrixSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<Millisecond: void <init>()>" -> "<org.jfree.data.time.Millisecond: void <init>(java.util.Date)>";
"<DatasetReader: org.jfree.data.category.CategoryDataset readCategoryDatasetFromXML(java.io.InputStream)>" -> "<org.jfree.data.xml.CategoryDatasetHandler: org.jfree.data.category.CategoryDataset getDataset()>";
"<axis.Axis: void notifyListeners(org.jfree.chart.event.AxisChangeEvent)>" -> "<org.jfree.chart.axis.Axis: java.lang.Class class$(java.lang.String)>";
"<util.BooleanList: int hashCode()>" -> "<org.jfree.chart.util.AbstractObjectList: int hashCode()>";
"<RefineryUtilities: void centerFrameOnScreen(java.awt.Window)>" -> "<org.jfree.chart.util.RefineryUtilities: void positionFrameOnScreen(java.awt.Window,double,double)>";
"<title.LegendGraphic: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<LegendTitle: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<ModuloAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.ModuloAxis: double mapValueToFixedRange(double)>";
"<XYPlot: boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>";
"<LegendGraphic: void <init>(java.awt.Shape,java.awt.Paint)>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>()>";
"<LineAndShapeRenderer: void setUseOutlinePaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.SpiderWebPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)>" -> "<org.jfree.chart.labels.StandardCategoryItemLabelGenerator: void <init>()>";
"<TimeSeriesCollection: void <init>()>" -> "<org.jfree.data.time.TimeSeriesCollection: void <init>(org.jfree.data.time.TimeSeries,java.util.TimeZone)>";
"<SpreadsheetDate: int calcSerial(int,int,int)>" -> "<org.jfree.data.time.SerialDate: boolean isLeapYear(int)>";
"<annotations.CategoryLineAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>" -> "<org.jfree.chart.block.LineBorder: void <init>()>";
"<dial.DialCap: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DialCap: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DialBackground: void <init>(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<renderer.xy.XYDifferenceRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<title.TextTitle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<annotations.XYPolygonAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<ObjectUtilities: java.lang.Object clone(java.lang.Object)>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>";
"<NumberAxis: org.jfree.chart.axis.TickUnitSource createStandardTickUnits()>" -> "<org.jfree.chart.axis.TickUnits: void <init>()>";
"<dial.StandardDialRange: void <init>()>" -> "<org.jfree.chart.plot.dial.StandardDialRange: void <init>(double,double,java.awt.Paint)>";
"<plot.PiePlot3D: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.general.PieDataset)>";
"<ChartFactory: org.jfree.chart.JFreeChart createGanttChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.IntervalCategoryDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.category.GanttRenderer: void <init>()>";
"<axis.DateTickUnit: void <init>(int,int,java.text.DateFormat)>" -> "<org.jfree.chart.axis.DateTickUnit: void <init>(int,int,int,int,java.text.DateFormat)>";
"<xy.DefaultTableXYDataset: void updateXPoints()>" -> "<org.jfree.data.xy.DefaultTableXYDataset: void updateXPoints(org.jfree.data.xy.XYSeries)>";
"<axis.SymbolAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<MultipleXYSeriesLabelGenerator: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<dial.DialValueIndicator: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<ChartEditorManager: void <clinit>()>" -> "<org.jfree.chart.editor.DefaultChartEditorFactory: void <init>()>";
"<DialValueIndicator: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<CategoryPlot: void rendererChanged(org.jfree.chart.event.RendererChangeEvent)>" -> "<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>";
"<MonthDateFormat: void <init>(java.util.TimeZone,int)>" -> "<org.jfree.chart.axis.MonthDateFormat: void <init>(java.util.TimeZone,java.util.Locale,int,boolean,boolean)>";
"<KeyedValueComparatorType: void <clinit>()>" -> "<org.jfree.data.KeyedValueComparatorType: void <init>(java.lang.String)>";
"<xy.XYDatasetTableModel: void <init>(org.jfree.data.xy.TableXYDataset)>" -> "<org.jfree.data.xy.XYDatasetTableModel: void <init>()>";
"<annotations.CategoryTextAnnotation: int hashCode()>" -> "<org.jfree.chart.annotations.TextAnnotation: int hashCode()>";
"<LogAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<AbstractRenderer: void <init>()>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<plot.dial.StandardDialRange: void setInnerRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<LegendItem: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.AttributedStringUtilities: boolean equal(java.text.AttributedString,java.text.AttributedString)>";
"<LegendTitle: void <init>(org.jfree.chart.LegendItemSource)>" -> "<org.jfree.chart.block.FlowArrangement: void <init>()>";
"<ThermometerPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.plot.Plot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>";
"<category.LayeredBarRenderer: void <init>()>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<plot.dial.StandardDialScale: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<renderer.category.StackedBarRenderer3D: void setIgnoreZeroValues(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<MinMaxCategoryRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,boolean,boolean)>";
"<StandardDialFrame: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<annotations.XYDrawableAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<block.GridArrangement: org.jfree.chart.util.Size2D arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,double)>";
"<plot.RingPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<ClusteredXYBarRenderer: org.jfree.data.Range findDomainBoundsWithOffset(org.jfree.data.xy.IntervalXYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<title.LegendItemBlockContainer: void <init>(org.jfree.chart.block.Arrangement,org.jfree.data.general.Dataset,java.lang.Comparable)>" -> "<org.jfree.chart.block.BlockContainer: void <init>(org.jfree.chart.block.Arrangement)>";
"<plot.CategoryPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<ChartRenderingInfo: void <init>()>" -> "<org.jfree.chart.ChartRenderingInfo: void <init>(org.jfree.chart.entity.EntityCollection)>";
"<XYSeriesCollection: void <init>(org.jfree.data.xy.XYSeries)>" -> "<org.jfree.data.xy.IntervalXYDelegate: void <init>(org.jfree.data.xy.XYDataset,boolean)>";
"<plot.PieLabelDistributor: void <init>(int)>" -> "<org.jfree.chart.plot.AbstractPieLabelDistributor: void <init>()>";
"<TimeTableXYDataset: void <init>(java.util.TimeZone,java.util.Locale)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<XYPlot: org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<time.TimeSeriesCollection: void setXPosition(org.jfree.data.time.TimePeriodAnchor)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<CyclicNumberAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<ui.BasicProjectInfo: void <init>()>" -> "<org.jfree.chart.ui.Library: void <init>()>";
"<ArcDialFrame: void setExtent(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<TimeSeriesChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.demo.TimeSeriesChartDemo1: javax.swing.JPanel createDemoPanel()>";
"<TextLine: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>" -> "<org.jfree.chart.text.TextFragment: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<QuarterDateFormat: void <init>(java.util.TimeZone,java.lang.String[])>" -> "<org.jfree.chart.axis.QuarterDateFormat: void <init>(java.util.TimeZone,java.lang.String[],boolean)>";
"<xy.XYErrorRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<xy.VectorSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>" -> "<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>";
"<CategoryPointerAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<annotations.CategoryLineAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<labels.StandardCategoryToolTipGenerator: void <init>()>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<xy.XYBlockRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<annotations.CategoryPointerAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<BoxAndWhiskerItem: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<CSV: void <init>()>" -> "<org.jfree.data.io.CSV: void <init>(char,char)>";
"<plot.dial.StandardDialScale: void setMinorTickCount(int)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)>" -> "<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>";
"<plot.MeterPlot: void <init>()>" -> "<org.jfree.chart.plot.MeterPlot: void <init>(org.jfree.data.general.ValueDataset)>";
"<xy.XYDifferenceRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>";
"<LogarithmicAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<axis.Axis: void setAxisLinePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<category.BarRenderer: void setDrawBarOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<time.MovingAverage: org.jfree.data.time.TimeSeries createMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int,int)>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable,java.lang.Class)>";
"<plot.PolarPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<annotations.XYImageAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<DefaultOHLCDataset: void <init>(java.lang.Comparable,org.jfree.data.xy.OHLCDataItem[])>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<event.ChartChangeEvent: void <init>(java.lang.Object)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)>";
"<BooleanList: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.AbstractObjectList: boolean equals(java.lang.Object)>";
"<statistics.DefaultBoxAndWhiskerCategoryDataset: void removeRow(java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset: void updateBounds()>";
"<CombinedRangeXYPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotRenderingInfo: void <init>(org.jfree.chart.ChartRenderingInfo)>";
"<general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<renderer.category.StatisticalLineAndShapeRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<xy.XYStepAreaRenderer: void setShapesFilled(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.dial.StandardDialScale: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<time.Hour: org.jfree.data.time.Hour parseHour(java.lang.String)>" -> "<org.jfree.data.time.Day: org.jfree.data.time.Day parseDay(java.lang.String)>";
"<HistogramDataset: void addSeries(java.lang.Comparable,double[],int)>" -> "<org.jfree.data.statistics.HistogramDataset: double getMinimum(double[])>";
"<PaintUtilities: java.lang.String colorToString(java.awt.Color)>" -> "<org.jfree.chart.util.PaintUtilities: java.lang.Class class$(java.lang.String)>";
"<block.GridArrangement: org.jfree.chart.util.Size2D arrange(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>()>";
"<DefaultPlotEditor: void <init>(org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.ui.LCBLayout: void <init>(int)>";
"<plot.JThermometer: void <init>()>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<annotations.CategoryLineAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<xy.XYSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<ChartUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.StandardURLTagFragmentGenerator: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createMultiplePieChart(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.MultiplePiePlot: void <init>(org.jfree.data.category.CategoryDataset)>";
"<ChartFactory: org.jfree.chart.JFreeChart createScatterPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<plot.MeterPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<NumberAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.AxisState drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>";
"<xy.XYSeriesCollection: org.jfree.data.xy.XYSeries getSeries(java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<renderer.category.CategoryStepRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<renderer.xy.XYBoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.Outlier: void <init>(double,double,double)>";
"<ExtendedCategoryAxis: java.lang.Object clone()>" -> "<org.jfree.chart.axis.CategoryAxis: java.lang.Object clone()>";
"<dial.StandardDialRange: void setInnerRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<plot.MultiplePiePlot: void <init>(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>";
"<CombinedRangeCategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.CategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>";
"<category.MinMaxCategoryRenderer: void setObjectIcon(javax.swing.Icon)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.CategoryAxis3D: void <init>(java.lang.String)>";
"<time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem,boolean)>" -> "<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>";
"<ArcDialFrame: void setStartAngle(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<ChartUtilities: void writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,boolean,int)>" -> "<org.jfree.chart.ChartUtilities: void writeBufferedImageAsPNG(java.io.OutputStream,java.awt.image.BufferedImage,boolean,int)>";
"<CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<XYShapeAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<plot.Plot: void <init>()>" -> "<org.jfree.chart.plot.DefaultDrawingSupplier: void <init>()>";
"<statistics.Statistics: double calculateMean(java.util.Collection)>" -> "<org.jfree.data.statistics.Statistics: double calculateMean(java.util.Collection,boolean)>";
"<plot.PiePlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<axis.CategoryLabelWidthType: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryLabelWidthType: void <init>(java.lang.String)>";
"<XYLineAndShapeRenderer: void setSeriesShapesVisible(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xml.PieDatasetHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<servlet.ServletUtilities: java.lang.String saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.servlet.ServletUtilities: void createTempDir()>";
"<XYLineAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createLineRegion(java.awt.geom.Line2D,float)>";
"<Plot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<DefaultIntervalXYDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<DynamicTimeSeriesCollection: void fireSeriesChanged()>" -> "<org.jfree.data.general.SeriesChangeEvent: void <init>(java.lang.Object)>";
"<PeriodAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<general.CombinedDataset: int getChildPosition(org.jfree.data.general.Dataset)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<renderer.category.BarRenderer: void setItemMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<event.RendererChangeEvent: void <init>(java.lang.Object)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<block.ColorBlock: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.block.AbstractBlock: boolean equals(java.lang.Object)>";
"<CategoryPointerAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.CategoryTextAnnotation: boolean equals(java.lang.Object)>";
"<NumberAxis: org.jfree.chart.axis.TickUnitSource createStandardTickUnits()>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<LegendGraphic: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.StackedXYBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.StackedXYBarRenderer: void <init>(double)>";
"<PeriodAxis: void setAutoRangeTimePeriodClass(java.lang.Class)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<SerialDate: org.jfree.data.time.SerialDate getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: boolean isValidWeekdayCode(int)>";
"<time.SerialDate: int lastDayOfMonth(int,int)>" -> "<org.jfree.data.time.SerialDate: boolean isLeapYear(int)>";
"<CategoryMarker: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Marker: boolean equals(java.lang.Object)>";
"<dial.DialValueIndicator: void setAngle(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYSeriesCollection: org.jfree.data.xy.XYSeries getSeries(java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<StandardXYZURLGenerator: java.lang.String generateURL(org.jfree.data.xy.XYZDataset,int,int)>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: java.lang.String generateURL(org.jfree.data.xy.XYDataset,int,int)>";
"<CandlestickRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<axis.Axis: void setLabelPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<general.CombinedDataset: java.lang.Number getOpen(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<xml.DatasetReader: org.jfree.data.category.CategoryDataset readCategoryDatasetFromXML(java.io.InputStream)>" -> "<org.jfree.data.xml.CategoryDatasetHandler: void <init>()>";
"<category.BarRenderer: void <init>()>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>()>";
"<CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions createDownRotationLabelPositions(double)>" -> "<org.jfree.chart.axis.CategoryLabelPositions: void <init>(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)>";
"<CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.WindNeedle: void <init>()>";
"<DefaultAxisEditor: org.jfree.chart.util.RectangleInsets getLabelInsets()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<renderer.xy.XYLineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State: boolean access$002(org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State,boolean)>";
"<CombinedRangeXYPlot: void add(org.jfree.chart.plot.XYPlot,int)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<DefaultKeyedValueDataset: void setValue(java.lang.Comparable,java.lang.Number)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<plot.dial.StandardDialFrame: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<title.TextTitle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.title.Title: boolean equals(java.lang.Object)>";
"<XYShapeAnnotation: void <init>(java.awt.Shape)>" -> "<org.jfree.chart.annotations.XYShapeAnnotation: void <init>(java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<StackedAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AreaRenderer: boolean equals(java.lang.Object)>";
"<renderer.category.AbstractCategoryItemRenderer: java.awt.geom.Point2D calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<StandardXYURLGenerator: void <init>()>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>(java.lang.String,java.lang.String,java.lang.String)>";
"<HighLowRenderer: void setDrawOpenTicks(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<util.RectangleEdge: void <clinit>()>" -> "<org.jfree.chart.util.RectangleEdge: void <init>(java.lang.String)>";
"<xy.CyclicXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: void <init>(double[],double[],org.jfree.data.xy.XYDataset)>";
"<io.CSV: java.util.List extractColumnKeys(java.lang.String)>" -> "<org.jfree.data.io.CSV: java.lang.String removeStringDelimiters(java.lang.String)>";
"<axis.ValueAxis: double findMaximumTickLabelWidth(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<FastScatterPlot: org.jfree.data.Range calculateYDataRange(float[][])>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<Axis: void addChangeListener(org.jfree.chart.event.AxisChangeListener)>" -> "<org.jfree.chart.axis.Axis: java.lang.Class class$(java.lang.String)>";
"<labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<CombinedDataset: java.lang.Number getLow(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<title.LegendGraphic: java.lang.Object clone()>" -> "<org.jfree.chart.block.AbstractBlock: java.lang.Object clone()>";
"<PolarPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double)>";
"<plot.XYPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<CandlestickRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<LineAndShapeRenderer: void setBaseShapesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createCandlestickChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)>" -> "<org.jfree.chart.axis.DateAxis: void <init>(java.lang.String)>";
"<ChartEntity: java.lang.String getShapeCoords()>" -> "<org.jfree.chart.entity.ChartEntity: java.lang.String getRectCoords(java.awt.geom.Rectangle2D)>";
"<ThermometerPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(org.jfree.chart.util.UnitType,double,double,double,double)>";
"<DefaultStatisticalCategoryDataset: void removeColumn(java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultStatisticalCategoryDataset: void updateBounds()>";
"<renderer.category.WaterfallBarRenderer: void <init>(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<XYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<BarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<renderer.category.GanttRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.IntervalBarRenderer: boolean equals(java.lang.Object)>";
"<ScatterRenderer: void <init>()>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<ModuloAxis: double transStart(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<Day: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int,int,int)>";
"<XYLineAndShapeRenderer: void setUseFillPaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ArrowNeedle: void <init>(boolean)>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<TimeTableXYDataset: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<ChartRenderingInfo: void clear()>" -> "<org.jfree.chart.plot.PlotRenderingInfo: void <init>(org.jfree.chart.ChartRenderingInfo)>";
"<xml.PieDatasetHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>" -> "<org.jfree.data.xml.ItemHandler: void <init>(org.jfree.data.xml.RootHandler,org.xml.sax.helpers.DefaultHandler)>";
"<StandardXYItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>";
"<ValueAxis: void setVerticalTickLabels(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<DefaultWindDataset: void <init>(java.lang.Object[][][])>" -> "<org.jfree.data.xy.DefaultWindDataset: java.util.List seriesNameListFromDataArray(java.lang.Object[][])>";
"<CombinedDomainCategoryPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.XYSeries: void update(java.lang.Number,java.lang.Number)>" -> "<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>";
"<xy.CandlestickRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<DefaultPieDataset: void <init>()>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createBubbleChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYZDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYBubbleRenderer: void <init>(int)>";
"<time.TimePeriodValues: void <init>(java.lang.Comparable,java.lang.String,java.lang.String)>" -> "<org.jfree.data.general.Series: void <init>(java.lang.Comparable)>";
"<NormalizedMatrixSeries: void zeroAll()>" -> "<org.jfree.data.xy.MatrixSeries: void zeroAll()>";
"<MeterPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<StrokeList: java.lang.Object clone()>" -> "<org.jfree.chart.util.AbstractObjectList: java.lang.Object clone()>";
"<time.Hour: void <init>(int,int,int,int)>" -> "<org.jfree.data.time.Day: void <init>(int,int,int)>";
"<StackedXYBarRenderer: void <init>(double)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: void <init>(double)>";
"<dial.StandardDialRange: void <init>(double,double,java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerCategoryDataset,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<xy.XYBarRenderer: void setLegendBar(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font)>";
"<XYErrorRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<DefaultXYDataset: void addSeries(java.lang.Comparable,double[][])>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<axis.DateAxis: java.util.Date previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)>" -> "<org.jfree.data.time.Month: void <init>(java.util.Date,java.util.TimeZone)>";
"<demo.TimeSeriesChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<DefaultNumberAxisEditor: void <init>(org.jfree.chart.axis.NumberAxis)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: void <init>(org.jfree.chart.axis.Axis)>";
"<StackedXYAreaRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<axis.MarkerAxisBand: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double)>" -> "<org.jfree.chart.axis.MarkerAxisBand: void drawStringInRect(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.Font,java.lang.String)>";
"<axis.SubCategoryAxis: void setSubLabelFont(java.awt.Font)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<CategoryTick: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.Tick: boolean equals(java.lang.Object)>";
"<time.TimeSeriesCollection: void <init>(java.util.TimeZone)>" -> "<org.jfree.data.time.TimeSeriesCollection: void <init>(org.jfree.data.time.TimeSeries,java.util.TimeZone)>";
"<TimeSeries: boolean equals(java.lang.Object)>" -> "<org.jfree.data.general.Series: boolean equals(java.lang.Object)>";
"<plot.RingPlot: void <init>()>" -> "<org.jfree.chart.plot.RingPlot: void <init>(org.jfree.data.general.PieDataset)>";
"<category.LineRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<Series: void addChangeListener(org.jfree.data.general.SeriesChangeListener)>" -> "<org.jfree.data.general.Series: java.lang.Class class$(java.lang.String)>";
"<DateTickUnit: void <init>(int,int)>" -> "<org.jfree.chart.axis.DateTickUnit: void <init>(int,int,java.text.DateFormat)>";
"<plot.SpiderWebPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<LegendGraphic: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<CategoryItemEntity: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<time.SpreadsheetDate: void <init>(int)>" -> "<org.jfree.data.time.SerialDate: int leapYearCount(int)>";
"<title.Title: void <init>(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment)>" -> "<org.jfree.chart.title.Title: void <init>(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<TextBox: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<dial.ArcDialFrame: void setExtent(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<util.AbstractObjectList: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.Object)>";
"<DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<renderer.xy.XYLineAndShapeRenderer: void setBaseLinesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWaferMapChart(java.lang.String,org.jfree.data.general.WaferMapDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.WaferMapPlot: void <init>(org.jfree.data.general.WaferMapDataset)>";
"<PiePlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<renderer.xy.StackedXYBarRenderer: void <init>(double)>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)>";
"<BorderArrangement: org.jfree.chart.util.Size2D arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<block.LabelBlock: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<block.LabelBlock: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<XYImageAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<xy.XYStepAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<time.TimePeriodValues: void add(org.jfree.data.time.TimePeriod,double)>" -> "<org.jfree.data.time.TimePeriodValues: void add(org.jfree.data.time.TimePeriodValue)>";
"<StatisticalBarRenderer: void setErrorIndicatorStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)>" -> "<org.jfree.chart.axis.PeriodAxis: java.lang.Class class$(java.lang.String)>";
"<category.WaterfallBarRenderer: void <init>(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<CategoryLabelPositions: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions createDownRotationLabelPositions(double)>";
"<category.StackedBarRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: boolean equals(java.lang.Object)>";
"<LookupPaintScale: void add(double,java.awt.Paint)>" -> "<org.jfree.chart.renderer.LookupPaintScale$PaintItem: void <init>(org.jfree.chart.renderer.LookupPaintScale,double,java.awt.Paint)>";
"<JDBCXYDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<MinMaxCategoryRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<HistogramDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<annotations.XYLineAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<axis.CategoryAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.axis.CategoryAxis: java.util.Map readPaintMap(java.io.ObjectInputStream)>";
"<plot.dial.StandardDialRange: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<axis.NumberAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<SimpleTimePeriod: void <init>(long,long)>" -> "<org.jfree.data.time.SimpleTimePeriod: void <init>(java.util.Date,java.util.Date)>";
"<Series: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.general.Series: void <init>(java.lang.Comparable,java.lang.String)>";
"<plot.dial.DialValueIndicator: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<axis.CyclicNumberAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.CyclicNumberAxis$CycleBoundTick: void <init>(boolean,java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>";
"<text.TextBox: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<XYLine3DRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<Week: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Week: void <init>(int,int)>";
"<Axis: void setLabelFont(java.awt.Font)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<renderer.category.LevelRenderer: void setItemMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ValueAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.WaferMapRenderer: java.awt.Paint getChipColor(java.lang.Number)>" -> "<org.jfree.chart.renderer.WaferMapRenderer: int getPaintIndex(java.lang.Number)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardPieURLGenerator: void <init>()>";
"<category.LineRenderer3D: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<general.DefaultValueDataset: void setValue(java.lang.Number)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<block.ColumnArrangement: org.jfree.chart.util.Size2D arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<category.MinMaxCategoryRenderer: void setGroupStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CombinedRangeCategoryPlot: void <init>()>" -> "<org.jfree.chart.axis.NumberAxis: void <init>()>";
"<CyclicNumberAxis: void <init>(double,java.lang.String)>" -> "<org.jfree.chart.axis.CyclicNumberAxis: void <init>(double,double,java.lang.String)>";
"<renderer.xy.StackedXYAreaRenderer2: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer2: java.lang.Object clone()>";
"<ui.StrokeChooserPanel: void <init>(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])>" -> "<org.jfree.chart.ui.StrokeSample: void <init>(java.awt.Stroke)>";
"<CombinedDomainCategoryPlot: void add(org.jfree.chart.plot.CategoryPlot,int)>" -> "<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<CyclicNumberAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<title.ImageTitle: org.jfree.chart.util.Size2D drawVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBubbleChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYZDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<xy.CandlestickRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<MeterInterval: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<DialCap: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)>" -> "<org.jfree.chart.text.TextUtilities: int nextLineBreak(java.lang.String,int,float,java.text.BreakIterator,org.jfree.chart.text.TextMeasurer)>";
"<FastScatterPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.DefaultTableXYDataset: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>()>";
"<StackedXYBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.StackedXYBarRenderer: void <init>(double)>";
"<SerialUtilities: boolean isSerializable(java.lang.Class)>" -> "<org.jfree.chart.util.SerialUtilities: java.lang.Class class$(java.lang.String)>";
"<plot.CombinedDomainXYPlot: void <init>()>" -> "<org.jfree.chart.axis.NumberAxis: void <init>()>";
"<BasicProjectInfo: void setVersion(java.lang.String)>" -> "<org.jfree.chart.ui.Library: void setVersion(java.lang.String)>";
"<DefaultKeyedValueDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<ui.ProjectInfo: void <init>()>" -> "<org.jfree.chart.ui.BasicProjectInfo: void <init>()>";
"<time.TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,double,boolean)>" -> "<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,double)>";
"<MultipleXYSeriesLabelGenerator: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.String)>";
"<AbstractXYItemRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.awt.geom.Point2D calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>";
"<IntervalMarker: void <init>(double,double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>" -> "<org.jfree.chart.plot.Marker: void <init>(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>()>";
"<DialCap: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<PeriodAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<XYPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<BarRenderer: void setItemMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CombinedDomainXYPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<plot.dial.StandardDialScale: void setMinorTickLength(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<renderer.category.StackedBarRenderer3D: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset)>";
"<title.TextTitle: void <init>(java.lang.String)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<plot.IntervalMarker: void setEndValue(double)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<plot.dial.DialPointer: void <init>(int)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<plot.CompassPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<Week: void <init>()>" -> "<org.jfree.data.time.Week: void <init>(java.util.Date)>";
"<time.DynamicTimeSeriesCollection: void findDomainLimits()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<labels.BoxAndWhiskerToolTipGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<renderer.xy.HighLowRenderer: void setCloseTickPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<JFreeChart: org.jfree.chart.entity.EntityCollection drawTitle(org.jfree.chart.title.Title,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<CandlestickRenderer: void <init>(double)>" -> "<org.jfree.chart.labels.HighLowItemLabelGenerator: void <init>()>";
"<CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.ShipNeedle: void <init>()>";
"<plot.SpiderWebPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<RefineryUtilities: void positionDialogRelativeToParent(java.awt.Dialog,double,double)>" -> "<org.jfree.chart.util.RefineryUtilities: java.awt.Rectangle getMaximumWindowBounds()>";
"<xy.XYAreaRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<time.TimeSeriesCollection: void <init>(org.jfree.data.time.TimeSeries,java.util.TimeZone)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<BarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)>";
"<axis.LogAxis: void selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<AbstractBlock: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<NumberAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createStandardTickUnits()>";
"<StackedBarRenderer3D: void <init>(double,double)>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: void <init>(double,double)>";
"<category.BoxAndWhiskerRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<BorderArrangement: org.jfree.chart.util.Size2D arrangeRR(org.jfree.chart.block.BlockContainer,org.jfree.data.Range,org.jfree.data.Range,java.awt.Graphics2D)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(org.jfree.data.Range,org.jfree.data.Range)>";
"<DialPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<LineAndShapeRenderer: void setSeriesLinesVisible(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<title.PaintScaleLegend: void setStripOutlineStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<xy.CategoryTableXYDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<renderer.category.ScatterRenderer: void setSeriesShapesFilled(int,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DatasetUtilities: org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.String,java.lang.String,java.lang.Number[][])>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<PeriodAxis: void <init>(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: java.lang.Class downsize(java.lang.Class)>";
"<xy.XYLineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State: boolean access$002(org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State,boolean)>";
"<TextUtilities: float[] deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<category.StatisticalBarRenderer: void setErrorIndicatorPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.NumberAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<dial.ArcDialFrame: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<dial.StandardDialScale: void <init>(double,double,double,double,double,int)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<renderer.category.ScatterRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<LogAxis: void selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<DefaultKeyedValues2DDataset: void <init>()>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<xy.ClusteredXYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>";
"<title.TextTitle: void setURLText(java.lang.String)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<renderer.category.StatisticalBarRenderer: void setErrorIndicatorPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.DateAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.data.time.Year: void <init>(java.util.Date,java.util.TimeZone)>";
"<time.Month: org.jfree.data.time.Month parseMonth(java.lang.String)>" -> "<org.jfree.data.time.Month: int findSeparator(java.lang.String)>";
"<renderer.OutlierListCollection: boolean add(org.jfree.chart.renderer.Outlier)>" -> "<org.jfree.chart.renderer.OutlierListCollection: boolean updateOutlierList(org.jfree.chart.renderer.OutlierList,org.jfree.chart.renderer.Outlier)>";
"<ColorBlock: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<ValueAxis: java.lang.Object clone()>" -> "<org.jfree.chart.axis.Axis: java.lang.Object clone()>";
"<AbstractCategoryItemRenderer: void setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<NormalizedMatrixSeries: void <init>(java.lang.String,int,int)>" -> "<org.jfree.data.xy.MatrixSeries: void <init>(java.lang.String,int,int)>";
"<axis.NumberAxis: void setMarkerBand(org.jfree.chart.axis.MarkerAxisBand)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<CategoryLabelPosition: void <init>()>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)>";
"<plot.CategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<category.LineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<axis.LogAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<axis.Axis: void setTickLabelInsets(org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<axis.SegmentedTimeline: void addException(org.jfree.chart.axis.SegmentedTimeline$Segment)>" -> "<org.jfree.chart.axis.SegmentedTimeline: int binarySearchExceptionSegments(org.jfree.chart.axis.SegmentedTimeline$Segment)>";
"<PiePlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerCategoryDataset,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<time.Year: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Year: void <init>(int)>";
"<time.Quarter: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Quarter: void <init>(int,int)>";
"<Second: org.jfree.data.time.Minute getMinute()>" -> "<org.jfree.data.time.Minute: void <init>(int,org.jfree.data.time.Hour)>";
"<entity.ChartEntity: void <init>(java.awt.Shape)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String)>";
"<xy.XYBoxAndWhiskerRenderer: void <init>(double)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: float[] deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor,java.awt.geom.Rectangle2D)>";
"<TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem,boolean)>" -> "<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>";
"<editor.DefaultTitleEditor: void <init>(org.jfree.chart.title.Title)>" -> "<org.jfree.chart.editor.DefaultTitleEditor: void enableOrDisableControls()>";
"<statistics.SimpleHistogramDataset: void addObservations(double[])>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<util.PaintList: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<block.LabelBlock: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<axis.DateAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<xy.XYBlockRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<renderer.category.MinMaxCategoryRenderer: void setGroupPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.Plot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<dial.StandardDialScale: void setMinorTickPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<axis.SegmentedTimeline: void addException(long,long)>" -> "<org.jfree.chart.axis.SegmentedTimeline: void addException(org.jfree.chart.axis.SegmentedTimeline$Segment)>";
"<XYPlot: void setDataset(int,org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.TableXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<title.LegendTitle: org.jfree.chart.block.Block createLegendItemBlock(org.jfree.chart.LegendItem)>" -> "<org.jfree.chart.title.LegendGraphic: void <init>(java.awt.Shape,java.awt.Paint)>";
"<time.Minute: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Minute: void <init>(int,org.jfree.data.time.Hour)>";
"<xy.XYDifferenceRenderer: void setNegativePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.dial.StandardDialFrame: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.dial.DialValueIndicator: void setAngle(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<xy.XYAreaRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<axis.ValueAxis: void setUpArrow(java.awt.Shape)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<DefaultKeyedValueDataset: void setValue(java.lang.Comparable,java.lang.Number)>" -> "<org.jfree.data.DefaultKeyedValue: void <init>(java.lang.Comparable,java.lang.Number)>";
"<DefaultBoxAndWhiskerCategoryDataset: void clear()>" -> "<org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset: void updateBounds()>";
"<category.StatisticalBarRenderer: void setErrorIndicatorStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.ThermometerPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.plot.Plot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>";
"<category.BarRenderer3D: void <init>()>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: void <init>(double,double)>";
"<labels.MultipleXYSeriesLabelGenerator: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<AbstractObjectList: void <init>()>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>(int)>";
"<plot.dial.DialBackground: void setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<SerialDate: org.jfree.data.time.SerialDate getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: boolean isValidWeekdayCode(int)>";
"<labels.StandardCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<CategoryAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.CategoryTick: void <init>(java.lang.Comparable,org.jfree.chart.text.TextBlock,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<annotations.CategoryTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<renderer.xy.XYLine3DRenderer: void setWallPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer$State: boolean access$102(org.jfree.chart.renderer.xy.StandardXYItemRenderer$State,boolean)>";
"<text.TextLine: void <init>(java.lang.String)>" -> "<org.jfree.chart.text.TextLine: void <init>(java.lang.String,java.awt.Font)>";
"<LegendItem: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<CombinedDomainCategoryPlot: void <init>(org.jfree.chart.axis.CategoryAxis)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<category.GanttRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.dial.DialTextAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<ohlc.OHLCSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>" -> "<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>";
"<xy.XYLineAndShapeRenderer: void drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)>";
"<renderer.xy.XYBarRenderer: void setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<MinMaxCategoryRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,boolean,boolean)>";
"<DefaultBoxAndWhiskerCategoryDataset: void removeColumn(java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset: void updateBounds()>";
"<annotations.CategoryPointerAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.CategoryTextAnnotation: boolean equals(java.lang.Object)>";
"<AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<HighLowItemLabelGenerator: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.Object)>";
"<XYStepRenderer: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,double)>";
"<axis.DateTickUnit: java.util.Date addToDate(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.chart.axis.DateTickUnit: int getCalendarField(int)>";
"<DateAxis: void autoAdjustRange()>" -> "<org.jfree.data.time.DateRange: void <init>(java.util.Date,java.util.Date)>";
"<renderer.xy.StackedXYAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<axis.SegmentedTimeline: org.jfree.chart.axis.SegmentedTimeline newMondayThroughFridayTimeline()>" -> "<org.jfree.chart.axis.SegmentedTimeline: void <init>(long,int,int)>";
"<renderer.AreaRendererEndType: void <clinit>()>" -> "<org.jfree.chart.renderer.AreaRendererEndType: void <init>(java.lang.String)>";
"<xy.YIntervalSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<CombinedRangeXYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<util.RelativeDateFormat: void main(java.lang.String[])>" -> "<org.jfree.chart.util.RelativeDateFormat: void <init>(long)>";
"<DefaultStatisticalCategoryDataset: void add(java.lang.Number,java.lang.Number,java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.statistics.MeanAndStandardDeviation: void <init>(java.lang.Number,java.lang.Number)>";
"<time.FixedMillisecond: void <init>(long)>" -> "<org.jfree.data.time.FixedMillisecond: void <init>(java.util.Date)>";
"<plot.CombinedDomainXYPlot: void <init>(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<time.MovingAverage: org.jfree.data.xy.XYSeries createMovingAverage(org.jfree.data.xy.XYDataset,int,java.lang.String,double,double)>" -> "<org.jfree.data.xy.XYSeries: void <init>(java.lang.Comparable)>";
"<DialValueIndicator: void <init>(int)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<renderer.category.BarRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<XYStepRenderer: int hashCode()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: int hashCode()>";
"<Axis: void setTickLabelPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<StandardPieSectionLabelGenerator: void <init>(java.util.Locale)>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>(java.lang.String,java.util.Locale)>";
"<CombinedRangeXYPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<StandardDialRange: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWindPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.WindDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<XYBarRenderer: void setBase(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.XYStepAreaRenderer: void setShapesFilled(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DefaultValueDataset: void setValue(java.lang.Number)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<servlet.ServletUtilities: java.lang.String saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.servlet.ServletUtilities: void registerChartForDeletion(java.io.File,javax.servlet.http.HttpSession)>";
"<annotations.XYTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<XYSeries: org.jfree.data.xy.XYSeries createCopy(int,int)>" -> "<org.jfree.data.general.Series: java.lang.Object clone()>";
"<plot.PiePlot: void drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)>";
"<StandardPieURLGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<plot.SpiderWebPlot: void setDataset(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<renderer.category.LineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<xy.WindItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<xy.MatrixSeriesCollection: void <init>(org.jfree.data.xy.MatrixSeries)>" -> "<org.jfree.data.xy.AbstractXYZDataset: void <init>()>";
"<plot.dial.StandardDialRange: void <init>()>" -> "<org.jfree.chart.plot.dial.StandardDialRange: void <init>(double,double,java.awt.Paint)>";
"<xy.XYErrorRenderer: void setCapLength(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<entity.ChartEntity: java.lang.String getImageMapAreaTag(org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String htmlEscape(java.lang.String)>";
"<SpiderWebPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.category.CategoryDataset)>";
"<StandardDialFrame: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<JFreeChart: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<editor.DefaultTitleEditor: void attemptModifyShowTitle()>" -> "<org.jfree.chart.editor.DefaultTitleEditor: void enableOrDisableControls()>";
"<plot.SeriesRenderingOrder: void <clinit>()>" -> "<org.jfree.chart.plot.SeriesRenderingOrder: void <init>(java.lang.String)>";
"<PeriodAxis: void <init>(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>" -> "<org.jfree.chart.axis.PeriodAxis: java.lang.Class class$(java.lang.String)>";
"<dial.DialValueIndicator: void setTemplateValue(java.lang.Number)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<title.PaintScaleLegend: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<time.TimePeriodValuesCollection: void <init>(org.jfree.data.time.TimePeriodValues)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<DefaultKeyedValues: void removeValue(int)>" -> "<org.jfree.data.DefaultKeyedValues: void rebuildIndex()>";
"<plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<renderer.category.MinMaxCategoryRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<category.DefaultIntervalCategoryDataset: java.lang.Object clone()>" -> "<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] clone(java.lang.Number[][])>";
"<Millisecond: void <init>(int,int,int,int,int,int,int)>" -> "<org.jfree.data.time.Second: void <init>(int,int,int,int,int,int)>";
"<SerialDate: org.jfree.data.time.SerialDate addYears(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int,int,int)>";
"<BarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer: java.awt.geom.Point2D calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)>";
"<CombinedRangeCategoryPlot: void add(org.jfree.chart.plot.CategoryPlot,int)>" -> "<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<renderer.xy.XYStepRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.lang.Object clone()>";
"<LegendGraphic: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<StandardXYZURLGenerator: void <init>()>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>()>";
"<axis.CyclicNumberAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<renderer.xy.XYStepRenderer: int hashCode()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: int hashCode()>";
"<xy.XYLineAndShapeRenderer: void setSeriesShapesVisible(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<MonthDateFormat: void <init>(java.util.TimeZone,java.util.Locale,int,boolean,boolean)>" -> "<org.jfree.chart.axis.MonthDateFormat: void <init>(java.util.TimeZone,java.util.Locale,int,boolean[],java.text.DateFormat)>";
"<renderer.xy.ClusteredXYBarRenderer: void <init>(double,boolean)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: void <init>(double)>";
"<AbstractCategoryItemRenderer: void setLegendItemLabelGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<time.Second: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Second: void <init>(int,org.jfree.data.time.Minute)>";
"<axis.CategoryAxis: void setTickLabelFont(java.lang.Comparable,java.awt.Font)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<XYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<dial.DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<WaferMapRenderer: void setPlot(org.jfree.chart.plot.WaferMapPlot)>" -> "<org.jfree.chart.renderer.WaferMapRenderer: void makePaintIndex()>";
"<JDBCXYDataset: void <init>(java.sql.Connection)>" -> "<org.jfree.data.jdbc.JDBCXYDataset: void <init>()>";
"<axis.LogAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<Axis: void setLabelToolTip(java.lang.String)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<XYCoordinate: void <init>()>" -> "<org.jfree.data.xy.XYCoordinate: void <init>(double,double)>";
"<plot.WaferMapPlot: void <init>()>" -> "<org.jfree.chart.plot.WaferMapPlot: void <init>(org.jfree.data.general.WaferMapDataset)>";
"<text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)>" -> "<org.jfree.chart.text.TextFragment: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<plot.XYPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<DataUtilities: java.lang.Number[][] createNumberArray2D(double[][])>" -> "<org.jfree.data.DataUtilities: java.lang.Number[] createNumberArray(double[])>";
"<renderer.category.StatisticalLineAndShapeRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<axis.SubCategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>";
"<TimeSeriesTableModel: void <init>(org.jfree.data.time.TimeSeries)>" -> "<org.jfree.data.time.TimeSeriesTableModel: void <init>(org.jfree.data.time.TimeSeries,boolean)>";
"<DefaultXYZDataset: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractXYZDataset: java.lang.Object clone()>";
"<plot.XYPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<general.WaferMapDataset: void <init>(int,int,java.lang.Number)>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<renderer.xy.HighLowRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.xy.XYStepAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<KeyedObjects: void removeValue(java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<statistics.DefaultMultiValueCategoryDataset: void <init>()>" -> "<org.jfree.data.KeyedObjects2D: void <init>()>";
"<category.LineAndShapeRenderer: void setSeriesLinesVisible(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.PeriodAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<DialTextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<title.TextTitle: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<xy.XYLineAndShapeRenderer: void setUseOutlinePaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.MeterPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<renderer.category.LineRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<DateRange: void <init>()>" -> "<org.jfree.data.time.DateRange: void <init>(java.util.Date,java.util.Date)>";
"<annotations.XYPointerAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<KeyToGroupMap: void <init>()>" -> "<org.jfree.data.KeyToGroupMap: void <init>(java.lang.Comparable)>";
"<TimeSeriesTableModel: java.lang.Class getColumnClass(int)>" -> "<org.jfree.data.time.TimeSeriesTableModel: java.lang.Class class$(java.lang.String)>";
"<jdbc.JDBCPieDataset: void <init>(java.sql.Connection)>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<axis.NumberAxis: void setNumberFormatOverride(java.text.NumberFormat)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<time.SerialDate: org.jfree.data.time.SerialDate getFollowingDayOfWeek(int)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate getFollowingDayOfWeek(int,org.jfree.data.time.SerialDate)>";
"<PaintScaleLegend: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.ValueAxis: boolean equals(java.lang.Object)>";
"<XYAreaRenderer2: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<SymbolAxis: void drawGridBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,java.util.List)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<xy.VectorSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<labels.StandardXYZToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat)>";
"<IntervalCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.StandardCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<plot.CombinedRangeCategoryPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<xy.DeviationRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.DeviationRenderer$State: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<LineAndShapeRenderer: void setItemMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<util.ObjectUtilities: boolean isJDK14()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.String[] parseVersions(java.lang.String)>";
"<axis.CategoryAxis: void setTickLabelPaint(java.lang.Comparable,java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<renderer.AbstractRenderer: void <init>()>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<general.DefaultPieDataset: void <init>()>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<FastScatterPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<StandardDialScale: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<plot.dial.DialValueIndicator: void setFrameAnchor(org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<StandardPieToolTipGenerator: void <init>(java.util.Locale)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>(java.lang.String,java.util.Locale)>";
"<XYBarRenderer: void setMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.AbstractXYItemRenderer: void <init>()>" -> "<org.jfree.chart.labels.StandardXYSeriesLabelGenerator: void <init>(java.lang.String)>";
"<TextBlock: java.awt.Shape calculateBounds(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape rotateShape(java.awt.Shape,double,float,float)>";
"<XYLine3DRenderer: void drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)>";
"<block.BorderArrangement: org.jfree.chart.util.Size2D arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<BlockBorder: void <init>(double,double,double,double)>" -> "<org.jfree.chart.block.BlockBorder: void <init>(org.jfree.chart.util.RectangleInsets,java.awt.Paint)>";
"<axis.ValueAxis: void setUpperMargin(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<XYIntervalSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.xy.XYIntervalSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.geom.Line2D,java.awt.geom.Line2D)>";
"<TextTitle: void setText(java.lang.String)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<XYDifferenceRenderer: void setPositivePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.CategoryTableXYDataset: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<TimeSeries: int hashCode()>" -> "<org.jfree.data.general.Series: int hashCode()>";
"<editor.DefaultAxisEditor: org.jfree.chart.editor.DefaultAxisEditor getInstance(org.jfree.chart.axis.Axis)>" -> "<org.jfree.chart.editor.DefaultNumberAxisEditor: void <init>(org.jfree.chart.axis.NumberAxis)>";
"<XYImageAnnotation: void <init>(double,double,java.awt.Image)>" -> "<org.jfree.chart.annotations.XYImageAnnotation: void <init>(double,double,java.awt.Image,org.jfree.chart.util.RectangleAnchor)>";
"<XYLineAndShapeRenderer: void setBaseShapesFilled(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.MiddlePinNeedle: void <init>()>";
"<XYTitleAnnotationDemo1: org.jfree.data.xy.XYDataset createDataset()>" -> "<org.jfree.experimental.chart.demo.XYTitleAnnotationDemo1: java.lang.Class class$(java.lang.String)>";
"<Year: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Year: void <init>(int)>";
"<SubCategoryAxis: org.jfree.chart.axis.AxisState drawSubCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<dial.StandardDialRange: void setScaleIndex(int)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<JFreeChart: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<XYPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePoint2D(java.awt.geom.Point2D,java.io.ObjectOutputStream)>";
"<block.AbstractBlock: org.jfree.data.Range trimToContentWidth(org.jfree.data.Range)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>()>";
"<DialValueIndicator: void <init>()>" -> "<org.jfree.chart.plot.dial.DialValueIndicator: void <init>(int)>";
"<renderer.category.BoxAndWhiskerRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<renderer.category.GanttRenderer: void setIncompletePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CategoryTextAnnotation: int hashCode()>" -> "<org.jfree.chart.annotations.TextAnnotation: int hashCode()>";
"<statistics.BoxAndWhiskerItem: void <init>(double,double,double,double,double,double,double,double,java.util.List)>" -> "<org.jfree.data.statistics.BoxAndWhiskerItem: void <init>(java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.util.List)>";
"<CategoryPlot: java.util.List getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)>" -> "<org.jfree.chart.plot.CategoryPlot: java.util.List datasetsMappedToDomainAxis(int)>";
"<DialTextAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<time.Second: org.jfree.data.time.Minute getMinute()>" -> "<org.jfree.data.time.Minute: void <init>(int,org.jfree.data.time.Hour)>";
"<renderer.xy.AbstractXYItemRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.awt.geom.Point2D calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>";
"<renderer.xy.CyclicXYItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>()>";
"<block.BlockBorder: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<Plot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<xy.XYAreaRenderer2: void setOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.XYBlockRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<axis.Axis: void setLabelInsets(org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<renderer.xy.XYLineAndShapeRenderer: void setSeriesLinesVisible(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: org.jfree.chart.labels.StandardXYToolTipGenerator getTimeSeriesInstance()>";
"<BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List,boolean)>" -> "<org.jfree.data.statistics.BoxAndWhiskerCalculator: double calculateQ1(java.util.List)>";
"<ChartFactory: org.jfree.chart.JFreeChart createMultiplePieChart3D(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardPieURLGenerator: void <init>()>";
"<ChartUtilities: void saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int)>" -> "<org.jfree.chart.ChartUtilities: void saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>";
"<DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<CategoryPointerAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<plot.PolarPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<YIntervalSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<category.BarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<plot.SpiderWebPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<ChartUtilities: void writeBufferedImageAsJPEG(java.io.OutputStream,float,java.awt.image.BufferedImage)>" -> "<org.jfree.chart.encoders.EncoderUtil: void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float)>";
"<entity.LegendItemEntity: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.xy.XYDifferenceRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<time.TimeSeriesCollection: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<DynamicTimeSeriesCollection: void <init>(int,int)>" -> "<org.jfree.data.time.Millisecond: void <init>()>";
"<editor.DefaultPlotEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultPlotEditor: void attemptDrawLinesSelection()>";
"<renderer.xy.CandlestickRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.CandlestickRenderer: void <init>(double)>";
"<labels.StandardPieToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractPieItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<Second: void <init>()>" -> "<org.jfree.data.time.Second: void <init>(java.util.Date)>";
"<SubCategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<DialValueIndicator: void setInsets(org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<AreaRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<util.RefineryUtilities: java.awt.Rectangle getMaximumWindowBounds()>" -> "<org.jfree.chart.util.RefineryUtilities: java.lang.Class class$(java.lang.String)>";
"<WaferMapRenderer: org.jfree.chart.LegendItemCollection getLegendCollection()>" -> "<org.jfree.chart.renderer.WaferMapRenderer: java.lang.Number getMaxPaintValue(java.lang.Integer)>";
"<CategoryLabelPositions: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryLabelPositions: void <init>(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)>";
"<AbstractXYItemRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.xy.XYDataset,int,int,double,double,boolean)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<PeriodAxis: void setMajorTickTimePeriodClass(java.lang.Class)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<time.Quarter: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Quarter: void <init>(int,int)>";
"<ui.BasicProjectInfo: void setVersion(java.lang.String)>" -> "<org.jfree.chart.ui.Library: void setVersion(java.lang.String)>";
"<CombinedDataset: void add(org.jfree.data.general.SeriesDataset,int)>" -> "<org.jfree.data.general.SubSeriesDataset: void <init>(org.jfree.data.general.SeriesDataset,int)>";
"<StatisticalLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.xy.XYDifferenceRenderer: void setShapesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<labels.StandardPieSectionLabelGenerator: void <init>(java.util.Locale)>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>(java.lang.String,java.util.Locale)>";
"<XYBoxAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<category.StackedAreaRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<plot.DefaultDrawingSupplier: void <init>()>" -> "<org.jfree.chart.plot.DefaultDrawingSupplier: void <init>(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])>";
"<category.AbstractCategoryItemRenderer: void setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CategoryAxis: boolean equalPaintMaps(java.util.Map,java.util.Map)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<axis.ModuloAxis: double transStart(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<block.BorderArrangement: org.jfree.chart.util.Size2D arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,double)>";
"<StandardDialScale: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.xy.AbstractXYItemRenderer: void <init>()>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<xy.XYAreaRenderer2: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<dial.DialValueIndicator: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWaferMapChart(java.lang.String,org.jfree.data.general.WaferMapDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.WaferMapRenderer: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createMultiplePieChart(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardPieURLGenerator: void <init>()>";
"<XYAreaRenderer: void setOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DefaultCategoryDataset: void <init>()>" -> "<org.jfree.data.DefaultKeyedValues2D: void <init>()>";
"<PaintMap: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<PiePlot: void drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)>";
"<title.PaintScaleLegend: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<plot.MeterPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<ThermometerPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<demo.BarChartDemo1: void main(java.lang.String[])>" -> "<org.jfree.chart.demo.BarChartDemo1: void <init>(java.lang.String)>";
"<DefaultCategoryDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<XYErrorRenderer: void setErrorPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<category.LineRenderer3D: void setWallPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.XYSeries: void <init>(java.lang.Comparable,boolean,boolean)>" -> "<org.jfree.data.general.Series: void <init>(java.lang.Comparable)>";
"<category.LineAndShapeRenderer: void setBaseShapesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.CategoryLabelPositions: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.axis.CategoryLabelWidthType,float)>";
"<XYErrorRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<AbstractRenderer: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,boolean)>";
"<KeyedObject: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<xy.DeviationRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void setDrawSeriesLineAsPath(boolean)>";
"<XYIntervalSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<labels.MultipleXYSeriesLabelGenerator: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.Object)>";
"<time.TimePeriodValues: void add(org.jfree.data.time.TimePeriod,double)>" -> "<org.jfree.data.time.TimePeriodValue: void <init>(org.jfree.data.time.TimePeriod,double)>";
"<dial.StandardDialRange: void setUpperBound(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<ArcDialFrame: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.category.MinMaxCategoryRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,java.awt.Paint,java.awt.Paint)>";
"<JThermometer: void <init>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<xy.CyclicXYItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>()>";
"<xy.CyclicXYItemRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int)>";
"<util.RelativeDateFormat: void <init>(java.util.Date)>" -> "<org.jfree.chart.util.RelativeDateFormat: void <init>(long)>";
"<renderer.xy.AbstractXYItemRenderer: void drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<plot.DefaultDrawingSupplier: void <clinit>()>" -> "<org.jfree.chart.ChartColor: java.awt.Paint[] createDefaultPaintArray()>";
"<plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<XYCoordinateType: void <clinit>()>" -> "<org.jfree.experimental.chart.util.XYCoordinateType: void <init>(java.lang.String)>";
"<AbstractRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<CombinedDomainCategoryPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<CombinedDataset: java.lang.Number getX(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<DefaultIntervalCategoryDataset: void <init>(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])>" -> "<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] generateKeys(int,java.lang.String)>";
"<plot.Plot: void addChangeListener(org.jfree.chart.event.PlotChangeListener)>" -> "<org.jfree.chart.plot.Plot: java.lang.Class class$(java.lang.String)>";
"<text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)>" -> "<org.jfree.chart.text.TextBlock: void <init>()>";
"<plot.dial.DialValueIndicator: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<ModuloAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.ModuloAxis: double transEnd(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)>";
"<xy.XYLineAndShapeRenderer: void drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<xy.XIntervalSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<AbstractCategoryItemRenderer: void <init>()>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<block.LineBorder: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<ExtendedCategoryAxis: void setSubLabelFont(java.awt.Font)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ValueAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<CategoryPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<TextTitle: org.jfree.chart.util.Size2D arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<LegendTitle: org.jfree.chart.block.Block createLegendItemBlock(org.jfree.chart.LegendItem)>" -> "<org.jfree.chart.block.BlockContainer: void <init>(org.jfree.chart.block.Arrangement)>";
"<time.ohlc.OHLCSeries: void add(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>" -> "<org.jfree.data.time.ohlc.OHLCItem: void <init>(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>";
"<TimeSeriesCollection: void <init>(java.util.TimeZone)>" -> "<org.jfree.data.time.TimeSeriesCollection: void <init>(org.jfree.data.time.TimeSeries,java.util.TimeZone)>";
"<renderer.xy.StackedXYAreaRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<ObjectList: void <init>(int)>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>(int)>";
"<Marker: void setOutlinePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<renderer.category.AbstractCategoryItemRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<ui.ProjectInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.awt.Image,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.ui.BasicProjectInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
"<PeriodAxis: void setFirst(org.jfree.data.time.RegularTimePeriod)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<title.LegendTitle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.title.Title: boolean equals(java.lang.Object)>";
"<StackedBarRenderer3D: void drawStackVertical(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer3D: java.awt.Shape[] createVerticalBlock(double,double,double,double,boolean)>";
"<axis.PeriodAxis: void setFirst(org.jfree.data.time.RegularTimePeriod)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<axis.Axis: void setLabelFont(java.awt.Font)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<xy.XYAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<title.LegendGraphic: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPolarChart(java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>()>";
"<axis.CategoryAxis: void setLowerMargin(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<axis.DateAxis: void setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<axis.StandardTickUnitSource: org.jfree.chart.axis.TickUnit getLargerTickUnit(org.jfree.chart.axis.TickUnit)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<time.TimePeriodValuesCollection: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<PolarPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.XYBoxAndWhiskerRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<EncoderUtil: void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,float)>";
"<CombinedDomainCategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.CategoryPlot: java.lang.Object clone()>";
"<RingPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<CategoryTick: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<statistics.DefaultStatisticalCategoryDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<BasicProjectInfo: void setLicenceName(java.lang.String)>" -> "<org.jfree.chart.ui.Library: void setLicenceName(java.lang.String)>";
"<ComparableObjectSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.ComparableObjectSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<plot.ThermometerPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<XYAreaRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<general.DefaultKeyedValuesDataset: void <init>()>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<CategoryAxis: void setMaximumCategoryLabelWidthRatio(float)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<category.MinMaxCategoryRenderer: void setDrawLines(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<LegendTitle: void setLegendItemGraphicEdge(org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<PeriodAxis: void drawTickMarksHorizontal(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<plot.PiePlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<xy.YIntervalSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<XYBarRenderer: void setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.XYAreaRenderer2: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<AbstractXYItemRenderer: void <init>()>" -> "<org.jfree.chart.labels.StandardXYSeriesLabelGenerator: void <init>(java.lang.String)>";
"<PeriodAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.ValueAxis: boolean equals(java.lang.Object)>";
"<axis.ExtendedCategoryAxis: void setSubLabelFont(java.awt.Font)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<category.BarRenderer: void setBase(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<title.LegendTitle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<StandardXYToolTipGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<xy.HighLowRenderer: void setCloseTickPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CombinedDataset: java.lang.Number getHigh(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<TimeSeries: void removeAgedItems(boolean)>" -> "<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>";
"<xy.DefaultWindDataset: void <init>(java.lang.Object[][][])>" -> "<org.jfree.data.xy.DefaultWindDataset: java.util.List seriesNameListFromDataArray(java.lang.Object[][])>";
"<MinMaxCategoryRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<XYBlockRenderer: void setBlockWidth(double)>" -> "<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>";
"<NumberAxis: org.jfree.chart.axis.TickUnitSource createStandardTickUnits(java.util.Locale)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<Licences: org.jfree.chart.ui.Licences getInstance()>" -> "<org.jfree.chart.ui.Licences: void <init>()>";
"<XYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<plot.PiePlot: void setDataset(org.jfree.data.general.PieDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<XYLine3DRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<Title: void setVerticalAlignment(org.jfree.chart.util.VerticalAlignment)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<category.DefaultCategoryDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<ChartFactory: org.jfree.chart.JFreeChart createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<labels.AbstractCategoryItemLabelGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<CyclicNumberAxis: void <init>(double,double,java.lang.String)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<title.LegendGraphic: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<Week: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Week: void <init>(int,int)>";
"<xy.StackedXYBarRenderer: void <init>(double)>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)>";
"<renderer.xy.DeviationRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void setDrawSeriesLineAsPath(boolean)>";
"<axis.LogAxis: void zoomRange(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<axis.ModuloAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.ModuloAxis: double transStart(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)>";
"<Millisecond: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Millisecond: void <init>(int,org.jfree.data.time.Second)>";
"<dial.StandardDialFrame: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.xy.CyclicXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.CyclicXYItemRenderer$OverwriteDataSet: void <init>(double[],double[],org.jfree.data.xy.XYDataset)>";
"<category.LineAndShapeRenderer: void setUseSeriesOffset(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.MatrixSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractXYZDataset: java.lang.Object clone()>";
"<ChartRenderingInfo: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<ohlc.OHLCSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<CategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<axis.PeriodAxis: void autoAdjustRange()>" -> "<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)>";
"<ChartUtilities: byte[] encodeAsPNG(java.awt.image.BufferedImage,boolean,int)>" -> "<org.jfree.chart.encoders.EncoderUtil: byte[] encode(java.awt.image.BufferedImage,java.lang.String,float,boolean)>";
"<TimePeriodValuesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<Marker: void setStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<labels.ItemLabelPosition: void <init>()>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<xy.XYBarRenderer: void setMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.StackedXYBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)>";
"<TickLabelEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<renderer.category.ScatterRenderer: void setSeriesShapesFilled(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<util.RelativeDateFormat: void <init>()>" -> "<org.jfree.chart.util.RelativeDateFormat: void <init>(long)>";
"<plot.MeterPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<general.CombinedDataset: java.lang.Comparable getSeriesKey(int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<plot.CategoryPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<StandardEntityCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<axis.SubCategoryAxis: org.jfree.chart.axis.AxisState drawSubCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<SubSeriesDataset: void <init>(org.jfree.data.general.SeriesDataset,int[])>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<block.AbstractBlock: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<CombinedDataset: java.lang.Number getLow(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<plot.CombinedRangeCategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotRenderingInfo: void <init>(org.jfree.chart.ChartRenderingInfo)>";
"<MonthDateFormat: void <init>(java.util.TimeZone)>" -> "<org.jfree.chart.axis.MonthDateFormat: void <init>(java.util.TimeZone,java.util.Locale,int,boolean,boolean)>";
"<axis.CategoryAxis: java.util.Map readPaintMap(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<needle.ArrowNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>" -> "<org.jfree.chart.util.StringUtilities: java.lang.String getLineSeparator()>";
"<ValueMarker: void <init>(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>" -> "<org.jfree.chart.plot.Marker: void <init>(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<plot.MultiplePiePlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<labels.StandardPieToolTipGenerator: void <init>(java.lang.String,java.util.Locale)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<axis.CategoryAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.CategoryAxis: boolean equalPaintMaps(java.util.Map,java.util.Map)>";
"<category.AbstractCategoryItemRenderer: void setLegendItemLabelGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.FastScatterPlot: void <init>()>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<AbstractPieItemLabelGenerator: java.lang.Object[] createItemArray(org.jfree.data.general.PieDataset,java.lang.Comparable)>" -> "<org.jfree.data.general.DatasetUtilities: double calculatePieDatasetTotal(org.jfree.data.general.PieDataset)>";
"<xy.XYLineAndShapeRenderer: void drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean isPointInRect(java.awt.geom.Rectangle2D,double,double)>";
"<plot.MultiplePiePlot: void <init>(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font)>";
"<xy.XYBlockRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<ObjectUtilities: java.lang.Object clone(java.lang.Object)>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<axis.CategoryAxis: org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)>" -> "<org.jfree.chart.text.G2TextMeasurer: void <init>(java.awt.Graphics2D)>";
"<AbstractXYItemRenderer: void addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)>" -> "<org.jfree.chart.entity.XYItemEntity: void <init>(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPolarChart(java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.PolarPlot: void <init>()>";
"<DefaultChartEditorFactory: org.jfree.chart.editor.ChartEditor createEditor(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.editor.DefaultChartEditor: void <init>(org.jfree.chart.JFreeChart)>";
"<category.BarRenderer3D: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>";
"<LogAxis: void setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<renderer.category.StackedBarRenderer3D: void drawStackVertical(java.util.List,java.lang.Comparable,java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer3D: java.awt.Shape[] createVerticalBlock(double,double,double,double,boolean)>";
"<CategoryMarker: void setKey(java.lang.Comparable)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<XYLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<renderer.category.BarRenderer: void setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.YIntervalRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.geom.Line2D,java.awt.geom.Line2D)>";
"<XYLineAndShapeRenderer: void setUseOutlinePaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<KeyToGroupMap: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<LineRenderer3D: void setWallPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CombinedDataset: java.lang.Number getEndX(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<general.DefaultKeyedValues2DDataset: void <init>()>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<Day: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Day: void <init>(org.jfree.data.time.SerialDate)>";
"<util.PaintList: int hashCode()>" -> "<org.jfree.chart.util.AbstractObjectList: int hashCode()>";
"<title.PaintScaleLegend: org.jfree.chart.util.Size2D arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<TimeSeriesChartDemo1: org.jfree.data.xy.XYDataset createDataset()>" -> "<org.jfree.chart.demo.TimeSeriesChartDemo1: java.lang.Class class$(java.lang.String)>";
"<plot.PiePlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<XYLineAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<text.TextFragment: org.jfree.chart.util.Size2D calculateDimensions(java.awt.Graphics2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<renderer.xy.ClusteredXYBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: void <init>(double,boolean)>";
"<plot.XYPlot: void mapDatasetToRangeAxis(int,int)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<BubbleXYItemLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.BubbleXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)>";
"<CategoryAxis: void setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<axis.DateAxis: java.util.Date previousStandardDate(java.util.Date,org.jfree.chart.axis.DateTickUnit)>" -> "<org.jfree.chart.axis.DateAxis: java.util.Date calculateDateForPosition(org.jfree.data.time.RegularTimePeriod,org.jfree.chart.axis.DateTickMarkPosition)>";
"<XYLine3DRenderer: void setXOffset(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<PeriodAxis: void drawTickMarks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<ChartFactory: org.jfree.chart.JFreeChart createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)>" -> "<org.jfree.chart.renderer.xy.HighLowRenderer: void <init>()>";
"<XYErrorRenderer: void setDrawXError(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XIntervalDataItem: void <init>(double,double,double,double)>" -> "<org.jfree.data.xy.YWithXInterval: void <init>(double,double,double)>";
"<xy.VectorDataItem: void <init>(double,double,double,double)>" -> "<org.jfree.data.xy.Vector: void <init>(double,double)>";
"<JFreeChart: void removeChangeListener(org.jfree.chart.event.ChartChangeListener)>" -> "<org.jfree.chart.JFreeChart: java.lang.Class class$(java.lang.String)>";
"<time.Second: org.jfree.data.time.Second parseSecond(java.lang.String)>" -> "<org.jfree.data.time.Day: org.jfree.data.time.Day parseDay(java.lang.String)>";
"<TimePeriodValuesCollection: void <init>()>" -> "<org.jfree.data.time.TimePeriodValuesCollection: void <init>(org.jfree.data.time.TimePeriodValues)>";
"<renderer.xy.AbstractXYItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.AbstractRenderer: void <init>()>";
"<Minute: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Minute: void <init>(java.util.Date,java.util.TimeZone)>";
"<block.LabelBlock: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>" -> "<org.jfree.chart.block.AbstractBlock: void <init>()>";
"<XYBoxAnnotation: void <init>(double,double,double,double,java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.annotations.XYBoxAnnotation: void <init>(double,double,double,double,java.awt.Stroke,java.awt.Paint,java.awt.Paint)>";
"<time.TimeSeriesCollection: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<annotations.CategoryPointerAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<needle.MeterNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<WindItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<renderer.xy.XYBubbleRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<category.BarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<renderer.xy.XYBubbleRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYBubbleRenderer: void <init>(int)>";
"<MonthDateFormat: void <init>(java.util.Locale)>" -> "<org.jfree.chart.axis.MonthDateFormat: void <init>(java.util.TimeZone,java.util.Locale,int,boolean,boolean)>";
"<xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<time.Week: void <init>()>" -> "<org.jfree.data.time.Week: void <init>(java.util.Date)>";
"<StackedAreaRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<axis.PeriodAxis: void drawTickMarks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<XYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<labels.BubbleXYItemLabelGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<WaferMapRenderer: org.jfree.chart.LegendItemCollection getLegendCollection()>" -> "<org.jfree.chart.renderer.WaferMapRenderer: java.lang.Number getMinPaintValue(java.lang.Integer)>";
"<axis.NumberAxis: void <clinit>()>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<Statistics: double getStdDev(java.lang.Number[])>" -> "<org.jfree.data.statistics.Statistics: double calculateMean(java.lang.Number[])>";
"<general.DatasetUtilities: org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<TimeSeriesCollection: void <init>(org.jfree.data.time.TimeSeries)>" -> "<org.jfree.data.time.TimeSeriesCollection: void <init>(org.jfree.data.time.TimeSeries,java.util.TimeZone)>";
"<renderer.category.ScatterRenderer: void setUseFillPaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.XYErrorRenderer: void setErrorPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<annotations.CategoryPointerAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.AbstractRenderer: java.lang.Object clone()>";
"<axis.Axis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<HashUtilities: int hashCode(int,java.awt.Paint)>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<renderer.category.StackedBarRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: boolean equals(java.lang.Object)>";
"<renderer.xy.XYLineAndShapeRenderer: void setDrawOutlines(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CategoryPlot: void mapDatasetToDomainAxis(int,int)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<dial.DialPointer: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,double)>";
"<xy.IntervalXYDelegate: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<axis.NumberAxis3D: void <init>()>" -> "<org.jfree.chart.axis.NumberAxis3D: void <init>(java.lang.String)>";
"<general.AbstractDataset: void <init>()>" -> "<org.jfree.data.general.DatasetGroup: void <init>()>";
"<BasicProjectInfo: void addOptionalLibrary(org.jfree.chart.ui.Library)>" -> "<org.jfree.chart.ui.BasicProjectInfo$OptionalLibraryHolder: void <init>(org.jfree.chart.ui.Library)>";
"<XYShapeAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<XYSeries: void <init>(java.lang.Comparable,boolean,boolean)>" -> "<org.jfree.data.general.Series: void <init>(java.lang.Comparable)>";
"<category.StatisticalLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<plot.IntervalMarker: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Marker: java.lang.Object clone()>";
"<plot.CombinedDomainCategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotState: void <init>()>";
"<axis.DateTickUnit: java.util.Date rollDate(java.util.Date)>" -> "<org.jfree.chart.axis.DateTickUnit: int getCalendarField(int)>";
"<plot.dial.StandardDialRange: void setScaleIndex(int)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<CategoryPlot: org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int)>" -> "<org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>";
"<StandardDialFrame: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<dial.DialPointer: void <init>(int)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<MultiplePiePlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.category.CategoryToPieDataset: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,int)>";
"<xy.DefaultXYZDataset: void removeSeries(java.lang.Comparable)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<plot.CombinedRangeCategoryPlot: void <init>()>" -> "<org.jfree.chart.axis.NumberAxis: void <init>()>";
"<plot.PolarPlot: void <init>()>" -> "<org.jfree.chart.plot.PolarPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)>";
"<dial.StandardDialFrame: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<labels.StandardCategorySeriesLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardCategorySeriesLabelGenerator: void <init>(java.lang.String)>";
"<time.Minute: void <init>()>" -> "<org.jfree.data.time.Minute: void <init>(java.util.Date)>";
"<XYPointerAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<CombinedDataset: void add(org.jfree.data.general.SeriesDataset[])>" -> "<org.jfree.data.general.CombinedDataset: void fastAdd(org.jfree.data.general.SeriesDataset)>";
"<GradientPaintTransformType: void <clinit>()>" -> "<org.jfree.chart.util.GradientPaintTransformType: void <init>(java.lang.String)>";
"<XYPolygonAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForDoubleArray(double[])>";
"<DefaultKeyedValueDataset: void <init>(java.lang.Comparable,java.lang.Number)>" -> "<org.jfree.data.general.DefaultKeyedValueDataset: void <init>(org.jfree.data.KeyedValue)>";
"<plot.PiePlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<title.LegendTitle: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<plot.CombinedRangeCategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.CategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>";
"<Marker: void setLabel(java.lang.String)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<renderer.RendererUtilities: int[] findLiveItems(org.jfree.data.xy.XYDataset,int,double,double)>" -> "<org.jfree.chart.renderer.RendererUtilities: int findLiveItemsLowerBound(org.jfree.data.xy.XYDataset,int,double,double)>";
"<Marker: void setLabelFont(java.awt.Font)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<axis.SymbolAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.NumberAxis: boolean equals(java.lang.Object)>";
"<time.Month: org.jfree.data.time.Month parseMonth(java.lang.String)>" -> "<org.jfree.data.time.TimePeriodFormatException: void <init>(java.lang.String)>";
"<event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<CategoryPointerAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<renderer.xy.XYLineAndShapeRenderer: void drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawFirstPassShape(java.awt.Graphics2D,int,int,int,java.awt.Shape)>";
"<MultiplePiePlot: void <init>(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.JFreeChart: void <init>(org.jfree.chart.plot.Plot)>";
"<DateRange: void <init>(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<XYAreaRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<ValueAxis: void setRangeWithMargins(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range,boolean,boolean)>";
"<XYDotRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<SimpleHistogramDataset: void removeAllBins()>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<DefaultPieDataset: void <init>()>" -> "<org.jfree.data.DefaultKeyedValues: void <init>()>";
"<editor.DefaultTitleEditor: void <init>(org.jfree.chart.title.Title)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String)>";
"<category.DefaultIntervalCategoryDataset: void <init>(java.lang.String[],java.lang.Number[][],java.lang.Number[][])>" -> "<org.jfree.data.category.DefaultIntervalCategoryDataset: void <init>(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])>";
"<TextAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<MarkerAxisBand: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,double,double)>" -> "<org.jfree.chart.axis.MarkerAxisBand: void drawStringInRect(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.Font,java.lang.String)>";
"<labels.HighLowItemLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.HighLowItemLabelGenerator: void <init>(java.text.DateFormat,java.text.NumberFormat)>";
"<category.AbstractCategoryItemRenderer: void setLegendItemToolTipGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.dial.DialPointer: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,double)>";
"<plot.CombinedRangeXYPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<ObjectUtilities: java.lang.Object clone(java.lang.Object)>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<category.AbstractCategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState createState(org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.CategoryItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<AbstractObjectList: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<plot.dial.ArcDialFrame: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<CategoryAxis: org.jfree.chart.axis.AxisState drawCategoryLabels(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.entity.CategoryLabelEntity: void <init>(java.lang.Comparable,java.awt.Shape,java.lang.String,java.lang.String)>";
"<event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<axis.DateAxis: void setRange(double,double)>" -> "<org.jfree.data.time.DateRange: void <init>(double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat)>";
"<ScatterRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<category.StackedAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.StackedAreaRenderer: double[] adjustedStackValues(double[],double[])>";
"<xy.XYDotRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<axis.CyclicNumberAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<LegendTitle: void <init>(org.jfree.chart.LegendItemSource)>" -> "<org.jfree.chart.title.LegendTitle: void <init>(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)>";
"<text.TextBox: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<title.PaintScaleLegend: void setStripOutlinePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<plot.dial.ArcDialFrame: void setStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<axis.CategoryAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.category.StackedAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AreaRenderer: boolean equals(java.lang.Object)>";
"<AbstractCategoryItemRenderer: void setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.CategoryAxis: void <init>()>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<title.LegendItemBlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.entity.StandardEntityCollection: void <init>()>";
"<category.StackedBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<Minute: void <init>(int,org.jfree.data.time.Hour)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<plot.dial.DialTextAnnotation: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<ComparableObjectSeries: int hashCode()>" -> "<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>";
"<StackedBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean equals(java.lang.Object)>";
"<JFreeChartInfo: java.awt.Image getLogo()>" -> "<org.jfree.chart.ui.ProjectInfo: java.awt.Image getLogo()>";
"<axis.LogAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.ValueAxis: boolean equals(java.lang.Object)>";
"<plot.XYPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.geom.Point2D readPoint2D(java.io.ObjectInputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createGanttChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.IntervalCategoryDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<gantt.TaskSeries: void <init>(java.lang.String)>" -> "<org.jfree.data.general.Series: void <init>(java.lang.Comparable)>";
"<renderer.xy.XYBoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.OutlierListCollection: void <init>()>";
"<category.ScatterRenderer: void setSeriesShapesFilled(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<general.CombinedDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<DefaultXYZDataset: void removeSeries(java.lang.Comparable)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<xy.CandlestickRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.xy.XYBarRenderer: void setBase(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.StackedXYBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StackedXYBarRenderer: java.lang.Class class$(java.lang.String)>";
"<plot.Plot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<DefaultPlotEditor: void <init>(org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.ui.PaintSample: void <init>(java.awt.Paint)>";
"<ChartEntity: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.xy.XYBlockRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<DateTickUnit: java.util.Date rollDate(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.chart.axis.DateTickUnit: int getCalendarField(int)>";
"<LineBorder: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.XYLineAndShapeRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<StandardDialFrame: void setStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<PolarPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<ValueMarker: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Marker: boolean equals(java.lang.Object)>";
"<statistics.SimpleHistogramDataset: void removeAllBins()>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<ObjectUtilities: java.lang.Object loadAndInstantiate(java.lang.String,java.lang.Class,java.lang.Class)>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.ClassLoader getClassLoader(java.lang.Class)>";
"<PeriodAxis: void setMinorTickMarksVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<plot.ThermometerPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<CategoryLabelPositions: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.axis.CategoryLabelWidthType,float)>";
"<LogarithmicAxis: void setRange(org.jfree.data.Range)>" -> "<org.jfree.chart.axis.NumberAxis: void setRange(org.jfree.data.Range)>";
"<time.Week: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.Week: void <init>(java.util.Date,java.util.TimeZone,java.util.Locale)>";
"<block.LabelBlock: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.block.AbstractBlock: boolean equals(java.lang.Object)>";
"<xy.DefaultIntervalXYDataset: void addSeries(java.lang.Comparable,double[][])>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<category.AbstractCategoryItemRenderer: void setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.XYBarRenderer: void setMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.DateAxis: org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits(java.util.TimeZone)>" -> "<org.jfree.chart.axis.DateTickUnit: void <init>(int,int,java.text.DateFormat)>";
"<title.PaintScaleLegend: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<XYBoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.Outlier: void <init>(double,double,double)>";
"<XYLineAndShapeRenderer: void drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<dial.StandardDialScale: void setMinorTickCount(int)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions replaceLeftPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)>" -> "<org.jfree.chart.axis.CategoryLabelPositions: void <init>(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)>";
"<dial.DialCap: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<dial.DialCap: void setOutlinePaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYLineAndShapeRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<MultiplePiePlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.general.PieDataset createConsolidatedPieDataset(org.jfree.data.general.PieDataset,java.lang.Comparable,double)>";
"<text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)>";
"<editor.DefaultChartEditor: void <init>(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.ui.LCBLayout: void <init>(int)>";
"<axis.Axis: void removeChangeListener(org.jfree.chart.event.AxisChangeListener)>" -> "<org.jfree.chart.axis.Axis: java.lang.Class class$(java.lang.String)>";
"<ComparableObjectSeries: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<block.BlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.block.BlockResult: void <init>()>";
"<urls.StandardXYURLGenerator: void <init>(java.lang.String)>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>(java.lang.String,java.lang.String,java.lang.String)>";
"<xml.CategoryDatasetHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<StackedXYAreaRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<LogarithmicAxis: void autoAdjustRange()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<StandardXYItemLabelGenerator: java.lang.Object clone()>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: java.lang.Object clone()>";
"<category.LineRenderer3D: void setYOffset(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<annotations.XYShapeAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<XYPointerAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.CombinedRangeCategoryPlot: void <init>(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<AbstractXYItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.AbstractRenderer: void <init>()>";
"<axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createIntegerTickUnits(java.util.Locale)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<StandardDialRange: void setOuterRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYPlot: org.jfree.chart.axis.AxisLocation getRangeAxisLocation(int)>" -> "<org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>";
"<renderer.xy.StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: boolean isPointInRect(java.awt.geom.Rectangle2D,double,double)>";
"<XYSeries: java.lang.Object clone()>" -> "<org.jfree.data.general.Series: java.lang.Object clone()>";
"<PaintScaleLegend: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawHighFarOut(double,java.awt.Graphics2D,double,double)>";
"<ServletUtilities: java.lang.String searchReplace(java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.servlet.ServletUtilities: java.lang.String searchReplace(java.lang.String,java.lang.String,java.lang.String)>";
"<Axis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<StandardDialScale: void setUpperBound(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<ValueAxis: double findMaximumTickLabelHeight(java.util.List,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<axis.NumberAxis: void selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<axis.SubCategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.SubCategoryAxis: double getMaxDim(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)>";
"<renderer.WaferMapRenderer: org.jfree.chart.LegendItemCollection getLegendCollection()>" -> "<org.jfree.chart.renderer.WaferMapRenderer: java.lang.Number getMinPaintValue(java.lang.Integer)>";
"<xy.XYDifferenceRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<GanttRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<ChartPanel: void addChartMouseListener(org.jfree.chart.ChartMouseListener)>" -> "<org.jfree.chart.ChartPanel: java.lang.Class class$(java.lang.String)>";
"<BoxAndWhiskerCalculator: double calculateQ3(java.util.List)>" -> "<org.jfree.data.statistics.Statistics: double calculateMedian(java.util.List,int,int)>";
"<DefaultPieDataset: void <init>(org.jfree.data.KeyedValues)>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<xy.XYAreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<general.SubSeriesDataset: void <init>(org.jfree.data.general.SeriesDataset,int)>" -> "<org.jfree.data.general.SubSeriesDataset: void <init>(org.jfree.data.general.SeriesDataset,int[])>";
"<xy.NormalizedMatrixSeries: void <init>(java.lang.String,int,int)>" -> "<org.jfree.data.xy.MatrixSeries: void <init>(java.lang.String,int,int)>";
"<renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)>";
"<dial.DialPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<XYStepAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<util.StrokeList: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite()>" -> "<org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>";
"<renderer.category.StatisticalBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<PaintMap: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.DefaultHighLowDataset: void <init>(java.lang.Comparable,java.util.Date[],double[],double[],double[],double[],double[])>" -> "<org.jfree.data.xy.DefaultHighLowDataset: java.lang.Number[] createNumberArray(double[])>";
"<entity.ChartEntity: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<ChartUtilities: void writeBufferedImageAsPNG(java.io.OutputStream,java.awt.image.BufferedImage,boolean,int)>" -> "<org.jfree.chart.encoders.EncoderUtil: void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float,boolean)>";
"<CyclicNumberAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<ExtendedCategoryAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.CategoryAxis: boolean equals(java.lang.Object)>";
"<category.BarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)>";
"<general.CombinedDataset: java.lang.Number getClose(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<category.CategoryItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.RendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<title.TextTitle: void <init>()>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String)>";
"<plot.dial.DialCap: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<plot.PolarPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<ArcDialFrame: void setOuterRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<general.DefaultKeyedValueDataset: void setValue(java.lang.Comparable,java.lang.Number)>" -> "<org.jfree.data.DefaultKeyedValue: void <init>(java.lang.Comparable,java.lang.Number)>";
"<SpreadsheetDate: void <init>(int)>" -> "<org.jfree.data.time.SerialDate: int leapYearCount(int)>";
"<LegendItem: void <init>(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.LegendItem: void <init>(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<DateAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.data.time.Month: void <init>(java.util.Date,java.util.TimeZone)>";
"<BarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: org.jfree.data.Range expandToInclude(org.jfree.data.Range,double)>";
"<Axis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<needle.LongNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<renderer.xy.XYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<plot.XYPlot: void <init>()>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<plot.SpiderWebPlot: void <init>()>" -> "<org.jfree.chart.plot.SpiderWebPlot: void <init>(org.jfree.data.category.CategoryDataset)>";
"<ChartFactory: org.jfree.chart.JFreeChart createCandlestickChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)>" -> "<org.jfree.chart.renderer.xy.CandlestickRenderer: void <init>()>";
"<renderer.xy.XYBarRenderer: void setDrawBarOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<Minute: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.Day: void <init>(java.util.Date,java.util.TimeZone)>";
"<SymbolAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.CategoryPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<PieDatasetHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<DefaultBoxAndWhiskerXYDataset: void add(java.util.Date,org.jfree.data.statistics.BoxAndWhiskerItem)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<plot.DialShape: void <clinit>()>" -> "<org.jfree.chart.plot.DialShape: void <init>(java.lang.String)>";
"<category.ScatterRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>" -> "<org.jfree.chart.plot.ValueMarker: void <init>(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<title.TextTitle: void setToolTipText(java.lang.String)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<xy.XYSeries: org.jfree.data.xy.XYSeries createCopy(int,int)>" -> "<org.jfree.data.xy.XYSeries: void add(org.jfree.data.xy.XYDataItem)>";
"<title.LegendTitle: void setLegendItemGraphicEdge(org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<ShapeList: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<TableOrder: void <clinit>()>" -> "<org.jfree.chart.util.TableOrder: void <init>(java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<xy.XYStepAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<labels.AbstractXYItemLabelGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<DefaultDrawingSupplier: void <init>()>" -> "<org.jfree.chart.plot.DefaultDrawingSupplier: void <init>(java.awt.Paint[],java.awt.Paint[],java.awt.Paint[],java.awt.Stroke[],java.awt.Stroke[],java.awt.Shape[])>";
"<SubCategoryAxis: void setSubLabelPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<Axis: java.awt.geom.Rectangle2D getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<time.TimeSeries: void update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>" -> "<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>";
"<category.GanttRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<XYLineAndShapeRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<general.CombinedDataset: java.lang.Number getEndX(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<renderer.category.StatisticalBarRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<renderer.xy.XYErrorRenderer: void setCapLength(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.PiePlot: void drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.plot.PieLabelRecord: void <init>(java.lang.Comparable,double,double,org.jfree.chart.text.TextBox,double,double,double)>";
"<DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<LineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<util.RefineryUtilities: void centerDialogInParent(java.awt.Dialog)>" -> "<org.jfree.chart.util.RefineryUtilities: void positionDialogRelativeToParent(java.awt.Dialog,double,double)>";
"<StackedBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer: void <init>(boolean)>";
"<DefaultTitleEditor: void <init>(org.jfree.chart.title.Title)>" -> "<org.jfree.chart.ui.PaintSample: void <init>(java.awt.Paint)>";
"<TextTitle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.title.Title: boolean equals(java.lang.Object)>";
"<xy.AbstractIntervalXYDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<ui.BasicProjectInfo: void addOptionalLibrary(java.lang.String)>" -> "<org.jfree.chart.ui.BasicProjectInfo$OptionalLibraryHolder: void <init>(java.lang.String)>";
"<XYLineAndShapeRenderer: void setLegendLine(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.dial.DialTextAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<CategoryPlot: boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.category.CategoryDataset)>";
"<plot.SpiderWebPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<CategoryPlot: void <init>()>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<plot.CategoryPlot: org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<Size2D: void <init>()>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<CategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.axis.CategoryAxis: java.lang.Object clone()>";
"<SpiderWebPlot: void <init>()>" -> "<org.jfree.chart.plot.SpiderWebPlot: void <init>(org.jfree.data.category.CategoryDataset)>";
"<time.Hour: void <init>(int,int,int,int)>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<XYLineAndShapeRenderer: void setDrawSeriesLineAsPath(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<HighLowRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.XYAreaRenderer2: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<TaskSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.category.LineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<ChartFrame: void <init>(java.lang.String,org.jfree.chart.JFreeChart,boolean)>" -> "<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart)>";
"<MatrixSeries: void <init>(java.lang.String,int,int)>" -> "<org.jfree.data.xy.MatrixSeries: void zeroAll()>";
"<statistics.Statistics: double[] getLinearFit(java.lang.Number[],java.lang.Number[])>" -> "<org.jfree.data.statistics.Statistics: double calculateMean(java.lang.Number[])>";
"<axis.CyclicNumberAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<xy.MatrixSeries: void <init>(java.lang.String,int,int)>" -> "<org.jfree.data.xy.MatrixSeries: void zeroAll()>";
"<ComparableObjectSeries: void add(java.lang.Comparable,java.lang.Object,boolean)>" -> "<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>";
"<CategoryTextAnnotation: void <init>(java.lang.String,java.lang.Comparable,double)>" -> "<org.jfree.chart.annotations.TextAnnotation: void <init>(java.lang.String)>";
"<ModuloAxis: void setDisplayRange(double,double)>" -> "<org.jfree.chart.axis.ModuloAxis: double mapValueToFixedRange(double)>";
"<block.BlockBorder: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<DefaultAxisEditor: org.jfree.chart.editor.DefaultAxisEditor getInstance(org.jfree.chart.axis.Axis)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: void <init>(org.jfree.chart.axis.Axis)>";
"<ValueAxis: void setRangeWithMargins(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font)>";
"<time.Week: void <init>(int,org.jfree.data.time.Year)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<PieChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.util.ApplicationFrame: void <init>(java.lang.String)>";
"<ChartPanel: void mouseMoved(java.awt.event.MouseEvent)>" -> "<org.jfree.chart.ChartPanel: java.lang.Class class$(java.lang.String)>";
"<Month: long getLastMillisecond(java.util.Calendar)>" -> "<org.jfree.data.time.SerialDate: int lastDayOfMonth(int,int)>";
"<AbstractXYItemRenderer: java.awt.geom.Point2D calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<PolarPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<xy.AbstractXYItemRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.xy.XYDataset,int,int,double,double,boolean)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<JDBCCategoryDataset: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<renderer.xy.StackedXYBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.StackedXYBarRenderer: void <init>(double)>";
"<category.StatisticalLineAndShapeRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<labels.BubbleXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat)>";
"<ChartPanel: void <init>(org.jfree.chart.JFreeChart,boolean)>" -> "<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)>";
"<DialPointer: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<TimePeriodValuesCollection: java.lang.Number getX(int,int)>" -> "<org.jfree.data.time.TimePeriodValuesCollection: long getX(org.jfree.data.time.TimePeriod)>";
"<encoders.EncoderUtil: byte[] encode(java.awt.image.BufferedImage,java.lang.String,boolean)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,boolean)>";
"<Second: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Second: void <init>(java.util.Date,java.util.TimeZone)>";
"<LegendItemBlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.block.BlockResult: void <init>()>";
"<renderer.WaferMapRenderer: org.jfree.chart.LegendItemCollection getLegendCollection()>" -> "<org.jfree.chart.renderer.WaferMapRenderer: java.lang.Number getMaxPaintValue(java.lang.Integer)>";
"<LineNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<xy.XIntervalSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<category.LineRenderer3D: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<title.Title: void notifyListeners(org.jfree.chart.event.TitleChangeEvent)>" -> "<org.jfree.chart.title.Title: java.lang.Class class$(java.lang.String)>";
"<xy.XYBarRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,org.jfree.data.KeyToGroupMap)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<category.MinMaxCategoryRenderer: void setMaxIcon(javax.swing.Icon)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<category.BarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<time.Hour: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<IntervalCategoryToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat)>";
"<statistics.HistogramDataset: void addSeries(java.lang.Comparable,double[],int)>" -> "<org.jfree.data.statistics.HistogramDataset: double getMinimum(double[])>";
"<DefaultNumberAxisEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: void actionPerformed(java.awt.event.ActionEvent)>";
"<MovingAverage: org.jfree.data.xy.XYDataset createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,double,double)>" -> "<org.jfree.data.time.MovingAverage: org.jfree.data.xy.XYSeries createMovingAverage(org.jfree.data.xy.XYDataset,int,java.lang.String,double,double)>";
"<demo.TimeSeriesChartDemo1: org.jfree.data.xy.XYDataset createDataset()>" -> "<org.jfree.data.time.TimeSeriesCollection: void <init>()>";
"<block.BorderArrangement: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<PieChartDemo1: void main(java.lang.String[])>" -> "<org.jfree.chart.demo.PieChartDemo1: void <init>(java.lang.String)>";
"<JFreeChart: org.jfree.chart.entity.EntityCollection drawTitle(org.jfree.chart.title.Title,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.block.BlockParams: void <init>()>";
"<CategoryMarker: void <init>(java.lang.Comparable)>" -> "<org.jfree.chart.plot.CategoryMarker: void <init>(java.lang.Comparable,java.awt.Paint,java.awt.Stroke)>";
"<plot.Plot: void removeChangeListener(org.jfree.chart.event.PlotChangeListener)>" -> "<org.jfree.chart.plot.Plot: java.lang.Class class$(java.lang.String)>";
"<ValueAxis: org.jfree.chart.axis.AxisState drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<plot.PiePlot: void drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)>" -> "<org.jfree.chart.entity.PieSectionEntity: void <init>(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)>";
"<StandardXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat)>";
"<Quarter: void <init>(int,int)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<HighLowRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<plot.FastScatterPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<Axis: org.jfree.chart.axis.AxisState drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<CombinedDataset: java.lang.Number getEndY(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<KeyToGroupMap: java.lang.Object clone()>" -> "<org.jfree.data.KeyToGroupMap: java.lang.Object clone(java.lang.Object)>";
"<SymbolAxis: void setGridBandPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<category.BoxAndWhiskerRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<DateAxis: void <clinit>()>" -> "<org.jfree.chart.axis.DateAxis$DefaultTimeline: void <init>(org.jfree.chart.axis.DateAxis$1)>";
"<general.CombinedDataset: java.lang.Number getY(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<MultiplePiePlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<xy.StandardXYItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<StackedXYBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<XYTitleAnnotationDemo1: org.jfree.data.xy.XYDataset createDataset()>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable,java.lang.Class)>";
"<dial.StandardDialScale: void setTickLabelOffset(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<plot.DefaultDrawingSupplier: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<DialTextAnnotation: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<category.BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawHighFarOut(double,java.awt.Graphics2D,double,double)>";
"<Month: org.jfree.data.time.Month parseMonth(java.lang.String)>" -> "<org.jfree.data.time.Month: void <init>(int,org.jfree.data.time.Year)>";
"<CategoryTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<axis.DateAxis: void <init>()>" -> "<org.jfree.chart.axis.DateAxis: void <init>(java.lang.String)>";
"<time.Second: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.Day: void <init>(java.util.Date,java.util.TimeZone)>";
"<title.LegendTitle: void <init>(org.jfree.chart.LegendItemSource)>" -> "<org.jfree.chart.block.FlowArrangement: void <init>()>";
"<time.TimeTableXYDataset: void <init>(java.util.TimeZone)>" -> "<org.jfree.data.time.TimeTableXYDataset: void <init>(java.util.TimeZone,java.util.Locale)>";
"<DateAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.category.WaterfallBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<time.TimeSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<ValueAxis: void setRange(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<CombinedRangeXYPlot: void <init>(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<plot.Marker: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<entity.LegendItemEntity: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.entity.ChartEntity: boolean equals(java.lang.Object)>";
"<xy.CandlestickRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<SubCategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.SubCategoryAxis: double getMaxDim(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)>";
"<dial.DialCap: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<labels.StandardXYToolTipGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<KeyedObjects2D: java.lang.Object getObject(java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<xy.StandardXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<CombinedDataset: java.lang.Number getY(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<RelativeDateFormat: void main(java.lang.String[])>" -> "<org.jfree.chart.util.RelativeDateFormat: void <init>(long)>";
"<imagemap.ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)>" -> "<org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator: void <init>()>";
"<MinMaxCategoryRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<renderer.xy.XYDifferenceRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>";
"<JFreeChart: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<time.TimeSeries: org.jfree.data.time.TimeSeries createCopy(org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)>" -> "<org.jfree.data.general.Series: java.lang.Object clone()>";
"<time.Week: org.jfree.data.time.Week parseWeek(java.lang.String)>" -> "<org.jfree.data.time.Week: void <init>(int,org.jfree.data.time.Year)>";
"<DefaultXYZDataset: void addSeries(java.lang.Comparable,double[][])>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<renderer.xy.XYAreaRenderer2: void setLegendArea(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.Axis: void setTickLabelPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<entity.CategoryItemEntity: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.entity.ChartEntity: boolean equals(java.lang.Object)>";
"<NumberAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<event.ChartChangeEventType: void <clinit>()>" -> "<org.jfree.chart.event.ChartChangeEventType: void <init>(java.lang.String)>";
"<LevelRenderer: void setItemMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createMultiplePieChart3D(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.MultiplePiePlot: void <init>(org.jfree.data.category.CategoryDataset)>";
"<xy.XYBarDataset: void <init>(org.jfree.data.xy.XYDataset,double)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<DateTickMarkPosition: void <clinit>()>" -> "<org.jfree.chart.axis.DateTickMarkPosition: void <init>(java.lang.String)>";
"<XYStepAreaRenderer: void setShapesFilled(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<FlowArrangement: void <init>()>" -> "<org.jfree.chart.block.FlowArrangement: void <init>(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)>";
"<ChartUtilities: void writeChartAsJPEG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int)>" -> "<org.jfree.chart.ChartUtilities: void writeChartAsJPEG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>";
"<axis.SegmentedTimeline: org.jfree.chart.axis.SegmentedTimeline newFifteenMinuteTimeline()>" -> "<org.jfree.chart.axis.SegmentedTimeline: void <init>(long,int,int)>";
"<LegendItemBlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.entity.LegendItemEntity: void <init>(java.awt.Shape)>";
"<xy.DefaultHighLowDataset: void <init>(java.lang.Comparable,java.util.Date[],double[],double[],double[],double[],double[])>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<XYStepAreaRenderer: void setRangeBase(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<AreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<axis.Axis: void setTickMarkOutsideLength(float)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<axis.ModuloAxis: void setDisplayRange(double,double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<xy.AbstractXYItemRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<CategoryLabelPositions: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)>";
"<dial.StandardDialScale: void setMinorTickStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<axis.LogarithmicAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<xy.XYBlockRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>";
"<StackedXYAreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer: void <init>(int)>";
"<TextUtilities: void <clinit>()>" -> "<org.jfree.chart.util.ObjectUtilities: boolean isJDK14()>";
"<renderer.DefaultPolarItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.AbstractRenderer: java.lang.Object clone()>";
"<ClusteredXYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>";
"<axis.SymbolAxis: void drawGridBands(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,java.util.List)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<JFreeChart: org.jfree.chart.entity.EntityCollection drawTitle(org.jfree.chart.title.Title,java.awt.Graphics2D,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<XYLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<renderer.category.BoxAndWhiskerRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<annotations.XYLineAnnotation: void <init>(double,double,double,double)>" -> "<org.jfree.chart.annotations.XYLineAnnotation: void <init>(double,double,double,double,java.awt.Stroke,java.awt.Paint)>";
"<AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<renderer.xy.XYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<general.CombinedDataset: java.lang.Number getX(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>" -> "<org.jfree.chart.renderer.AbstractRenderer: java.lang.Class class$(java.lang.String)>";
"<renderer.xy.XYLine3DRenderer: void setYOffset(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<SpiderWebPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.XYSeries: org.jfree.data.xy.XYDataItem addOrUpdate(java.lang.Number,java.lang.Number)>" -> "<org.jfree.data.xy.XYDataItem: java.lang.Object clone()>";
"<PolarPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<LegendTitle: org.jfree.chart.block.Block createLegendItemBlock(org.jfree.chart.LegendItem)>" -> "<org.jfree.chart.block.BorderArrangement: void <init>()>";
"<time.MovingAverage: org.jfree.data.time.TimeSeriesCollection createMovingAverage(org.jfree.data.time.TimeSeriesCollection,java.lang.String,int,int)>" -> "<org.jfree.data.time.MovingAverage: org.jfree.data.time.TimeSeries createMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int,int)>";
"<renderer.category.StackedBarRenderer3D: void <init>()>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer3D: void <init>(boolean)>";
"<renderer.category.LineRenderer3D: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>";
"<renderer.category.LineAndShapeRenderer: void setBaseShapesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<DefaultTableXYDataset: void updateXPoints()>" -> "<org.jfree.data.xy.DefaultTableXYDataset: void updateXPoints(org.jfree.data.xy.XYSeries)>";
"<axis.LogarithmicAxis: void autoAdjustRange()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>()>";
"<EncoderUtil: void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String)>";
"<plot.PiePlot3D: void drawSide(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Arc2D,java.awt.geom.Area,java.awt.geom.Area,java.awt.Paint,java.awt.Paint,java.awt.Stroke,boolean,boolean)>" -> "<org.jfree.chart.plot.PiePlot3D: boolean isAngleAtFront(double)>";
"<ArcDialFrame: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<axis.ModuloAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>";
"<category.DefaultIntervalCategoryDataset: java.lang.Number getStartValue(java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<StandardCategoryToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<LevelRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<util.AbstractObjectList: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,int)>";
"<plot.DefaultDrawingSupplier: java.awt.Shape[] createStandardSeriesShapes()>" -> "<org.jfree.chart.plot.DefaultDrawingSupplier: int[] intArray(double,double,double,double)>";
"<DialPointer: void <init>(int)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<MultiplePiePlot: void <init>(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>";
"<xy.AbstractXYItemRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<dial.DialTextAnnotation: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<MeterPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.MeterInterval: void <init>(java.lang.String,org.jfree.data.Range,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<CandlestickRenderer: void <init>(double)>" -> "<org.jfree.chart.renderer.xy.CandlestickRenderer: void <init>(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)>";
"<time.Month: void <init>()>" -> "<org.jfree.data.time.Month: void <init>(java.util.Date)>";
"<xml.DatasetReader: org.jfree.data.category.CategoryDataset readCategoryDatasetFromXML(java.io.InputStream)>" -> "<org.jfree.data.xml.CategoryDatasetHandler: org.jfree.data.category.CategoryDataset getDataset()>";
"<BubbleXYItemLabelGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<LineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<Month: org.jfree.data.time.Month parseMonth(java.lang.String)>" -> "<org.jfree.data.time.Month: int findSeparator(java.lang.String)>";
"<demo.TimeSeriesChartDemo1: org.jfree.data.xy.XYDataset createDataset()>" -> "<org.jfree.chart.demo.TimeSeriesChartDemo1: java.lang.Class class$(java.lang.String)>";
"<block.RectangleConstraint: void <init>(double,org.jfree.data.Range)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<NumberAxis: void setAutoRangeStickyZero(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<axis.MonthDateFormat: void <init>(java.util.Locale,int)>" -> "<org.jfree.chart.axis.MonthDateFormat: void <init>(java.util.TimeZone,java.util.Locale,int,boolean,boolean)>";
"<CombinedDataset: java.lang.Number getClose(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<axis.PeriodAxis: org.jfree.chart.axis.AxisState drawTickLabels(int,java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<renderer.xy.YIntervalRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<axis.PeriodAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<general.CombinedDataset: java.lang.Number getStartY(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<dial.ArcDialFrame: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<XYSplineAndShapeRenderer: void drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer$ControlPoint: void <init>(org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer,float,float)>";
"<time.SpreadsheetDate: int calcSerial(int,int,int)>" -> "<org.jfree.data.time.SerialDate: int leapYearCount(int)>";
"<plot.CombinedRangeCategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.CategoryPlot: java.lang.Object clone()>";
"<axis.Axis: void setLabelAngle(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<CombinedDataset: java.lang.Number getVolume(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<dial.ArcDialFrame: java.awt.Shape getOuterWindow(java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<MultiplePiePlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.category.CategoryDataset)>";
"<XYPlot: void <init>()>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<general.Series: void addChangeListener(org.jfree.data.general.SeriesChangeListener)>" -> "<org.jfree.data.general.Series: java.lang.Class class$(java.lang.String)>";
"<FastScatterPlot: java.lang.Object clone()>" -> "<org.jfree.chart.axis.ValueAxis: java.lang.Object clone()>";
"<SimpleHistogramDataset: void addObservations(double[])>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)>";
"<dial.DialCap: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<axis.ValueAxis: void setLowerMargin(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<StackedXYBarRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer$XYBarRendererState: void <init>(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)>";
"<StandardPieSectionLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<SubCategoryAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.CategoryAxis: boolean equals(java.lang.Object)>";
"<dial.StandardDialScale: void setTickLabelFont(java.awt.Font)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYImageAnnotation: void <init>(double,double,java.awt.Image,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
"<xy.DefaultWindDataset: void <init>(java.util.List,java.lang.Object[][][])>" -> "<org.jfree.data.xy.WindDataItem: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>";
"<CombinedRangeXYPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<annotations.XYTextAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.CategoryPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<NumberTickUnit: int hashCode()>" -> "<org.jfree.chart.axis.TickUnit: int hashCode()>";
"<general.CombinedDataset: java.lang.Number getEndY(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<time.TimeTableXYDataset: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.time.TimeTableXYDataset: long getXValue(org.jfree.data.time.TimePeriod)>";
"<BarChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createIntegerTickUnits()>";
"<plot.Plot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>";
"<needle.MeterNeedle: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<TextTitle: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<xy.XYBarRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<block.LengthConstraintType: void <clinit>()>" -> "<org.jfree.chart.block.LengthConstraintType: void <init>(java.lang.String)>";
"<ObjectUtilities: boolean isJDK14()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.ClassLoader getClassLoader(java.lang.Class)>";
"<ShapeList: void <init>()>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>()>";
"<plot.CompassPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<category.StackedBarRenderer3D: void <init>(boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: void <init>()>";
"<CategoryMarker: void <init>(java.lang.Comparable,java.awt.Paint,java.awt.Stroke)>" -> "<org.jfree.chart.plot.CategoryMarker: void <init>(java.lang.Comparable,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<PaintScaleLegend: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.AbstractRenderer: java.lang.Object clone()>";
"<xml.CategorySeriesHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>" -> "<org.jfree.data.xml.ItemHandler: void <init>(org.jfree.data.xml.RootHandler,org.xml.sax.helpers.DefaultHandler)>";
"<time.TimeSeriesCollection: void <init>()>" -> "<org.jfree.data.time.TimeSeriesCollection: void <init>(org.jfree.data.time.TimeSeries,java.util.TimeZone)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>()>";
"<xy.XYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<ObjectUtilities: java.lang.Object loadAndInstantiate(java.lang.String,java.lang.Class)>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.ClassLoader getClassLoader(java.lang.Class)>";
"<general.Series: void notifyListeners(org.jfree.data.general.SeriesChangeEvent)>" -> "<org.jfree.data.general.Series: java.lang.Class class$(java.lang.String)>";
"<category.LineAndShapeRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void <init>(boolean,boolean)>";
"<dial.DialCap: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<Hour: void <init>(int,int,int,int)>" -> "<org.jfree.data.time.Day: void <init>(int,int,int)>";
"<XYBubbleRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYBubbleRenderer: void <init>(int)>";
"<TaskSeriesCollection: void <init>()>" -> "<org.jfree.data.general.AbstractSeriesDataset: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<category.AbstractCategoryItemRenderer: void setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<general.CombinedDataset: void add(org.jfree.data.general.SeriesDataset)>" -> "<org.jfree.data.general.CombinedDataset: void fastAdd(org.jfree.data.general.SeriesDataset)>";
"<DatasetReader: org.jfree.data.general.PieDataset readPieDatasetFromXML(java.io.InputStream)>" -> "<org.jfree.data.xml.PieDatasetHandler: org.jfree.data.general.PieDataset getDataset()>";
"<plot.CategoryPlot: org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<general.CombinedDataset: java.lang.Number getStartY(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<AbstractRenderer: void <init>()>" -> "<org.jfree.chart.util.StrokeList: void <init>()>";
"<servlet.ServletUtilities: java.lang.String saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.servlet.ServletUtilities: java.lang.String saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>";
"<time.Minute: org.jfree.data.time.Minute parseMinute(java.lang.String)>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<renderer.xy.XYAreaRenderer2: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<axis.ValueAxis: void setRightArrow(java.awt.Shape)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.StrokeMap: void <init>()>";
"<DefaultPlotEditor: void <init>(org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: org.jfree.chart.editor.DefaultAxisEditor getInstance(org.jfree.chart.axis.Axis)>";
"<entity.LegendItemEntity: void <init>(java.awt.Shape)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape)>";
"<StandardCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<renderer.xy.AbstractXYItemRenderer: void addEntity(org.jfree.chart.entity.EntityCollection,java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,double,double)>" -> "<org.jfree.chart.entity.XYItemEntity: void <init>(java.awt.Shape,org.jfree.data.xy.XYDataset,int,int,java.lang.String,java.lang.String)>";
"<JFreeChart: void setPadding(org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<editor.DefaultPlotEditor: void attemptOutlineStrokeSelection()>" -> "<org.jfree.chart.ui.StrokeChooserPanel: void <init>(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])>";
"<renderer.category.BarRenderer3D: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List)>" -> "<org.jfree.data.statistics.BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List,boolean)>";
"<CategoryAxis: void setMaximumCategoryLabelLines(int)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<CategoryAxis: void writePaintMap(java.util.Map,java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<DateTickUnit: void <init>(int,int,int,int,java.text.DateFormat)>" -> "<org.jfree.chart.axis.TickUnit: void <init>(double)>";
"<CategoryStepRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<statistics.Statistics: double calculateMedian(java.util.List,int,int)>" -> "<org.jfree.data.statistics.Statistics: double calculateMedian(java.util.List,int,int,boolean)>";
"<plot.JThermometer: void <init>()>" -> "<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart)>";
"<CyclicNumberAxis: void setAutoRangeMinimumSize(double,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void setAutoRangeMinimumSize(double,boolean)>";
"<xy.DefaultXYZDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractXYZDataset: void <init>()>";
"<plot.XYPlot: org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int)>" -> "<org.jfree.chart.util.RectangleEdge: org.jfree.chart.util.RectangleEdge opposite(org.jfree.chart.util.RectangleEdge)>";
"<AbstractObjectList: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.AbstractObjectList: void set(int,java.lang.Object)>";
"<renderer.WaferMapRenderer: org.jfree.chart.LegendItemCollection getLegendCollection()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<ModuloAxis: void resizeRange(double)>" -> "<org.jfree.chart.axis.ModuloAxis: double getDisplayCentralValue()>";
"<xy.CandlestickRenderer: void <init>(double)>" -> "<org.jfree.chart.labels.HighLowItemLabelGenerator: void <init>()>";
"<DefaultKeyedValues: void sortByValues(org.jfree.chart.util.SortOrder)>" -> "<org.jfree.data.KeyedValueComparator: void <init>(org.jfree.data.KeyedValueComparatorType,org.jfree.chart.util.SortOrder)>";
"<text.TextBlock: java.awt.Shape calculateBounds(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)>" -> "<org.jfree.chart.text.TextBlock: float[] calculateOffsets(org.jfree.chart.text.TextBlockAnchor,double,double)>";
"<time.Millisecond: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Millisecond: void <init>(int,org.jfree.data.time.Second)>";
"<block.ColorBlock: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<block.BlockContainer: void <init>()>" -> "<org.jfree.chart.block.BorderArrangement: void <init>()>";
"<VectorDataItem: void <init>(double,double,double,double)>" -> "<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>";
"<DynamicTimeSeriesCollection: void appendData(float[])>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence: void <init>(org.jfree.data.time.DynamicTimeSeriesCollection,int)>";
"<annotations.XYBoxAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<plot.CategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<general.DefaultKeyedValueDataset: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<Millisecond: org.jfree.data.time.Second getSecond()>" -> "<org.jfree.data.time.Second: void <init>(int,int,int,int,int,int)>";
"<axis.CyclicNumberAxis: void <init>(double,double)>" -> "<org.jfree.chart.axis.CyclicNumberAxis: void <init>(double,double,java.lang.String)>";
"<plot.dial.ArcDialFrame: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<renderer.xy.StackedXYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<annotations.CategoryTextAnnotation: void <init>(java.lang.String,java.lang.Comparable,double)>" -> "<org.jfree.chart.annotations.TextAnnotation: void <init>(java.lang.String)>";
"<XYPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)>" -> "<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>";
"<DefaultIntervalCategoryDataset: void <init>(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])>" -> "<org.jfree.data.general.AbstractSeriesDataset: void <init>()>";
"<dial.DialCap: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<PiePlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<xy.MatrixSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.XYDifferenceRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<DatasetUtilities: org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<CombinedDataset: org.jfree.data.general.SeriesDataset getParent()>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<time.Year: void <init>()>" -> "<org.jfree.data.time.Year: void <init>(java.util.Date)>";
"<ValueAxis: void setLowerMargin(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<StandardDialScale: void setMinorTickPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<renderer.xy.XYLine3DRenderer: void setXOffset(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.XYLineAndShapeRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<PiePlot: void drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.G2TextMeasurer: void <init>(java.awt.Graphics2D)>";
"<PieChartDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart)>";
"<XYBoxAndWhiskerRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<category.WaterfallBarRenderer: void <init>(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>(org.jfree.chart.util.GradientPaintTransformType)>";
"<XYPolygonAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<xy.DefaultXYDataset: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractXYDataset: java.lang.Object clone()>";
"<axis.ValueAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<DateRange: void <init>(org.jfree.data.Range)>" -> "<org.jfree.data.time.DateRange: void <init>(double,double)>";
"<StatisticalBarRenderer: void setErrorIndicatorPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<StackedBarRenderer3D: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<renderer.xy.XYStepAreaRenderer: void setShapesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ValueMarker: void <init>(double,java.awt.Paint,java.awt.Stroke)>" -> "<org.jfree.chart.plot.ValueMarker: void <init>(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<time.TimePeriodValues: void add(org.jfree.data.time.TimePeriod,java.lang.Number)>" -> "<org.jfree.data.time.TimePeriodValues: void add(org.jfree.data.time.TimePeriodValue)>";
"<XYTextAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<StandardDialRange: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<ServletUtilities: java.lang.String saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.servlet.ServletUtilities: void createTempDir()>";
"<MovingAverage: org.jfree.data.time.TimeSeriesCollection createMovingAverage(org.jfree.data.time.TimeSeriesCollection,java.lang.String,int,int)>" -> "<org.jfree.data.time.MovingAverage: org.jfree.data.time.TimeSeries createMovingAverage(org.jfree.data.time.TimeSeries,java.lang.String,int,int)>";
"<dial.DialTextAnnotation: void setFont(java.awt.Font)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<category.StatisticalBarRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardCategoryURLGenerator: void <init>()>";
"<demo.TimeSeriesChartDemo1: org.jfree.data.xy.XYDataset createDataset()>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable,java.lang.Class)>";
"<XYTextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<xy.VectorDataItem: void <init>(double,double,double,double)>" -> "<org.jfree.data.xy.XYCoordinate: void <init>(double,double)>";
"<TextAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.dial.StandardDialRange: void setLowerBound(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<AbstractCategoryItemRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.category.CategoryDataset,int,int,double,double,boolean)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<plot.CategoryPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<XYItemEntity: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.entity.ChartEntity: boolean equals(java.lang.Object)>";
"<time.TimePeriodAnchor: void <clinit>()>" -> "<org.jfree.data.time.TimePeriodAnchor: void <init>(java.lang.String)>";
"<renderer.category.ScatterRenderer: void setUseOutlinePaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.CombinedRangeXYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<XYBarDataset: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<GanttRenderer: void setEndPercent(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer$State: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<LogAxis: void setNumberFormatOverride(java.text.NumberFormat)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<axis.SegmentedTimeline: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.SegmentedTimeline: boolean equals(java.lang.Object,java.lang.Object)>";
"<entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<XYBarRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<Marker: void addChangeListener(org.jfree.chart.event.MarkerChangeListener)>" -> "<org.jfree.chart.plot.Marker: java.lang.Class class$(java.lang.String)>";
"<StackedBarRenderer3D: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset)>";
"<axis.PeriodAxis: void setMinorTickTimePeriodClass(java.lang.Class)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<axis.SegmentedTimeline: int access$400(org.jfree.chart.axis.SegmentedTimeline,org.jfree.chart.axis.SegmentedTimeline$Segment)>" -> "<org.jfree.chart.axis.SegmentedTimeline: int binarySearchExceptionSegments(org.jfree.chart.axis.SegmentedTimeline$Segment)>";
"<Statistics: double calculateMedian(java.util.List)>" -> "<org.jfree.data.statistics.Statistics: double calculateMedian(java.util.List,boolean)>";
"<ObjectUtilities: java.net.URL getResourceRelative(java.lang.String,java.lang.Class)>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.ClassLoader getClassLoader(java.lang.Class)>";
"<xy.StackedXYAreaRenderer2: void setRoundXCoordinates(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<time.ohlc.OHLCItem: void <init>(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>" -> "<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>";
"<plot.dial.DialBackground: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<ui.BasicProjectInfo: void addOptionalLibrary(org.jfree.chart.ui.Library)>" -> "<org.jfree.chart.ui.BasicProjectInfo$OptionalLibraryHolder: void <init>(org.jfree.chart.ui.Library)>";
"<XYBoxAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<RectangleConstraint: void <init>(double,double)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<HighLowRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<Marker: void <init>(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<renderer.category.StackedAreaRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset)>";
"<renderer.xy.DefaultXYItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>()>";
"<DialTextAnnotation: void setLabel(java.lang.String)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<annotations.CategoryPointerAnnotation: void <init>(java.lang.String,java.lang.Comparable,double,double)>" -> "<org.jfree.chart.annotations.CategoryTextAnnotation: void <init>(java.lang.String,java.lang.Comparable,double)>";
"<title.ImageTitle: void <init>(java.awt.Image)>" -> "<org.jfree.chart.title.ImageTitle: void <init>(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<Hour: org.jfree.data.time.Hour parseHour(java.lang.String)>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<xy.XYIntervalSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>" -> "<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>";
"<text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)>" -> "<org.jfree.chart.text.TextUtilities: float[] deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)>";
"<PaintScaleLegend: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<renderer.xy.XYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<PaintScaleLegend: void setAxisLocation(org.jfree.chart.axis.AxisLocation)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<FastScatterPlot: void <init>(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.FastScatterPlot: org.jfree.data.Range calculateYDataRange(float[][])>";
"<category.BarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>";
"<MonthDateFormat: void main(java.lang.String[])>" -> "<org.jfree.chart.axis.MonthDateFormat: void <init>(java.util.Locale,int)>";
"<ChartRenderingInfo: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<DialCap: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<time.Millisecond: org.jfree.data.time.Second getSecond()>" -> "<org.jfree.data.time.Second: void <init>(int,int,int,int,int,int)>";
"<xy.XYDifferenceRenderer: void setLegendLine(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<StandardPieSectionLabelGenerator: void <init>(java.lang.String,java.util.Locale)>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer3D: void <init>()>";
"<JFreeChart: void <clinit>()>" -> "<org.jfree.chart.JFreeChartInfo: void <init>()>";
"<DialCap: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<CategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<DefaultPolarItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.AbstractRenderer: boolean equals(java.lang.Object)>";
"<time.TimeSeriesTableModel: void setValueAt(java.lang.Object,int,int)>" -> "<org.jfree.data.time.TimeSeries: void update(int,java.lang.Number)>";
"<MultipleXYSeriesLabelGenerator: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<ComparableObjectSeries: void update(java.lang.Comparable,java.lang.Object)>" -> "<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>";
"<category.LineRenderer3D: void setXOffset(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<dial.ArcDialFrame: void setStartAngle(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DefaultDrawingSupplier: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<XIntervalSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.xy.XIntervalSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<SymbolAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<PaintScaleLegend: void setStripOutlineStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<Hour: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<xy.AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<DatasetReader: org.jfree.data.general.PieDataset readPieDatasetFromXML(java.io.File)>" -> "<org.jfree.data.xml.DatasetReader: org.jfree.data.general.PieDataset readPieDatasetFromXML(java.io.InputStream)>";
"<xy.XYBlockRenderer: void setBlockHeight(double)>" -> "<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>";
"<ObjectUtilities: java.net.URL getResource(java.lang.String,java.lang.Class)>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.ClassLoader getClassLoader(java.lang.Class)>";
"<imagemap.DynamicDriveToolTipTagFragmentGenerator: java.lang.String generateToolTipFragment(java.lang.String)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String htmlEscape(java.lang.String)>";
"<XYDifferenceRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYDifferenceRenderer: void <init>(java.awt.Paint,java.awt.Paint,boolean)>";
"<xy.XYDifferenceRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List,boolean)>" -> "<org.jfree.data.statistics.Statistics: double calculateMean(java.util.Collection,boolean)>";
"<ValueAxis: org.jfree.chart.axis.AxisState drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<XYPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.CrosshairState: void <init>()>";
"<renderer.xy.StackedXYBarRenderer: void <init>(double)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: void <init>(double)>";
"<xy.XYDifferenceRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<SpreadsheetDate: int calcSerial(int,int,int)>" -> "<org.jfree.data.time.SerialDate: int leapYearCount(int)>";
"<renderer.xy.XYAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<xy.DefaultWindDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<plot.ThermometerPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(org.jfree.chart.util.UnitType,double,double,double,double)>";
"<TextTitle: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.block.BlockResult: void <init>()>";
"<plot.FastScatterPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<title.LegendTitle: void <init>(org.jfree.chart.LegendItemSource)>" -> "<org.jfree.chart.title.LegendTitle: void <init>(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)>";
"<Minute: void <init>(int,int,int,int,int)>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<XYLineAndShapeRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<ColorBlock: void <init>(java.awt.Paint,double,double)>" -> "<org.jfree.chart.block.AbstractBlock: void <init>()>";
"<SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.lang.Class class$(java.lang.String)>";
"<DefaultAxisEditor: org.jfree.chart.util.RectangleInsets getTickLabelInsets()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<axis.PeriodAxis: void setRange(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range,boolean,boolean)>";
"<DefaultValueDataset: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>()>";
"<Marker: void setLabelTextAnchor(org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<renderer.WaferMapRenderer: void setPlot(org.jfree.chart.plot.WaferMapPlot)>" -> "<org.jfree.chart.renderer.WaferMapRenderer: void makePaintIndex()>";
"<Quarter: void <init>()>" -> "<org.jfree.data.time.Quarter: void <init>(java.util.Date)>";
"<util.RefineryUtilities: java.awt.Point getCenterPoint()>" -> "<org.jfree.chart.util.RefineryUtilities: java.lang.Class class$(java.lang.String)>";
"<category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,boolean,boolean)>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer$2: void <init>(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,boolean,boolean,int,int)>";
"<ArcDialFrame: java.awt.Shape getWindow(java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<XYIntervalSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>" -> "<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>";
"<DefaultKeyedValueDataset: void <init>(java.lang.Comparable,java.lang.Number)>" -> "<org.jfree.data.DefaultKeyedValue: void <init>(java.lang.Comparable,java.lang.Number)>";
"<xy.IntervalXYDelegate: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.data.xy.IntervalXYDelegate: double recalculateInterval()>";
"<TickUnits: org.jfree.chart.axis.TickUnit getCeilingTickUnit(double)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<xy.XYBubbleRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<xy.XYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<title.PaintScaleLegend: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.title.Title: boolean equals(java.lang.Object)>";
"<axis.CyclicNumberAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<DateAxis: void zoomRange(double,double)>" -> "<org.jfree.data.time.DateRange: void <init>(double,double)>";
"<SegmentedTimeline: void addException(long)>" -> "<org.jfree.chart.axis.SegmentedTimeline: void addException(org.jfree.chart.axis.SegmentedTimeline$Segment)>";
"<plot.XYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>(java.util.Locale)>";
"<StackedXYAreaRenderer2: void setRoundXCoordinates(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<time.SerialDate: org.jfree.data.time.SerialDate getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: boolean isValidWeekdayCode(int)>";
"<HistogramDataset: java.lang.Number getY(int,int)>" -> "<org.jfree.data.statistics.HistogramDataset: int getTotal(int)>";
"<TextAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<Axis: org.jfree.chart.axis.AxisState drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.entity.AxisLabelEntity: void <init>(org.jfree.chart.axis.Axis,java.awt.Shape,java.lang.String,java.lang.String)>";
"<DefaultMultiValueCategoryDataset: void add(java.util.List,java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<DefaultTitleEditor: void <init>(org.jfree.chart.title.Title)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String)>";
"<demo.BarChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.ChartFactory: org.jfree.chart.JFreeChart createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>";
"<NumberAxis: void setNumberFormatOverride(java.text.NumberFormat)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<renderer.category.AbstractCategoryItemRenderer: void drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<xy.HighLowRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<ChartUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>";
"<xy.XYIntervalSeries: void <init>(java.lang.Comparable,boolean,boolean)>" -> "<org.jfree.data.ComparableObjectSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<StandardDialRange: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<time.Minute: void <init>(int,int,int,int,int)>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<plot.dial.DialValueIndicator: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<CombinedRangeXYPlot: void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)>" -> "<org.jfree.chart.plot.XYPlot: void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<XYPointerAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.HighLowRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<DynamicDriveToolTipTagFragmentGenerator: java.lang.String generateToolTipFragment(java.lang.String)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String htmlEscape(java.lang.String)>";
"<urls.StandardXYZURLGenerator: java.lang.String generateURL(org.jfree.data.xy.XYZDataset,int,int)>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: java.lang.String generateURL(org.jfree.data.xy.XYDataset,int,int)>";
"<Plot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.VectorSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<StandardDialScale: void setLowerBound(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DefaultNumberAxisEditor: void setAxisProperties(org.jfree.chart.axis.Axis)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: void setAxisProperties(org.jfree.chart.axis.Axis)>";
"<ThermometerPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<ObjectUtilities: java.io.InputStream getResourceRelativeAsStream(java.lang.String,java.lang.Class)>" -> "<org.jfree.chart.util.ObjectUtilities: java.net.URL getResourceRelative(java.lang.String,java.lang.Class)>";
"<PiePlot3D: void drawSide(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Arc2D,java.awt.geom.Area,java.awt.geom.Area,java.awt.Paint,java.awt.Paint,java.awt.Stroke,boolean,boolean)>" -> "<org.jfree.chart.plot.PiePlot3D: boolean isAngleAtFront(double)>";
"<xy.HighLowRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<category.BoxAndWhiskerRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>";
"<CombinedDataset: java.lang.Number getY(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<CyclicNumberAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<XYSeries: org.jfree.data.xy.XYSeries createCopy(int,int)>" -> "<org.jfree.data.xy.XYSeries: void add(org.jfree.data.xy.XYDataItem)>";
"<statistics.DefaultStatisticalCategoryDataset: void remove(java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultStatisticalCategoryDataset: void updateBounds()>";
"<dial.DialTextAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<DialValueIndicator: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<plot.JThermometer: void <init>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<plot.CategoryMarker: void <init>(java.lang.Comparable,java.awt.Paint,java.awt.Stroke)>" -> "<org.jfree.chart.plot.CategoryMarker: void <init>(java.lang.Comparable,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<LengthAdjustmentType: void <clinit>()>" -> "<org.jfree.chart.util.LengthAdjustmentType: void <init>(java.lang.String)>";
"<block.LineBorder: void <init>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<plot.PlotOrientation: void <clinit>()>" -> "<org.jfree.chart.plot.PlotOrientation: void <init>(java.lang.String)>";
"<renderer.xy.XYDifferenceRenderer: void <init>(java.awt.Paint,java.awt.Paint,boolean)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<PeriodAxis: void setLast(org.jfree.data.time.RegularTimePeriod)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<block.LineBorder: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.category.BarRenderer3D: void <init>(double,double)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<XYBarRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer$XYBarRendererState: void <init>(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)>";
"<GanttRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<DateAxis: void setTickUnit(org.jfree.chart.axis.DateTickUnit,boolean,boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<needle.LineNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<PiePlot3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.PiePlot: boolean equals(java.lang.Object)>";
"<RectangleConstraint: org.jfree.chart.block.RectangleConstraint toUnconstrainedHeight()>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<CategoryTextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.TextAnnotation: boolean equals(java.lang.Object)>";
"<annotations.XYPolygonAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<StackedBarRenderer3D: void <init>()>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer3D: void <init>(boolean)>";
"<XYSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.category.StatisticalLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<labels.StandardXYItemLabelGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: boolean equals(java.lang.Object)>";
"<renderer.xy.XYBlockRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<plot.MultiplePiePlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<entity.StandardEntityCollection: java.lang.Object clone()>" -> "<org.jfree.chart.entity.ChartEntity: java.lang.Object clone()>";
"<plot.MeterPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<axis.CategoryAxis: void writePaintMap(java.util.Map,java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<renderer.xy.XYLineAndShapeRenderer: void setSeriesShapesVisible(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<title.TextTitle: void setTextAlignment(org.jfree.chart.util.HorizontalAlignment)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<EncoderUtil: void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,boolean)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,boolean)>";
"<renderer.xy.XYBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: java.awt.geom.Point2D calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotOrientation)>";
"<annotations.XYLineAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<XYDotRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<axis.ValueAxis: void <clinit>()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<ChartPanel: void mouseDragged(java.awt.event.MouseEvent)>" -> "<org.jfree.chart.ChartPanel: void drawZoomRectangle(java.awt.Graphics2D)>";
"<CSV: org.jfree.data.category.CategoryDataset readCategoryDataset(java.io.Reader)>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<needle.WindNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.ArrowNeedle: boolean equals(java.lang.Object)>";
"<plot.PiePlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<axis.SymbolAxis: void autoAdjustRange()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<xy.StackedXYAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<DynamicTimeSeriesCollection: void addSeries(float[],int,java.lang.Comparable)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence: void <init>(org.jfree.data.time.DynamicTimeSeriesCollection,int)>";
"<CandlestickRenderer: void <init>(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<renderer.xy.XYDotRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<SymbolAxis: void setGridBandsVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<AbstractXYItemRenderer: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<StatisticalLineAndShapeRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<PolarPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<renderer.xy.StackedXYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: boolean equals(java.lang.Object)>";
"<StackedXYAreaRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<GanttRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.IntervalBarRenderer: void <init>()>";
"<dial.StandardDialScale: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<axis.PeriodAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.ValueAxis: boolean equals(java.lang.Object)>";
"<axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createIntegerTickUnits()>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<statistics.DefaultBoxAndWhiskerCategoryDataset: void removeRow(int)>" -> "<org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset: void updateBounds()>";
"<dial.AbstractDialLayer: void notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Class class$(java.lang.String)>";
"<Quarter: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,java.util.Locale,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>(java.util.Locale)>";
"<time.DateRange: void <init>(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<axis.LogAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.LogAxis: org.jfree.chart.axis.TickUnitSource createLogTickUnits(java.util.Locale)>";
"<plot.SpiderWebPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<category.LineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<renderer.xy.XYBoxAndWhiskerRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<CombinedDataset: java.lang.Number getEndY(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<CombinedRangeCategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleEdge: double coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>";
"<DialBackground: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYBoxAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<XYPlot: org.jfree.chart.util.RectangleEdge getRangeAxisEdge()>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<PieDatasetHandler: void <init>()>" -> "<org.jfree.data.xml.RootHandler: void <init>()>";
"<encoders.EncoderUtil: void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,boolean)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,boolean)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>()>";
"<LogAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<dial.DialPointer: void <init>()>" -> "<org.jfree.chart.plot.dial.DialPointer: void <init>(int)>";
"<StandardDialScale: void setMajorTickIncrement(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<xy.XYDifferenceRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<StandardXYURLGenerator: void <init>(java.lang.String)>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>(java.lang.String,java.lang.String,java.lang.String)>";
"<MatrixSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<ChartUtilities: void writeChartAsJPEG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.encoders.EncoderUtil: void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream)>";
"<Day: void <init>(org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<PolarPlot: java.util.List refreshAngleTicks()>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<StackedXYBarRenderer: int hashCode()>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: int hashCode()>";
"<plot.FastScatterPlot: void <init>(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.FastScatterPlot: org.jfree.data.Range calculateXDataRange(float[][])>";
"<StackedBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.data.DataUtilities: double calculateColumnTotal(org.jfree.data.Values2D,int)>";
"<title.PaintScaleLegend: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<plot.dial.DialCap: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<LineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<CategoryDatasetHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<LineAndShapeRenderer: void setUseFillPaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.ThermometerPlot: void <init>()>" -> "<org.jfree.data.general.DefaultValueDataset: void <init>()>";
"<CategoryAxis: double calculateTextBlockWidth(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape rotateShape(java.awt.Shape,double,float,float)>";
"<xy.StandardXYItemRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<PeriodAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<HighLowRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<TextTitle: void setFont(java.awt.Font)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<renderer.xy.XYDifferenceRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<SpiderWebPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<imagemap.ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)>" -> "<org.jfree.chart.imagemap.StandardURLTagFragmentGenerator: void <init>()>";
"<SpiderWebPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<IntervalCategoryItemLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<time.SerialDate: java.lang.String monthCodeToString(int,boolean)>" -> "<org.jfree.data.time.SerialDate: boolean isValidMonthCode(int)>";
"<axis.CategoryLabelPositions: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions createUpRotationLabelPositions(double)>";
"<TimeSeries: java.lang.Object clone()>" -> "<org.jfree.data.general.Series: java.lang.Object clone()>";
"<XYBarRenderer: void setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.DateTickUnit: void <init>(int,int,int,int,java.text.DateFormat)>" -> "<org.jfree.chart.axis.TickUnit: void <init>(double)>";
"<plot.Marker: void setLabelPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<renderer.xy.StackedXYAreaRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer$StackedXYAreaRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<CategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotRenderingInfo: void <init>(org.jfree.chart.ChartRenderingInfo)>";
"<PolarPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<category.LineAndShapeRenderer: void setSeriesShapesFilled(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DialValueIndicator: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<plot.dial.DialValueIndicator: void setOutlinePaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<plot.dial.DialValueIndicator: void <init>(int)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<LegendItem: void <init>(java.text.AttributedString,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>()>";
"<dial.StandardDialRange: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<renderer.category.BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.OutlierListCollection: void <init>()>";
"<editor.DefaultAxisEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: void attemptLabelFontSelection()>";
"<dial.ArcDialFrame: void setInnerRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<PolarPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<ThermometerPlot: void <init>()>" -> "<org.jfree.chart.plot.ThermometerPlot: void <init>(org.jfree.data.general.ValueDataset)>";
"<DefaultKeyedValues: void insertValue(int,java.lang.Comparable,java.lang.Number)>" -> "<org.jfree.data.DefaultKeyedValues: void rebuildIndex()>";
"<axis.ModuloAxis: double getDisplayCentralValue()>" -> "<org.jfree.chart.axis.ModuloAxis: double getDisplayLength()>";
"<StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: boolean isPointInRect(java.awt.geom.Rectangle2D,double,double)>";
"<XYBarDataset: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<Axis: void <clinit>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<ObjectList: void set(int,java.lang.Object)>" -> "<org.jfree.chart.util.AbstractObjectList: void set(int,java.lang.Object)>";
"<util.StrokeList: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<axis.SegmentedTimeline: org.jfree.chart.axis.SegmentedTimeline$Segment getSegment(long)>" -> "<org.jfree.chart.axis.SegmentedTimeline$Segment: void <init>(org.jfree.chart.axis.SegmentedTimeline,long)>";
"<annotations.XYLineAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<TimeSeriesChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.chart.ChartFactory: org.jfree.chart.JFreeChart createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>";
"<Day: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Day: void <init>(java.util.Date,java.util.TimeZone)>";
"<CombinedDataset: void fastAdd(org.jfree.data.general.SeriesDataset)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: void <init>(org.jfree.data.general.CombinedDataset,org.jfree.data.general.SeriesDataset,int)>";
"<xy.StandardXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer$State: int access$002(org.jfree.chart.renderer.xy.StandardXYItemRenderer$State,int)>";
"<renderer.xy.XYDifferenceRenderer: void setPositivePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<imagemap.ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator: void <init>()>";
"<title.LegendTitle: org.jfree.chart.block.Block createLegendItemBlock(org.jfree.chart.LegendItem)>" -> "<org.jfree.chart.block.LabelBlock: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<axis.PeriodAxis: void setRange(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)>";
"<CategoryPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<time.Month: org.jfree.data.time.Year evaluateAsYear(java.lang.String)>" -> "<org.jfree.data.time.Year: org.jfree.data.time.Year parseYear(java.lang.String)>";
"<plot.ThermometerPlot: java.awt.Paint getCurrentPaint()>" -> "<org.jfree.chart.plot.ThermometerPlot: boolean inSubrange(int,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<CustomPieURLGenerator: java.lang.Object clone()>" -> "<org.jfree.chart.urls.CustomPieURLGenerator: void <init>()>";
"<plot.dial.DialPlot: void <init>()>" -> "<org.jfree.chart.plot.dial.DialPlot: void <init>(org.jfree.data.general.ValueDataset)>";
"<time.TimeSeries: void update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>" -> "<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>";
"<time.TimeSeries: int hashCode()>" -> "<org.jfree.data.general.Series: int hashCode()>";
"<Marker: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<axis.ValueTick: void <init>(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>" -> "<org.jfree.chart.axis.ValueTick: void <init>(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<DefaultPieDataset: void <init>(org.jfree.data.KeyedValues)>" -> "<org.jfree.data.DefaultKeyedValues: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>(java.util.Locale)>";
"<XYShapeAnnotation: void <init>(java.awt.Shape,java.awt.Stroke,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
"<plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<SubCategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<renderer.xy.CandlestickRenderer: void <init>(double)>" -> "<org.jfree.chart.labels.HighLowItemLabelGenerator: void <init>()>";
"<statistics.DefaultBoxAndWhiskerCategoryDataset: void removeColumn(java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset: void updateBounds()>";
"<PiePlotState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.RendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.TableXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<xy.StackedXYAreaRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<XYPolygonAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<BlockContainer: void <init>()>" -> "<org.jfree.chart.block.BorderArrangement: void <init>()>";
"<RefineryUtilities: java.awt.Point getCenterPoint()>" -> "<org.jfree.chart.util.RefineryUtilities: java.lang.Class class$(java.lang.String)>";
"<time.Week: org.jfree.data.time.Week parseWeek(java.lang.String)>" -> "<org.jfree.data.time.Week: org.jfree.data.time.Year evaluateAsYear(java.lang.String)>";
"<DatasetReader: org.jfree.data.general.PieDataset readPieDatasetFromXML(java.io.InputStream)>" -> "<org.jfree.data.xml.PieDatasetHandler: void <init>()>";
"<PaintScaleLegend: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<renderer.AbstractRenderer: void <init>()>" -> "<org.jfree.chart.util.PaintList: void <init>()>";
"<renderer.category.AbstractCategoryItemRenderer: void setLegendItemToolTipGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<general.CombinedDataset: void fastAdd(org.jfree.data.general.SeriesDataset)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: void <init>(org.jfree.data.general.CombinedDataset,org.jfree.data.general.SeriesDataset,int)>";
"<annotations.XYTextAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<MultipleXYSeriesLabelGenerator: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.Object)>";
"<XYLine3DRenderer: void setWallPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<StandardDialScale: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<XYTitleAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<XYErrorRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<dial.StandardDialScale: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<axis.NumberAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createStandardTickUnits()>";
"<ColumnArrangement: org.jfree.chart.util.Size2D arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<plot.dial.DialValueIndicator: void setValueAnchor(org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<labels.IntervalCategoryItemLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<ExtendedCategoryAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<annotations.XYShapeAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<labels.StandardPieToolTipGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>(java.lang.String)>";
"<PaintScaleLegend: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<XYBubbleRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<axis.ValueAxis: void setVerticalTickLabels(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<DeviationRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.DeviationRenderer: void <init>(boolean,boolean)>";
"<category.StatisticalLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<title.PaintScaleLegend: void setAxis(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<axis.CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<renderer.category.StackedBarRenderer3D: void <init>(double,double)>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: void <init>(double,double)>";
"<renderer.category.LineAndShapeRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<dial.StandardDialScale: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<PeriodAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<category.BarRenderer3D: void <init>(double,double)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<plot.FastScatterPlot: org.jfree.data.Range calculateYDataRange(float[][])>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<renderer.xy.HighLowRenderer: void setDrawOpenTicks(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<VectorRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<FastScatterPlot: void <init>(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<DialPlot: void setDataset(int,org.jfree.data.general.ValueDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<XYTitleAnnotationDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart)>";
"<axis.CyclicNumberAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.plot.Plot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>";
"<Plot: void drawBackgroundImage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.Align: void align(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,int)>";
"<LongNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<TimeSeries: void <init>(java.lang.Comparable,java.lang.Class)>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)>";
"<ImageTitle: void <init>(java.awt.Image)>" -> "<org.jfree.chart.title.ImageTitle: void <init>(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<YIntervalRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<block.LabelBlock: java.lang.Object clone()>" -> "<org.jfree.chart.block.AbstractBlock: java.lang.Object clone()>";
"<plot.Marker: void setLabelAnchor(org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<TimePeriodValues: void add(org.jfree.data.time.TimePeriodValue)>" -> "<org.jfree.data.time.TimePeriodValues: void updateBounds(org.jfree.data.time.TimePeriod,int)>";
"<HistogramDataset: java.lang.Number getY(int,int)>" -> "<org.jfree.data.statistics.HistogramDataset: double getBinWidth(int)>";
"<gantt.TaskSeriesCollection: void <init>()>" -> "<org.jfree.data.general.AbstractSeriesDataset: void <init>()>";
"<dial.DialTextAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.FastScatterPlot: void <init>(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<annotations.CategoryPointerAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<axis.NumberAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<ThermometerPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<xy.CategoryTableXYDataset: void <init>()>" -> "<org.jfree.data.DefaultKeyedValues2D: void <init>(boolean)>";
"<plot.dial.DialPointer: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<time.TimeSeriesCollection: void <init>(org.jfree.data.time.TimeSeries)>" -> "<org.jfree.data.time.TimeSeriesCollection: void <init>(org.jfree.data.time.TimeSeries,java.util.TimeZone)>";
"<xy.XYStepAreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<ScatterRenderer: void setSeriesShapesFilled(int,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<imagemap.ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>";
"<ServletUtilities: java.lang.String saveChartAsPNG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.servlet.ServletUtilities: void registerChartForDeletion(java.io.File,javax.servlet.http.HttpSession)>";
"<DefaultPolarItemRenderer: org.jfree.chart.LegendItem getLegendItem(int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<dial.DialCap: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<xy.StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer$State: boolean access$102(org.jfree.chart.renderer.xy.StandardXYItemRenderer$State,boolean)>";
"<plot.FastScatterPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.xy.XYStepAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<renderer.category.BarRenderer: void <init>()>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>()>";
"<CandlestickRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.CandlestickRenderer: void <init>(double)>";
"<category.GanttRenderer: void setStartPercent(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DefaultPlotEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultPlotEditor: void attemptOrientationSelection()>";
"<annotations.CategoryPointerAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<renderer.xy.HighLowRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<statistics.DefaultStatisticalCategoryDataset: void clear()>" -> "<org.jfree.data.statistics.DefaultStatisticalCategoryDataset: void updateBounds()>";
"<dial.DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Rectangle2D createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)>";
"<LegendItem: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<XYBarRenderer: void setLegendBar(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<labels.StandardXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat)>";
"<LabelBlock: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<time.TimeSeriesTableModel: java.lang.Class getColumnClass(int)>" -> "<org.jfree.data.time.TimeSeriesTableModel: java.lang.Class class$(java.lang.String)>";
"<text.G2TextMeasurer: float getStringWidth(java.lang.String,int,int)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<OutlierListCollection: boolean add(org.jfree.chart.renderer.Outlier)>" -> "<org.jfree.chart.renderer.OutlierList: void <init>(org.jfree.chart.renderer.Outlier)>";
"<dial.DialPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D viewToFrame(java.awt.geom.Rectangle2D)>";
"<XYBoxAndWhiskerRenderer: void <init>(double)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<MeterNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<XYBarDataset: void <init>(org.jfree.data.xy.XYDataset,double)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<renderer.category.AbstractCategoryItemRenderer: void setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<BasicProjectInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.ui.BasicProjectInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>";
"<axis.ModuloAxis: void setDisplayRange(double,double)>" -> "<org.jfree.chart.axis.ModuloAxis: double mapValueToFixedRange(double)>";
"<renderer.xy.XYErrorRenderer: void setDrawXError(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<title.TextTitle: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.entity.StandardEntityCollection: void <init>()>";
"<time.MovingAverage: org.jfree.data.xy.XYDataset createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,long,long)>" -> "<org.jfree.data.time.MovingAverage: org.jfree.data.xy.XYDataset createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,double,double)>";
"<XYTitleAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(org.jfree.data.Range,org.jfree.data.Range)>";
"<xy.VectorRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<SimpleHistogramDataset: void clearObservations()>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<xy.XYDotRenderer: void setDotWidth(int)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DefaultHighLowDataset: void <init>(java.lang.Comparable,java.util.Date[],double[],double[],double[],double[],double[])>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<StandardDialScale: void setTickLabelsVisible(boolean)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<BarRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<renderer.category.BarRenderer3D: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>";
"<time.Second: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Second: void <init>(int,org.jfree.data.time.Minute)>";
"<labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat)>";
"<statistics.HistogramDataset: void addSeries(java.lang.Comparable,double[],int,double,double)>" -> "<org.jfree.data.statistics.HistogramBin: void <init>(double,double)>";
"<category.StackedBarRenderer: void <init>(boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<time.Day: void <init>(int,int,int)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<axis.SegmentedTimeline: void addException(long)>" -> "<org.jfree.chart.axis.SegmentedTimeline: void addException(org.jfree.chart.axis.SegmentedTimeline$Segment)>";
"<AbstractXYItemRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<time.Minute: void <init>(int,int,int,int,int)>" -> "<org.jfree.data.time.Day: void <init>(int,int,int)>";
"<xy.StackedXYAreaRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)>";
"<text.TextBlockAnchor: void <clinit>()>" -> "<org.jfree.chart.text.TextBlockAnchor: void <init>(java.lang.String)>";
"<plot.FastScatterPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<plot.Plot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<XYDotRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<xy.StackedXYBarRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.data.general.DatasetUtilities: double calculateStackTotal(org.jfree.data.xy.TableXYDataset,int)>";
"<DateAxis: void setRange(java.util.Date,java.util.Date)>" -> "<org.jfree.data.time.DateRange: void <init>(java.util.Date,java.util.Date)>";
"<general.DatasetUtilities: org.jfree.data.general.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset,java.lang.Comparable)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.general.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)>";
"<renderer.category.BarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)>";
"<ExtendedCategoryAxis: void setSubLabelPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<plot.PiePlot: void drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<axis.PeriodAxisLabelInfo: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<XYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<imagemap.ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>";
"<title.LegendTitle: org.jfree.chart.block.Block createLegendItemBlock(org.jfree.chart.LegendItem)>" -> "<org.jfree.chart.block.BlockContainer: void <init>(org.jfree.chart.block.Arrangement)>";
"<WindItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<dial.DialPlot: void setDataset(int,org.jfree.data.general.ValueDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<xy.XYSeries: void <init>(java.lang.Comparable,boolean)>" -> "<org.jfree.data.xy.XYSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<axis.CyclicNumberAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>";
"<axis.DateAxis: void setDateFormatOverride(java.text.DateFormat)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<DefaultXYDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<ObjectUtilities: boolean isJDK14()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Class class$(java.lang.String)>";
"<dial.StandardDialRange: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)>";
"<LabelBlock: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<category.BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.Outlier: void <init>(double,double,double)>";
"<xy.XYDotRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<DefaultChartEditor: void <init>(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.ui.PaintSample: void <init>(java.awt.Paint)>";
"<ImageTitle: void setImage(java.awt.Image)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<axis.LogarithmicAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.geom.GeneralPath,java.awt.geom.GeneralPath)>";
"<Axis: void removeChangeListener(org.jfree.chart.event.AxisChangeListener)>" -> "<org.jfree.chart.axis.Axis: java.lang.Class class$(java.lang.String)>";
"<Axis: void setAxisLineStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<XYLineAndShapeRenderer: void drawSecondaryPass(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.CrosshairState,org.jfree.chart.entity.EntityCollection)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean isPointInRect(java.awt.geom.Rectangle2D,double,double)>";
"<plot.Plot: void drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.G2TextMeasurer: void <init>(java.awt.Graphics2D)>";
"<XYDotRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<editor.DefaultChartEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultChartEditor: void attemptModifyBackgroundPaint()>";
"<text.TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)>";
"<CombinedRangeCategoryPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<DialBackground: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<dial.DialValueIndicator: void setFrameAnchor(org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.category.LineRenderer3D: void <init>()>";
"<util.HashUtilities: int hashCode(int,java.awt.Paint)>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWaterfallChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<renderer.category.AbstractCategoryItemRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.category.CategoryDataset,int,int,double,double,boolean)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<CategoryLineAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<time.SerialDate: org.jfree.data.time.SerialDate getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate addDays(int,org.jfree.data.time.SerialDate)>";
"<plot.dial.DialTextAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.SpiderWebPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<axis.CategoryLabelPositions: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor)>";
"<XYBarRenderer: void <init>(double)>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>()>";
"<plot.dial.StandardDialScale: void setUpperBound(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYDifferenceRenderer: void setLegendLine(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<Day: void <init>(int,int,int)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int,int,int)>";
"<CategoryPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<plot.MeterPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<time.Week: org.jfree.data.time.Year evaluateAsYear(java.lang.String)>" -> "<org.jfree.data.time.Year: org.jfree.data.time.Year parseYear(java.lang.String)>";
"<XYLineAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.TableXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<DatasetUtilities: org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double[][])>" -> "<org.jfree.chart.util.ArrayUtilities: boolean hasDuplicateItems(java.lang.Object[])>";
"<plot.FastScatterPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ArrayUtilities: float[][] clone(float[][])>";
"<plot.XYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<xy.AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<DefaultWindDataset: void <init>(java.lang.Object[][][])>" -> "<org.jfree.data.xy.DefaultWindDataset: void <init>(java.util.List,java.lang.Object[][][])>";
"<LabelBlock: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<CategoryMarker: void <init>(java.lang.Comparable,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>" -> "<org.jfree.chart.plot.Marker: void <init>(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<AbstractIntervalXYDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<axis.ValueAxis: void setNegativeArrowVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<time.TimeSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)>";
"<axis.ModuloAxis: double transEnd(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<util.LogFormat: void <init>(double,java.lang.String,boolean)>" -> "<org.jfree.chart.util.LogFormat: void <init>(double,java.lang.String,java.lang.String,boolean)>";
"<editor.DefaultPlotEditor: org.jfree.chart.util.RectangleInsets getPlotInsets()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<axis.CyclicNumberAxis: void <init>(double)>" -> "<org.jfree.chart.axis.CyclicNumberAxis: void <init>(double,double)>";
"<time.TimePeriodValues: void add(org.jfree.data.time.TimePeriod,java.lang.Number)>" -> "<org.jfree.data.time.TimePeriodValue: void <init>(org.jfree.data.time.TimePeriod,java.lang.Number)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYStepRenderer: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<editor.DefaultAxisEditor: org.jfree.chart.editor.DefaultAxisEditor getInstance(org.jfree.chart.axis.Axis)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: void <init>(org.jfree.chart.axis.Axis)>";
"<time.SpreadsheetDate: void <init>(int,int,int)>" -> "<org.jfree.data.time.SerialDate: int lastDayOfMonth(int,int)>";
"<StandardDialScale: void setTickRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<Month: org.jfree.data.time.Month parseMonth(java.lang.String)>" -> "<org.jfree.data.time.SerialDate: int stringToMonthCode(java.lang.String)>";
"<axis.SubCategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<CategoryTableXYDataset: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<StandardDialScale: void setTickLabelFormatter(java.text.NumberFormat)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<MultiplePiePlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<dial.DialValueIndicator: void setDatasetIndex(int)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<CompassPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,java.util.Locale,boolean,boolean)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font)>";
"<WaferMapDataset: void <init>(int,int)>" -> "<org.jfree.data.general.WaferMapDataset: void <init>(int,int,java.lang.Number)>";
"<axis.SegmentedTimeline: void addException(long,long)>" -> "<org.jfree.chart.axis.SegmentedTimeline$SegmentRange: void <init>(org.jfree.chart.axis.SegmentedTimeline,long,long)>";
"<CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.LineNeedle: void <init>()>";
"<renderer.AbstractRenderer: void removeChangeListener(org.jfree.chart.event.RendererChangeListener)>" -> "<org.jfree.chart.renderer.AbstractRenderer: java.lang.Class class$(java.lang.String)>";
"<plot.XYPlot: org.jfree.chart.axis.AxisLocation getDomainAxisLocation(int)>" -> "<org.jfree.chart.axis.AxisLocation: org.jfree.chart.axis.AxisLocation getOpposite(org.jfree.chart.axis.AxisLocation)>";
"<time.SerialDate: org.jfree.data.time.SerialDate createInstance(int,int,int)>" -> "<org.jfree.data.time.SpreadsheetDate: void <init>(int,int,int)>";
"<xy.StackedXYAreaRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<xy.StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<XYStepRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: java.lang.Object clone()>";
"<renderer.category.BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawMultipleEllipse(java.awt.geom.Point2D,double,double,java.awt.Graphics2D)>";
"<XYBlockRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<DefaultWindDataset: void <init>(java.util.List,java.lang.Object[][][])>" -> "<org.jfree.data.xy.WindDataItem: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>";
"<Title: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.block.AbstractBlock: boolean equals(java.lang.Object)>";
"<LogAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<renderer.xy.HighLowRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<renderer.xy.XYLineAndShapeRenderer: void setBaseShapesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<FastScatterPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ArrayUtilities: float[][] clone(float[][])>";
"<renderer.xy.HighLowRenderer: void setDrawCloseTicks(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<time.Month: void <init>(int,int)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<Marker: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.Marker: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<CategoryPlot: org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int)>" -> "<org.jfree.chart.util.RectangleEdge: org.jfree.chart.util.RectangleEdge opposite(org.jfree.chart.util.RectangleEdge)>";
"<plot.SpiderWebPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.SpiderWebPlot: void calculateMaxValue(int,int)>";
"<general.DefaultKeyedValueDataset: void <init>()>" -> "<org.jfree.data.general.DefaultKeyedValueDataset: void <init>(org.jfree.data.KeyedValue)>";
"<plot.XYPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.plot.Plot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>";
"<axis.NumberAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.ValueAxis: boolean equals(java.lang.Object)>";
"<CombinedDataset: void add(org.jfree.data.general.SeriesDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<FastScatterPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ArrayUtilities: boolean equal(float[][],float[][])>";
"<entity.PieSectionEntity: void <init>(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<plot.XYPlot: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<dial.DialValueIndicator: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<category.AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.AbstractRenderer: java.lang.Object clone()>";
"<axis.CyclicNumberAxis: org.jfree.chart.axis.AxisState drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.AxisState drawTickMarksAndLabels(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>";
"<xy.CandlestickRenderer: void <init>(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<XYDifferenceRenderer: void drawItemPass0(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.xy.XYDifferenceRenderer: boolean areSeriesDisjoint(org.jfree.data.xy.XYDataset)>";
"<axis.NumberAxis: void setTickUnit(org.jfree.chart.axis.NumberTickUnit,boolean,boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<block.BlockBorder: void <init>(java.awt.Paint)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<NumberAxis3D: void <init>()>" -> "<org.jfree.chart.axis.NumberAxis3D: void <init>(java.lang.String)>";
"<CategoryTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<axis.CategoryLabelPosition: void <init>()>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)>";
"<plot.dial.DialValueIndicator: void setInsets(org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYBarRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<ArcDialFrame: void setStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<LookupPaintScale: void <init>()>" -> "<org.jfree.chart.renderer.LookupPaintScale: void <init>(double,double,java.awt.Paint)>";
"<axis.MonthDateFormat: void <init>(java.util.TimeZone,int)>" -> "<org.jfree.chart.axis.MonthDateFormat: void <init>(java.util.TimeZone,java.util.Locale,int,boolean,boolean)>";
"<renderer.category.LineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<util.ObjectList: void <init>(int)>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>(int)>";
"<XYPointerAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<plot.dial.DialValueIndicator: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<StandardXYZToolTipGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardXYZToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat,java.text.NumberFormat)>";
"<xy.XYBarRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer$XYBarRendererState: void <init>(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)>";
"<ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>";
"<plot.dial.StandardDialFrame: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<xy.DefaultIntervalXYDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<annotations.XYDrawableAnnotation: void <init>(double,double,double,double,org.jfree.chart.Drawable)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
"<general.CombinedDataset: org.jfree.data.general.SeriesDataset getParent()>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<StandardDialScale: void setMinorTickCount(int)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<renderer.category.LineRenderer3D: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<ChartUtilities: byte[] encodeAsPNG(java.awt.image.BufferedImage)>" -> "<org.jfree.chart.encoders.EncoderUtil: byte[] encode(java.awt.image.BufferedImage,java.lang.String)>";
"<renderer.xy.AbstractXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<plot.PiePlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.plot.PieLabelDistributor: void <init>(int)>";
"<ChartFactory: org.jfree.chart.JFreeChart createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.RingPlot: void <init>(org.jfree.data.general.PieDataset)>";
"<XYBlockRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>";
"<AbstractXYZDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<XYPolygonAnnotation: void <init>(double[])>" -> "<org.jfree.chart.annotations.XYPolygonAnnotation: void <init>(double[],java.awt.Stroke,java.awt.Paint)>";
"<DefaultAxisEditor: org.jfree.chart.editor.DefaultAxisEditor getInstance(org.jfree.chart.axis.Axis)>" -> "<org.jfree.chart.editor.DefaultNumberAxisEditor: void <init>(org.jfree.chart.axis.NumberAxis)>";
"<xy.XYIntervalSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<time.Day: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Day: void <init>(org.jfree.data.time.SerialDate)>";
"<NumberAxis: org.jfree.chart.axis.TickUnitSource createIntegerTickUnits(java.util.Locale)>" -> "<org.jfree.chart.axis.TickUnits: void <init>()>";
"<DateAxis: void setTimeZone(java.util.TimeZone)>" -> "<org.jfree.chart.axis.DateAxis: org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits(java.util.TimeZone)>";
"<axis.ModuloAxis: void resizeRange(double)>" -> "<org.jfree.chart.axis.ModuloAxis: double getDisplayCentralValue()>";
"<PiePlot: void drawPie(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: double calculatePieDatasetTotal(org.jfree.data.general.PieDataset)>";
"<category.LineAndShapeRenderer: void setUseOutlinePaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<title.LegendGraphic: void <init>(java.awt.Shape,java.awt.Paint)>" -> "<org.jfree.chart.block.AbstractBlock: void <init>()>";
"<axis.DateTickUnit: void <init>(int,int)>" -> "<org.jfree.chart.axis.DateTickUnit: void <init>(int,int,java.text.DateFormat)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.DateAxis: void <init>(java.lang.String)>";
"<renderer.xy.XYBlockRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<axis.DateAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.data.time.Month: void <init>(java.util.Date,java.util.TimeZone)>";
"<ChartFactory: org.jfree.chart.JFreeChart createScatterPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<TextTitle: org.jfree.chart.util.Size2D arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)>";
"<plot.ThermometerPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint)>" -> "<org.jfree.chart.text.TextBlock: void <init>()>";
"<renderer.xy.CyclicXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<text.TextFragment: void draw(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,float,float,double)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)>";
"<XYBarRenderer: void setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<CombinedDomainXYPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleEdge: double coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>";
"<plot.dial.StandardDialScale: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<Statistics: double calculateMedian(java.util.List,int,int,boolean)>" -> "<org.jfree.data.statistics.Statistics: double calculateMedian(java.util.List,boolean)>";
"<AbstractBlock: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<renderer.category.StatisticalBarRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<xy.StackedXYBarRenderer: void setRenderAsPercentages(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<SegmentedTimeline: void addException(long)>" -> "<org.jfree.chart.axis.SegmentedTimeline$Segment: void <init>(org.jfree.chart.axis.SegmentedTimeline,long)>";
"<FixedMillisecond: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.FixedMillisecond: void <init>(long)>";
"<time.TimePeriodValues: org.jfree.data.time.TimePeriodValues createCopy(int,int)>" -> "<org.jfree.data.general.Series: java.lang.Object clone()>";
"<StandardDialRange: void <init>()>" -> "<org.jfree.chart.plot.dial.StandardDialRange: void <init>(double,double,java.awt.Paint)>";
"<plot.dial.StandardDialScale: void setTickLabelFont(java.awt.Font)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<category.BarRenderer3D: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>";
"<renderer.xy.StandardXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer$State: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<XYBlockRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<CombinedDomainXYPlot: void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.plot.XYPlot: void setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)>";
"<xy.VectorRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<xy.XYBarRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<block.ColorBlock: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<axis.PeriodAxis: void setMinorTickMarkPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<block.LabelBlock: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.block.BlockResult: void <init>()>";
"<axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions createDownRotationLabelPositions(double)>" -> "<org.jfree.chart.axis.CategoryLabelPositions: void <init>(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)>";
"<plot.MultiplePiePlot: void <init>(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.chart.JFreeChart: void <init>(org.jfree.chart.plot.Plot)>";
"<CategoryAxis: org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)>" -> "<org.jfree.chart.text.G2TextMeasurer: void <init>(java.awt.Graphics2D)>";
"<xml.DatasetReader: org.jfree.data.general.PieDataset readPieDatasetFromXML(java.io.File)>" -> "<org.jfree.data.xml.DatasetReader: org.jfree.data.general.PieDataset readPieDatasetFromXML(java.io.InputStream)>";
"<dial.StandardDialRange: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.Outlier: void <init>(double,double,double)>";
"<axis.NumberAxis3D: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<ohlc.OHLCItem: void <init>(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>" -> "<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>";
"<axis.NumberAxis: void <init>()>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<Series: void notifyListeners(org.jfree.data.general.SeriesChangeEvent)>" -> "<org.jfree.data.general.Series: java.lang.Class class$(java.lang.String)>";
"<entity.ChartEntity: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<time.Month: org.jfree.data.time.Year getYear()>" -> "<org.jfree.data.time.Year: void <init>(int)>";
"<renderer.xy.XYBlockRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<plot.CategoryMarker: void setKey(java.lang.Comparable)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<PolarPlot: void <init>()>" -> "<org.jfree.chart.plot.PolarPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)>";
"<renderer.xy.XYAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<xy.XYDifferenceRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<XYBarRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<annotations.XYShapeAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<renderer.category.BarRenderer: void setMinimumBarLength(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<LegendGraphic: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.xy.XYDotRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<DateTick: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.ValueTick: boolean equals(java.lang.Object)>";
"<PiePlot: void drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<block.RectangleConstraint: org.jfree.chart.block.RectangleConstraint toUnconstrainedWidth()>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<time.DynamicTimeSeriesCollection: void <init>(int,int)>" -> "<org.jfree.data.time.DynamicTimeSeriesCollection: void <init>(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>";
"<renderer.xy.AbstractXYItemRenderer: java.awt.geom.Point2D calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<XYShapeAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<MultipleXYSeriesLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.MultipleXYSeriesLabelGenerator: void <init>(java.lang.String)>";
"<NumberAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<DefaultBoxAndWhiskerCategoryDataset: void <init>()>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<xy.XYStepAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.XYStepAreaRenderer: double restrictValueToDataArea(double,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D)>";
"<editor.DefaultPlotEditor: void <init>(org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.ui.PaintSample: void <init>(java.awt.Paint)>";
"<plot.dial.StandardDialFrame: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<XYShapeAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<text.TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<annotations.XYLineAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<RectangleConstraint: void <init>(double,org.jfree.data.Range)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<time.TimePeriodValues: void add(org.jfree.data.time.TimePeriodValue)>" -> "<org.jfree.data.time.TimePeriodValues: void updateBounds(org.jfree.data.time.TimePeriod,int)>";
"<DynamicTimeSeriesCollection: void <init>(int,int,java.util.TimeZone)>" -> "<org.jfree.data.time.Millisecond: void <init>()>";
"<plot.CombinedRangeXYPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotState: void <init>()>";
"<axis.Axis: void setTickMarksVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<plot.CombinedDomainXYPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<LegendItemBlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.block.BlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>";
"<IntervalCategoryToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<plot.dial.DialValueIndicator: void setOutlineStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<StackedBarRenderer3D: void <init>(double,double,boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: void <init>(double,double)>";
"<statistics.DefaultMultiValueCategoryDataset: void <init>()>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<LegendTitle: void fetchLegendItems()>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<dial.DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<text.TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: float[] deriveTextBoundsAnchorOffsets(java.awt.Graphics2D,java.lang.String,org.jfree.chart.text.TextAnchor)>";
"<DefaultAxisEditor: void attemptTickLabelFontSelection()>" -> "<org.jfree.chart.ui.FontChooserPanel: void <init>(java.awt.Font)>";
"<renderer.xy.XYDifferenceRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYDifferenceRenderer: void <init>(java.awt.Paint,java.awt.Paint,boolean)>";
"<DefaultValueDataset: void <init>()>" -> "<org.jfree.data.general.DefaultValueDataset: void <init>(java.lang.Number)>";
"<DateAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.DateAxis: void <init>(java.lang.String,java.util.TimeZone)>";
"<editor.DefaultNumberAxisEditor: void <init>(org.jfree.chart.axis.NumberAxis)>" -> "<org.jfree.chart.editor.DefaultAxisEditor: void <init>(org.jfree.chart.axis.Axis)>";
"<labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>";
"<plot.PolarPlot: java.util.List refreshAngleTicks()>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<DateTick: void <init>(java.util.Date,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>" -> "<org.jfree.chart.axis.ValueTick: void <init>(double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<plot.Marker: void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)>" -> "<org.jfree.chart.plot.Marker: java.lang.Class class$(java.lang.String)>";
"<StandardEntityCollection: java.lang.Object clone()>" -> "<org.jfree.chart.entity.ChartEntity: java.lang.Object clone()>";
"<XYStepRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<StandardXYItemLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<plot.CombinedDomainCategoryPlot: void add(org.jfree.chart.plot.CategoryPlot,int)>" -> "<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<Day: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int)>";
"<renderer.xy.CandlestickRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<plot.PolarPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.plot.Plot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>";
"<labels.StandardXYToolTipGenerator: java.lang.Object clone()>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: java.lang.Object clone()>";
"<SpiderWebPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<xml.ItemHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>" -> "<org.jfree.data.xml.ValueHandler: void <init>(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)>";
"<ArcDialFrame: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.category.BoxAndWhiskerRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<CombinedDataset: void <init>(org.jfree.data.general.SeriesDataset[])>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<WindNeedle: void <init>()>" -> "<org.jfree.chart.needle.ArrowNeedle: void <init>(boolean)>";
"<ChartPanel: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.ChartPanel: void doSaveAs()>";
"<labels.StandardXYToolTipGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: boolean equals(java.lang.Object)>";
"<statistics.HistogramDataset: java.lang.Number getY(int,int)>" -> "<org.jfree.data.statistics.HistogramDataset: int getTotal(int)>";
"<renderer.xy.XYBlockRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<XYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<BarChartDemo1: void main(java.lang.String[])>" -> "<org.jfree.chart.util.RefineryUtilities: void centerFrameOnScreen(java.awt.Window)>";
"<RefineryUtilities: void positionFrameOnScreen(java.awt.Window,double,double)>" -> "<org.jfree.chart.util.RefineryUtilities: java.awt.Rectangle getMaximumWindowBounds()>";
"<plot.CombinedDomainXYPlot: void add(org.jfree.chart.plot.XYPlot,int)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<CombinedRangeCategoryPlot: void <init>(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<plot.dial.StandardDialScale: void setStartAngle(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<labels.StandardPieSectionLabelGenerator: java.lang.Object clone()>" -> "<org.jfree.chart.labels.AbstractPieItemLabelGenerator: java.lang.Object clone()>";
"<category.DefaultCategoryItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createRingChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<category.AbstractCategoryItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.AbstractRenderer: void <init>()>";
"<util.RefineryUtilities: void positionFrameOnScreen(java.awt.Window,double,double)>" -> "<org.jfree.chart.util.RefineryUtilities: java.awt.Rectangle getMaximumWindowBounds()>";
"<renderer.xy.StackedXYAreaRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<block.RectangleConstraint: org.jfree.chart.block.RectangleConstraint toFixedHeight(double)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<CategoryAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.Axis: void <init>(java.lang.String)>";
"<category.GanttRenderer: void setEndPercent(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.XYLineAndShapeRenderer: void setUseOutlinePaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.CompassPlot: void <init>()>" -> "<org.jfree.data.general.DefaultValueDataset: void <init>()>";
"<ModuloAxis: void setDisplayRange(double,double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<category.AreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<MinMaxCategoryRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<DefaultMultiValueCategoryDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<axis.CategoryAxis: java.lang.Object clone()>" -> "<org.jfree.chart.axis.Axis: java.lang.Object clone()>";
"<xy.XYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<CompassPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<category.StatisticalLineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void <init>(boolean,boolean)>";
"<ArrowNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<SpiderWebPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder)>" -> "<org.jfree.chart.labels.StandardCategoryItemLabelGenerator: void <init>()>";
"<StatisticalBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<BorderArrangement: org.jfree.chart.util.Size2D arrangeRR(org.jfree.chart.block.BlockContainer,org.jfree.data.Range,org.jfree.data.Range,java.awt.Graphics2D)>" -> "<org.jfree.data.Range: org.jfree.data.Range shift(org.jfree.data.Range,double,boolean)>";
"<PeriodAxisLabelInfo: org.jfree.data.time.RegularTimePeriod createInstance(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.chart.axis.PeriodAxisLabelInfo: java.lang.Class class$(java.lang.String)>";
"<statistics.MeanAndStandardDeviation: void <init>(double,double)>" -> "<org.jfree.data.statistics.MeanAndStandardDeviation: void <init>(java.lang.Number,java.lang.Number)>";
"<dial.DialValueIndicator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<dial.StandardDialScale: void setTickRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<CategoryPointerAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<category.AreaRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<encoders.EncoderUtil: void writeBufferedImage(java.awt.image.BufferedImage,java.lang.String,java.io.OutputStream,float)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,float)>";
"<StackedXYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<DatasetUtilities: org.jfree.data.general.PieDataset createPieDatasetForColumn(org.jfree.data.category.CategoryDataset,int)>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<renderer.xy.XYErrorRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<PieLabelDistributor: void <init>(int)>" -> "<org.jfree.chart.plot.AbstractPieLabelDistributor: void <init>()>";
"<util.PaintList: void <init>()>" -> "<org.jfree.chart.util.AbstractObjectList: void <init>()>";
"<TimeSeriesCollection: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<RegularTimePeriod: org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: java.lang.Class class$(java.lang.String)>";
"<category.MinMaxCategoryRenderer: void setGroupPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYLine3DRenderer: void setYOffset(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<NumberAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<BarRenderer: void setBase(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<BlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.entity.StandardEntityCollection: void <init>()>";
"<xy.StackedXYAreaRenderer2: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer2: boolean equals(java.lang.Object)>";
"<plot.PiePlot: void drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)>";
"<annotations.XYShapeAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<StandardXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>";
"<XYStepRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYStepRenderer: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<plot.dial.StandardDialScale: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.category.AbstractCategoryItemRenderer: void setLegendItemURLGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.StandardURLTagFragmentGenerator: void <init>()>";
"<CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions createUpRotationLabelPositions(double)>" -> "<org.jfree.chart.axis.CategoryLabelPositions: void <init>(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)>";
"<PiePlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<axis.ExtendedCategoryAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.category.LineAndShapeRenderer: void setUseSeriesOffset(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYIntervalDataItem: void <init>(double,double,double,double,double,double)>" -> "<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>";
"<SerialDate: java.lang.String monthCodeToString(int)>" -> "<org.jfree.data.time.SerialDate: java.lang.String monthCodeToString(int,boolean)>";
"<DateTickUnit: java.util.Date rollDate(java.util.Date)>" -> "<org.jfree.chart.axis.DateTickUnit: int getCalendarField(int)>";
"<LegendGraphic: org.jfree.chart.util.Size2D arrangeNN(java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<general.CombinedDataset: void add(org.jfree.data.general.SeriesDataset[])>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<TimePeriodValuesCollection: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<LegendItem: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<renderer.xy.XYBoxAndWhiskerRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<time.DynamicTimeSeriesCollection: org.jfree.data.Range getRangeBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<renderer.xy.XYBarRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<ChartFactory: org.jfree.chart.JFreeChart createHistogram(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<renderer.OutlierListCollection: boolean add(org.jfree.chart.renderer.Outlier)>" -> "<org.jfree.chart.renderer.OutlierList: void <init>(org.jfree.chart.renderer.Outlier)>";
"<LegendTitle: void setSources(org.jfree.chart.LegendItemSource[])>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<renderer.xy.CandlestickRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.SpiderWebPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<plot.PolarPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<dial.DialPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.plot.dial.ArcDialFrame: void <init>()>";
"<time.TimeSeries: boolean equals(java.lang.Object)>" -> "<org.jfree.data.general.Series: boolean equals(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.TableXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>()>";
"<plot.CompassPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<TextTitle: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<general.DatasetUtilities: org.jfree.data.xy.XYDataset sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)>" -> "<org.jfree.data.xy.XYSeries: void <init>(java.lang.Comparable)>";
"<SerialDate: org.jfree.data.time.SerialDate getPreviousDayOfWeek(int)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)>";
"<TimeSeriesChartDemo1: void main(java.lang.String[])>" -> "<org.jfree.chart.util.RefineryUtilities: void centerFrameOnScreen(java.awt.Window)>";
"<statistics.HistogramDataset: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<DialTextAnnotation: void setAngle(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<PeriodAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.PeriodAxis: void <init>(java.lang.String,org.jfree.data.time.RegularTimePeriod,org.jfree.data.time.RegularTimePeriod)>";
"<axis.DateAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<PiePlot: void <init>(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(org.jfree.chart.util.UnitType,double,double,double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<axis.CategoryTick: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<StackedXYBarRenderer: void setRenderAsPercentages(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<TextBox: void <init>()>" -> "<org.jfree.chart.text.TextBox: void <init>(org.jfree.chart.text.TextBlock)>";
"<plot.dial.DialValueIndicator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<statistics.DefaultBoxAndWhiskerCategoryDataset: org.jfree.data.Range getRangeBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<axis.DateAxis: void setMinimumDate(java.util.Date)>" -> "<org.jfree.data.time.DateRange: void <init>(java.util.Date,java.util.Date)>";
"<xml.PieDatasetHandler: void <init>()>" -> "<org.jfree.data.xml.RootHandler: void <init>()>";
"<renderer.category.AbstractCategoryItemRenderer: void <init>()>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<category.AbstractCategoryItemRenderer: void setSeriesItemLabelGenerator(int,org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions createDownRotationLabelPositions(double)>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)>";
"<DefaultDrawingSupplier: java.awt.Shape[] createStandardSeriesShapes()>" -> "<org.jfree.chart.plot.DefaultDrawingSupplier: int[] intArray(double,double,double)>";
"<time.SerialDate: org.jfree.data.time.SerialDate getNearestDayOfWeek(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: boolean isValidWeekdayCode(int)>";
"<XYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<xy.DefaultWindDataset: void <init>(java.lang.Object[][][])>" -> "<org.jfree.data.xy.DefaultWindDataset: void <init>(java.util.List,java.lang.Object[][][])>";
"<category.BarRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<TextBlock: java.awt.Shape calculateBounds(java.awt.Graphics2D,float,float,org.jfree.chart.text.TextBlockAnchor,float,float,double)>" -> "<org.jfree.chart.text.TextBlock: float[] calculateOffsets(org.jfree.chart.text.TextBlockAnchor,double,double)>";
"<plot.RingPlot: void drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)>" -> "<org.jfree.chart.entity.PieSectionEntity: void <init>(java.awt.Shape,org.jfree.data.general.PieDataset,int,int,java.lang.Comparable,java.lang.String,java.lang.String)>";
"<plot.ValueMarker: void setValue(double)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<xy.XYBoxAndWhiskerRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<xy.AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.AbstractRenderer: java.lang.Object clone()>";
"<statistics.DefaultStatisticalCategoryDataset: void removeColumn(java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultStatisticalCategoryDataset: void updateBounds()>";
"<statistics.BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List,boolean)>" -> "<org.jfree.data.statistics.BoxAndWhiskerItem: void <init>(java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.Number,java.util.List)>";
"<LevelRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>";
"<ui.FontDisplayField: void setDisplayFont(java.awt.Font)>" -> "<org.jfree.chart.ui.FontDisplayField: java.lang.String fontToString(java.awt.Font)>";
"<DialValueIndicator: void setTextAnchor(org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<axis.ModuloAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.ModuloAxis: double trans(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>";
"<annotations.XYPolygonAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<renderer.category.GroupedStackedBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer: void <init>()>";
"<demo.TimeSeriesChartDemo1: void main(java.lang.String[])>" -> "<org.jfree.chart.util.RefineryUtilities: void centerFrameOnScreen(java.awt.Window)>";
"<CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.ArrowNeedle: void <init>(boolean)>";
"<ExtendedCategoryAxis: org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)>" -> "<org.jfree.chart.axis.CategoryAxis: org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)>";
"<DisplayChart: void service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>" -> "<org.jfree.chart.servlet.ServletUtilities: void sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse)>";
"<CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.PlumNeedle: void <init>()>";
"<JFreeChart: java.lang.Object clone()>" -> "<org.jfree.chart.plot.Plot: java.lang.Object clone()>";
"<editor.DefaultTitleEditor: void attemptFontSelection()>" -> "<org.jfree.chart.ui.FontChooserPanel: void <init>(java.awt.Font)>";
"<DialPointer: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYBarChart(java.lang.String,java.lang.String,boolean,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.DateAxis: void <init>(java.lang.String)>";
"<ValueTick: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.Tick: boolean equals(java.lang.Object)>";
"<CategoryAxis: java.lang.Object clone()>" -> "<org.jfree.chart.axis.Axis: java.lang.Object clone()>";
"<AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Class class$(java.lang.String)>";
"<dial.DialTextAnnotation: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<category.StackedBarRenderer3D: void <init>(double,double)>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: void <init>(double,double)>";
"<DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)>";
"<util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<OHLCSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractXYDataset: java.lang.Object clone()>";
"<ChartPanel: void mouseClicked(java.awt.event.MouseEvent)>" -> "<org.jfree.chart.ChartPanel: java.lang.Class class$(java.lang.String)>";
"<block.GridArrangement: org.jfree.chart.util.Size2D arrangeFF(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<CyclicNumberAxis: float[] calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberAxis: float[] calculateAnchorPoint(org.jfree.chart.axis.ValueTick,double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>";
"<XYAreaRenderer2: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<FastScatterPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<xy.XYBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<LegendGraphic: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<CategoryAxis: org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)>";
"<category.CategoryToPieDataset: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,int)>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<AbstractRenderer: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.lang.Object)>";
"<ChartUtilities: void saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,boolean,int)>" -> "<org.jfree.chart.ChartUtilities: void writeChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,boolean,int)>";
"<plot.CombinedDomainCategoryPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<renderer.AbstractRenderer: void <init>()>" -> "<org.jfree.chart.util.StrokeList: void <init>()>";
"<CategoryLineAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<JFreeChart: void <init>(org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.axis.CategoryLabelWidthType,float)>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)>";
"<PiePlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<title.Title: int hashCode()>" -> "<org.jfree.chart.util.ObjectUtilities: int hashCode(java.lang.Object)>";
"<general.DefaultPieDataset: void <init>()>" -> "<org.jfree.data.DefaultKeyedValues: void <init>()>";
"<axis.MonthDateFormat: void main(java.lang.String[])>" -> "<org.jfree.chart.axis.MonthDateFormat: void <init>(java.util.Locale,int)>";
"<ComparableObjectSeries: void <init>(java.lang.Comparable,boolean,boolean)>" -> "<org.jfree.data.general.Series: void <init>(java.lang.Comparable)>";
"<time.DateRange: void <init>(org.jfree.data.Range)>" -> "<org.jfree.data.time.DateRange: void <init>(double,double)>";
"<Hour: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<title.Title: void setHorizontalAlignment(org.jfree.chart.util.HorizontalAlignment)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<renderer.xy.XYStepAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<renderer.xy.StandardXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<XYErrorRenderer: void setDrawYError(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.ValueAxis: void <init>(java.lang.String,org.jfree.chart.axis.TickUnitSource)>" -> "<org.jfree.chart.axis.Axis: void <init>(java.lang.String)>";
"<OHLCSeries: void add(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>" -> "<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>";
"<ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String,boolean)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String)>";
"<xy.XYDotRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<title.Title: void <init>(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.block.AbstractBlock: void <init>()>";
"<axis.ValueAxis: void setPositiveArrowVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<xy.XYAreaRenderer2: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<title.LegendTitle: void setSources(org.jfree.chart.LegendItemSource[])>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<DefaultIntervalCategoryDataset: void <init>(double[][],double[][])>" -> "<org.jfree.data.category.DefaultIntervalCategoryDataset: void <init>(java.lang.Number[][],java.lang.Number[][])>";
"<renderer.category.StackedBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)>";
"<demo.TimeSeriesChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.util.ApplicationFrame: void <init>(java.lang.String)>";
"<PiePlot3D: void drawSide(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Arc2D,java.awt.geom.Area,java.awt.geom.Area,java.awt.Paint,java.awt.Paint,java.awt.Stroke,boolean,boolean)>" -> "<org.jfree.chart.plot.PiePlot3D: boolean isAngleAtBack(double)>";
"<annotations.XYTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<general.DefaultValueDataset: void <init>()>" -> "<org.jfree.data.general.DefaultValueDataset: void <init>(java.lang.Number)>";
"<xy.StackedXYAreaRenderer2: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: double[] adjustedStackValues(double[],double[])>";
"<AbstractBlock: org.jfree.data.Range trimToContentWidth(org.jfree.data.Range)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<category.ScatterRenderer: void <init>()>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<util.RefineryUtilities: void positionFrameRandomly(java.awt.Window)>" -> "<org.jfree.chart.util.RefineryUtilities: void positionFrameOnScreen(java.awt.Window,double,double)>";
"<block.ColorBlock: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.xy.XYBarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.XYPlot,org.jfree.chart.labels.XYItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<plot.SpiderWebPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.category.CategoryDataset)>";
"<axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createIntegerTickUnits(java.util.Locale)>" -> "<org.jfree.chart.axis.TickUnits: void <init>()>";
"<text.TextFragment: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<axis.ValueAxis: void setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<annotations.XYBoxAnnotation: void <init>(double,double,double,double,java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.annotations.XYBoxAnnotation: void <init>(double,double,double,double,java.awt.Stroke,java.awt.Paint,java.awt.Paint)>";
"<xy.StackedXYAreaRenderer2: void <init>()>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<NumberAxis: void selectAutoTickUnit(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<ChartFactory: org.jfree.chart.JFreeChart createMultiplePieChart3D(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<plot.PiePlot: void drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.plot.PieLabelRecord: void <init>(java.lang.Comparable,double,double,org.jfree.chart.text.TextBox,double,double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<block.AbstractBlock: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<plot.dial.DialPointer: void setDatasetIndex(int)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<plot.PiePlot3D: void <init>()>" -> "<org.jfree.chart.plot.PiePlot3D: void <init>(org.jfree.data.general.PieDataset)>";
"<general.AbstractDataset: void removeChangeListener(org.jfree.data.general.DatasetChangeListener)>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Class class$(java.lang.String)>";
"<StackedXYAreaRenderer2: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: double[] averageStackValues(double[],double[])>";
"<text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,double,float,float)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)>";
"<plot.ThermometerPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<time.TimeSeries: void <init>(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)>" -> "<org.jfree.data.general.Series: void <init>(java.lang.Comparable)>";
"<SymbolAxis: void autoAdjustRange()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<annotations.XYPolygonAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForDoubleArray(double[])>";
"<renderer.xy.XYBlockRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<StandardDialFrame: java.awt.Shape getWindow(java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<xy.XYBarDataset: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<BlockBorder: void <clinit>()>" -> "<org.jfree.chart.block.BlockBorder: void <init>(org.jfree.chart.util.RectangleInsets,java.awt.Paint)>";
"<VectorSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.XYStepRenderer: int hashCode()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: int hashCode()>";
"<plot.CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.PinNeedle: void <init>()>";
"<CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions createDownRotationLabelPositions(double)>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)>";
"<renderer.xy.StandardXYItemRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<SeriesRenderingOrder: void <clinit>()>" -> "<org.jfree.chart.plot.SeriesRenderingOrder: void <init>(java.lang.String)>";
"<title.LegendGraphic: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<Axis: void setLabelInsets(org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<LegendItemEntity: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<plot.CategoryPlot: void mapDatasetToRangeAxis(int,int)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<plot.dial.StandardDialRange: void <init>(double,double,java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<LookupPaintScale: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<DateAxis: void autoAdjustRange()>" -> "<org.jfree.data.time.DateRange: void <init>(double,double)>";
"<axis.ValueAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions replaceBottomPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)>" -> "<org.jfree.chart.axis.CategoryLabelPositions: void <init>(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)>";
"<time.Minute: org.jfree.data.time.Minute parseMinute(java.lang.String)>" -> "<org.jfree.data.time.Day: org.jfree.data.time.Day parseDay(java.lang.String)>";
"<Second: org.jfree.data.time.Second parseSecond(java.lang.String)>" -> "<org.jfree.data.time.Minute: void <init>(int,org.jfree.data.time.Hour)>";
"<AbstractDialLayer: void addChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Class class$(java.lang.String)>";
"<renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<PeriodAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<TextTitle: void setURLText(java.lang.String)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<WaferMapRenderer: void <init>(java.lang.Integer,java.lang.Integer)>" -> "<org.jfree.chart.renderer.WaferMapRenderer: boolean isMethodValid(int)>";
"<renderer.xy.HighLowRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.dial.DialValueIndicator: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<StackedXYAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: boolean equals(java.lang.Object)>";
"<xy.XYBarRenderer: void setUseYInterval(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<block.BorderArrangement: org.jfree.chart.util.Size2D arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>";
"<StandardPieSectionLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<AbstractXYItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.AbstractRenderer: boolean equals(java.lang.Object)>";
"<JDBCPieDataset: void executeQuery(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCPieDataset: void setValue(java.lang.Comparable,double)>";
"<ComparableObjectSeries: void add(java.lang.Comparable,java.lang.Object,boolean)>" -> "<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>";
"<text.TextLine: void <init>(java.lang.String,java.awt.Font)>" -> "<org.jfree.chart.text.TextFragment: void <init>(java.lang.String,java.awt.Font)>";
"<general.Series: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.general.Series: void <init>(java.lang.Comparable,java.lang.String)>";
"<XYBoxAnnotation: void <init>(double,double,double,double)>" -> "<org.jfree.chart.annotations.XYBoxAnnotation: void <init>(double,double,double,double,java.awt.Stroke,java.awt.Paint)>";
"<time.SpreadsheetDate: void <init>(int,int,int)>" -> "<org.jfree.data.time.SerialDate: void <init>()>";
"<XYDifferenceRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<time.Week: void <init>(int,int)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<XYImageAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<axis.ModuloAxis: double transEnd(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<JFreeChartInfo: void <init>()>" -> "<org.jfree.chart.ui.ProjectInfo: void <init>()>";
"<WaterfallBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.WaterfallBarRenderer: void <init>(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)>";
"<annotations.XYDrawableAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<XYDotRenderer: void setDotWidth(int)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<title.LegendGraphic: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<PeriodAxis: org.jfree.chart.axis.AxisState drawTickLabels(int,java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<SpiderWebPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<CenterArrangement: org.jfree.chart.util.Size2D arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<xy.XYIntervalDataItem: void <init>(double,double,double,double,double,double)>" -> "<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerXYDataset,boolean)>" -> "<org.jfree.chart.axis.DateAxis: void <init>(java.lang.String)>";
"<renderer.xy.StackedXYBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<Month: org.jfree.data.time.Month parseMonth(java.lang.String)>" -> "<org.jfree.data.time.Month: org.jfree.data.time.Year evaluateAsYear(java.lang.String)>";
"<SegmentedTimeline: void addBaseTimelineExclusions(long,long)>" -> "<org.jfree.chart.axis.SegmentedTimeline: void addException(org.jfree.chart.axis.SegmentedTimeline$Segment)>";
"<renderer.xy.VectorRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardCategoryURLGenerator: void <init>()>";
"<time.Second: org.jfree.data.time.Second parseSecond(java.lang.String)>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<PolarPlot: void setDataset(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<Minute: org.jfree.data.time.Minute parseMinute(java.lang.String)>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<xy.YIntervalRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<CyclicXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>";
"<ServletUtilities: java.lang.String saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.servlet.ServletUtilities: void registerChartForDeletion(java.io.File,javax.servlet.http.HttpSession)>";
"<statistics.SimpleHistogramDataset: void addObservation(double,boolean)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<plot.dial.DialBackground: void <init>(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<block.FlowArrangement: void <init>()>" -> "<org.jfree.chart.block.FlowArrangement: void <init>(org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,double,double)>";
"<plot.MeterInterval: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<DefaultDrawingSupplier: void <clinit>()>" -> "<org.jfree.chart.plot.DefaultDrawingSupplier: java.awt.Shape[] createStandardSeriesShapes()>";
"<xy.StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer$State: int access$000(org.jfree.chart.renderer.xy.StandardXYItemRenderer$State)>";
"<util.ObjectList: int indexOf(java.lang.Object)>" -> "<org.jfree.chart.util.AbstractObjectList: int indexOf(java.lang.Object)>";
"<RegularTimePeriod: java.lang.Class downsize(java.lang.Class)>" -> "<org.jfree.data.time.RegularTimePeriod: java.lang.Class class$(java.lang.String)>";
"<StackedAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.renderer.category.StackedAreaRenderer: double[] adjustedStackValues(double[],double[])>";
"<category.BarRenderer3D: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<ThermometerPlot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<entity.CategoryItemEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<general.CombinedDataset: java.lang.Number getLow(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.category.CategoryDataset,double)>";
"<plot.CombinedDomainXYPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotState: void <init>()>";
"<plot.Marker: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<DefaultPlotEditor: void attemptOutlineStrokeSelection()>" -> "<org.jfree.chart.ui.StrokeChooserPanel: void <init>(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])>";
"<CategoryAxis: void <init>()>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<XYDifferenceRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<DialValueIndicator: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<DateTickUnit: void <init>(int,int,java.text.DateFormat)>" -> "<org.jfree.chart.axis.DateTickUnit: void <init>(int,int,int,int,java.text.DateFormat)>";
"<SegmentedTimeline: long toMillisecond(long)>" -> "<org.jfree.chart.axis.SegmentedTimeline$Segment: void <init>(org.jfree.chart.axis.SegmentedTimeline,long)>";
"<SegmentedTimeline: void addException(org.jfree.chart.axis.SegmentedTimeline$Segment)>" -> "<org.jfree.chart.axis.SegmentedTimeline: int binarySearchExceptionSegments(org.jfree.chart.axis.SegmentedTimeline$Segment)>";
"<renderer.category.LineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<plot.CombinedDomainCategoryPlot: void <init>()>" -> "<org.jfree.chart.plot.CombinedDomainCategoryPlot: void <init>(org.jfree.chart.axis.CategoryAxis)>";
"<XYSeries: void <init>(java.lang.Comparable,boolean)>" -> "<org.jfree.data.xy.XYSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<DateAxis: void <init>(java.lang.String,java.util.TimeZone)>" -> "<org.jfree.chart.axis.DateAxis: org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits(java.util.TimeZone)>";
"<SubCategoryAxis: double getMaxDim(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<SpiderWebPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<axis.DateAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.DateAxis: void <init>(java.lang.String,java.util.TimeZone)>";
"<AbstractCategoryItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.AbstractRenderer: void <init>()>";
"<renderer.xy.XYBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: void <init>(double)>";
"<axis.SubCategoryAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<block.BlockBorder: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<plot.Marker: void setLabelOffset(org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<category.CategoryStepRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState createState(org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.CategoryStepRenderer$State: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<AbstractRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<plot.dial.DialPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<DefaultKeyedValues2D: void removeColumn(java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<plot.CombinedDomainCategoryPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.CategoryPlot: boolean equals(java.lang.Object)>";
"<time.Quarter: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.SerialDate: int monthCodeToQuarter(int)>";
"<ThermometerPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<renderer.xy.XYErrorRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<title.TextTitle: void <init>(java.lang.String,java.awt.Font)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<statistics.BoxAndWhiskerCalculator: org.jfree.data.statistics.BoxAndWhiskerItem calculateBoxAndWhiskerStatistics(java.util.List,boolean)>" -> "<org.jfree.data.statistics.BoxAndWhiskerCalculator: double calculateQ3(java.util.List)>";
"<labels.StandardXYSeriesLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardXYSeriesLabelGenerator: void <init>(java.lang.String)>";
"<plot.dial.DialPlot: int hashCode()>" -> "<org.jfree.chart.util.ObjectUtilities: int hashCode(java.lang.Object)>";
"<ChartUtilities: void saveChartAsJPEG(java.io.File,float,org.jfree.chart.JFreeChart,int,int)>" -> "<org.jfree.chart.ChartUtilities: void saveChartAsJPEG(java.io.File,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>";
"<renderer.xy.XYAreaRenderer2: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<AbstractBlock: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<plot.dial.DialBackground: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<CombinedDomainXYPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createBoxAndWhiskerChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.statistics.BoxAndWhiskerXYDataset,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<AbstractRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<xy.CategoryTableXYDataset: void <init>()>" -> "<org.jfree.data.xy.IntervalXYDelegate: void <init>(org.jfree.data.xy.XYDataset)>";
"<CategoryPlot: java.util.Map drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisCollection: void <init>()>";
"<DialCap: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<ui.BasicProjectInfo: void setName(java.lang.String)>" -> "<org.jfree.chart.ui.Library: void setName(java.lang.String)>";
"<XYAreaRenderer2: void setLegendArea(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.ThermometerPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<dial.StandardDialRange: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,double,boolean)>" -> "<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,double)>";
"<AbstractBlock: org.jfree.chart.block.RectangleConstraint toContentConstraint(org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<NumberAxis: org.jfree.chart.axis.TickUnitSource createIntegerTickUnits(java.util.Locale)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<general.Series: void fireSeriesChanged()>" -> "<org.jfree.data.general.SeriesChangeEvent: void <init>(java.lang.Object)>";
"<annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<MultipleXYSeriesLabelGenerator: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<CombinedDataset: java.lang.Number getStartY(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<SubCategoryAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<text.TextBox: void draw(java.awt.Graphics2D,float,float,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<ChartEntity: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<labels.AbstractPieItemLabelGenerator: java.lang.Object[] createItemArray(org.jfree.data.general.PieDataset,java.lang.Comparable)>" -> "<org.jfree.data.general.DatasetUtilities: double calculatePieDatasetTotal(org.jfree.data.general.PieDataset)>";
"<axis.PeriodAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<XYShapeAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<AbstractCategoryItemRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>";
"<title.PaintScaleLegend: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<PaintScaleLegend: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<renderer.xy.ClusteredXYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: boolean equals(java.lang.Object)>";
"<text.TextBox: void <init>(java.lang.String)>" -> "<org.jfree.chart.text.TextBlock: void <init>()>";
"<xy.XYDifferenceRenderer: void drawItemPass0(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.xy.XYDifferenceRenderer: boolean isEitherSeriesDegenerate(org.jfree.data.xy.XYDataset,boolean)>";
"<BoxAndWhiskerXYToolTipGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<plot.ThermometerPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<LabelBlock: void <init>(java.lang.String,java.awt.Font)>" -> "<org.jfree.chart.block.LabelBlock: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<axis.DateAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<AbstractXYItemRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createIntegerTickUnits()>" -> "<org.jfree.chart.axis.TickUnits: void <init>()>";
"<annotations.XYPointerAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis3D: void <init>(java.lang.String)>";
"<xy.XYStepRenderer: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,double)>";
"<category.AbstractCategoryItemRenderer: java.awt.geom.Point2D calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<RingPlot: org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)>";
"<Week: void <init>(int,int)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<LegendItem: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<xy.XYAreaRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<DateAxis: void setMinimumDate(java.util.Date)>" -> "<org.jfree.data.time.DateRange: void <init>(java.util.Date,java.util.Date)>";
"<xy.XYSplineAndShapeRenderer: void setPrecision(int)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<LegendGraphic: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)>";
"<CategoryStepRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState createState(org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.CategoryStepRenderer$State: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<PaintList: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<title.LegendGraphic: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<XYAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<plot.dial.ArcDialFrame: java.awt.Shape getOuterWindow(java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<PolarChartPanel: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.ChartPanel: void actionPerformed(java.awt.event.ActionEvent)>";
"<XYDifferenceRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<category.MinMaxCategoryRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,boolean,boolean)>";
"<XYSmoothLineAndShapeRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>()>";
"<editor.DefaultPlotEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultPlotEditor: void attemptOutlinePaintSelection()>";
"<PiePlot3D: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.general.PieDataset)>";
"<plot.dial.ArcDialFrame: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<PeriodAxis: void setMinorTickMarkInsideLength(float)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ValueAxis: void setDefaultAutoRange(org.jfree.data.Range)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<category.MinMaxCategoryRenderer: javax.swing.Icon getIcon(java.awt.Shape,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.renderer.category.MinMaxCategoryRenderer$1: void <init>(org.jfree.chart.renderer.category.MinMaxCategoryRenderer,java.awt.geom.GeneralPath,java.awt.Paint,java.awt.Paint,int,int)>";
"<BarRenderer: void setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<title.LegendGraphic: org.jfree.chart.util.Size2D arrangeNN(java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<ChartUtilities: void writeChartAsJPEG(java.io.OutputStream,float,org.jfree.chart.JFreeChart,int,int)>" -> "<org.jfree.chart.ChartUtilities: void writeChartAsJPEG(java.io.OutputStream,float,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>";
"<annotations.XYBoxAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<Axis: void setTickMarkPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<DialPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<DefaultKeyedValues2D: void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.DefaultKeyedValues: void <init>()>";
"<TimeSeries: void update(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>" -> "<org.jfree.data.general.SeriesException: void <init>(java.lang.String)>";
"<annotations.XYBoxAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<time.Month: org.jfree.data.time.Month parseMonth(java.lang.String)>" -> "<org.jfree.data.time.SerialDate: int stringToMonthCode(java.lang.String)>";
"<plot.dial.StandardDialFrame: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCodeForPaint(java.awt.Paint)>";
"<xy.XYAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<axis.SubCategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<DialValueIndicator: void setValueAnchor(org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)>" -> "<org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator: void <init>()>";
"<ItemHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>" -> "<org.jfree.data.xml.KeyHandler: void <init>(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)>";
"<DateAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,float,float)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)>";
"<MeanAndStandardDeviation: void <init>(double,double)>" -> "<org.jfree.data.statistics.MeanAndStandardDeviation: void <init>(java.lang.Number,java.lang.Number)>";
"<time.Quarter: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Quarter: void <init>(java.util.Date,java.util.TimeZone)>";
"<XYPointerAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<plot.dial.StandardDialFrame: void setForegroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<SymbolicXYItemLabelGenerator: java.lang.String generateToolTip(org.jfree.data.xy.XYDataset,int,int)>" -> "<org.jfree.chart.labels.SymbolicXYItemLabelGenerator: double round(double,int)>";
"<plot.dial.StandardDialScale: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<xy.NormalizedMatrixSeries: void zeroAll()>" -> "<org.jfree.data.xy.MatrixSeries: void zeroAll()>";
"<xy.MatrixSeries: void <init>(java.lang.String,int,int)>" -> "<org.jfree.data.general.Series: void <init>(java.lang.Comparable)>";
"<MultiplePiePlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<axis.LogarithmicAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<KeyHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>" -> "<org.jfree.data.xml.ValueHandler: void <init>(org.jfree.data.xml.RootHandler,org.jfree.data.xml.ItemHandler)>";
"<NumberAxis3D: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<renderer.xy.StackedXYBarRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer$XYBarRendererState: void <init>(org.jfree.chart.renderer.xy.XYBarRenderer,org.jfree.chart.plot.PlotRenderingInfo)>";
"<plot.PiePlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<axis.SymbolAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<Series: void fireSeriesChanged()>" -> "<org.jfree.data.general.SeriesChangeEvent: void <init>(java.lang.Object)>";
"<axis.SymbolAxis: java.util.List refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<XYLineAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: boolean equals(java.lang.Object)>";
"<Plot: void drawNoDataMessage(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)>";
"<DefaultStatisticalCategoryDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<DefaultIntervalXYDataset: void addSeries(java.lang.Comparable,double[][])>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<time.SerialDate: org.jfree.data.time.SerialDate addMonths(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int,int,int)>";
"<CombinedDomainXYPlot: void add(org.jfree.chart.plot.XYPlot,int)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<general.AbstractDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Class class$(java.lang.String)>";
"<Title: void addChangeListener(org.jfree.chart.event.TitleChangeListener)>" -> "<org.jfree.chart.title.Title: java.lang.Class class$(java.lang.String)>";
"<axis.SymbolAxis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.CombinedDomainCategoryPlot: void add(org.jfree.chart.plot.CategoryPlot,int)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<XYBarDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<FastScatterPlot: void <init>()>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<plot.PiePlot: void drawSimpleLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(org.jfree.chart.util.UnitType,double,double,double,double)>";
"<PlotRenderingInfo: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<axis.Axis: org.jfree.chart.axis.AxisState drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<xy.AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>";
"<axis.NumberAxis: void autoAdjustRange()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<AxisLocation: void <clinit>()>" -> "<org.jfree.chart.axis.AxisLocation: void <init>(java.lang.String)>";
"<xml.DatasetReader: org.jfree.data.category.CategoryDataset readCategoryDatasetFromXML(java.io.File)>" -> "<org.jfree.data.xml.DatasetReader: org.jfree.data.category.CategoryDataset readCategoryDatasetFromXML(java.io.InputStream)>";
"<renderer.WaferMapRenderer: org.jfree.chart.LegendItemCollection getLegendCollection()>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<renderer.category.AbstractCategoryItemRenderer: void setSeriesToolTipGenerator(int,org.jfree.chart.labels.CategoryToolTipGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DialCap: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<plot.Marker: void setOutlinePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<CategoryPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<category.AbstractCategoryItemRenderer: void drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.plot.CategoryMarker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<plot.MeterPlot: void drawValueLabel(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<CategoryDatasetHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>" -> "<org.jfree.data.xml.CategorySeriesHandler: void <init>(org.jfree.data.xml.RootHandler)>";
"<text.TextBox: void <init>(org.jfree.chart.text.TextBlock)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<dial.StandardDialScale: void setTickLabelFormatter(java.text.NumberFormat)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<annotations.XYLineAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createLineRegion(java.awt.geom.Line2D,float)>";
"<CombinedDataset: int getChildPosition(org.jfree.data.general.Dataset)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<ChartPanel: void mouseMoved(java.awt.event.MouseEvent)>" -> "<org.jfree.chart.ChartPanel: void drawVerticalAxisTrace(java.awt.Graphics2D,int)>";
"<block.ColorBlock: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<axis.ValueAxis: java.lang.Object clone()>" -> "<org.jfree.chart.axis.Axis: java.lang.Object clone()>";
"<CombinedRangeCategoryPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.CategoryPlot: boolean equals(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWaferMapChart(java.lang.String,org.jfree.data.general.WaferMapDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<TextBlock: org.jfree.chart.util.Size2D calculateDimensions(java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<CategoryAxis: void setCategoryMargin(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<plot.XYPlot: boolean render(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>";
"<plot.CombinedRangeXYPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.category.AbstractCategoryItemRenderer: void setSeriesURLGenerator(int,org.jfree.chart.urls.CategoryURLGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<annotations.XYPolygonAnnotation: void <init>(double[],java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.annotations.XYPolygonAnnotation: void <init>(double[],java.awt.Stroke,java.awt.Paint,java.awt.Paint)>";
"<DefaultPlotEditor: void updatePlotProperties(org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.plot.CategoryPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<IntervalMarker: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Marker: boolean equals(java.lang.Object)>";
"<statistics.Statistics: double[] getLinearFit(java.lang.Number[],java.lang.Number[])>" -> "<org.jfree.data.statistics.Statistics: double getSlope(java.lang.Number[],java.lang.Number[])>";
"<renderer.xy.YIntervalRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<category.LevelRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>";
"<plot.CombinedDomainXYPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.util.RectangleEdge: double coordinate(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>";
"<block.BlockContainer: void <init>()>" -> "<org.jfree.chart.block.BlockContainer: void <init>(org.jfree.chart.block.Arrangement)>";
"<axis.ValueAxis: void setDefaultAutoRange(org.jfree.data.Range)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<time.SerialDate: org.jfree.data.time.SerialDate addDays(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int)>";
"<StandardCategoryToolTipGenerator: void <init>()>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<XYIntervalSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<general.DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<plot.dial.DialValueIndicator: void setTemplateValue(java.lang.Number)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<plot.WaferMapPlot: void <init>(org.jfree.data.general.WaferMapDataset,org.jfree.chart.renderer.WaferMapRenderer)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<GroupedStackedBarRenderer: void <init>()>" -> "<org.jfree.data.KeyToGroupMap: void <init>()>";
"<renderer.category.CategoryStepRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<xml.CategoryDatasetHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>" -> "<org.jfree.data.xml.CategorySeriesHandler: void <init>(org.jfree.data.xml.RootHandler)>";
"<CategoryPlot: java.lang.Object clone()>" -> "<org.jfree.chart.axis.ValueAxis: java.lang.Object clone()>";
"<Plot: java.lang.Object clone()>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<ValueAxis: void <init>(java.lang.String,org.jfree.chart.axis.TickUnitSource)>" -> "<org.jfree.chart.axis.Axis: void <init>(java.lang.String)>";
"<LabelBlock: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<time.Millisecond: void <init>(int,org.jfree.data.time.Second)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<renderer.xy.XYAreaRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<plot.XYPlot: java.util.Map drawAxes(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisCollection: void <init>()>";
"<time.ohlc.OHLCSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<XYAreaRenderer2: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer2: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<StackedBarRenderer3D: void setIgnoreZeroValues(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<dial.DialBackground: void <init>()>" -> "<org.jfree.chart.plot.dial.DialBackground: void <init>(java.awt.Paint)>";
"<dial.StandardDialRange: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<BarRenderer3D: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.CategoryItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,int,org.jfree.chart.plot.PlotRenderingInfo)>";
"<entity.XYAnnotationEntity: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.entity.ChartEntity: boolean equals(java.lang.Object)>";
"<XYStepAreaRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.XYStepAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<plot.PiePlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<util.ShapeList: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.AbstractObjectList: boolean equals(java.lang.Object)>";
"<axis.CategoryAxis: void setCategoryLabelPositionOffset(int)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,java.util.Locale,boolean,boolean)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<time.Hour: void <init>()>" -> "<org.jfree.data.time.Hour: void <init>(java.util.Date)>";
"<ChartFactory: org.jfree.chart.JFreeChart createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,org.jfree.chart.axis.Timeline,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<CombinedRangeXYPlot: void <init>()>" -> "<org.jfree.chart.axis.NumberAxis: void <init>()>";
"<DialPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.plot.dial.ArcDialFrame: void <init>()>";
"<QuarterDateFormat: void <init>(java.util.TimeZone)>" -> "<org.jfree.chart.axis.QuarterDateFormat: void <init>(java.util.TimeZone,java.lang.String[])>";
"<Title: int hashCode()>" -> "<org.jfree.chart.util.ObjectUtilities: int hashCode(java.lang.Object)>";
"<StandardXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<PiePlot: void drawLabels(java.awt.Graphics2D,java.util.List,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.data.DefaultKeyedValues: void <init>()>";
"<JThermometer: void addSubtitle(java.lang.String)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String)>";
"<plot.dial.StandardDialRange: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<ModuloAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.ModuloAxis: double trans(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>";
"<time.TimeTableXYDataset: void setDomainIsPointsInTime(boolean)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<AbstractRenderer: void <init>()>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)>";
"<axis.LogAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<plot.SpiderWebPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<xy.AbstractXYItemRenderer: java.awt.geom.Point2D calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<DefaultDrawingSupplier: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<XYIntervalSeries: void add(double,double,double,double,double,double)>" -> "<org.jfree.data.xy.XYIntervalDataItem: void <init>(double,double,double,double,double,double)>";
"<renderer.xy.XYAreaRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer$XYAreaRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<title.LegendTitle: void fetchLegendItems()>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<axis.CyclicNumberAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<time.Hour: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Hour: void <init>(java.util.Date,java.util.TimeZone)>";
"<CombinedDomainCategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotState: void <init>()>";
"<plot.SpiderWebPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<plot.XYPlot: org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardPieURLGenerator: void <init>()>";
"<BasicProjectInfo: void setInfo(java.lang.String)>" -> "<org.jfree.chart.ui.Library: void setInfo(java.lang.String)>";
"<TimePeriodValue: void <init>(org.jfree.data.time.TimePeriod,double)>" -> "<org.jfree.data.time.TimePeriodValue: void <init>(org.jfree.data.time.TimePeriod,java.lang.Number)>";
"<entity.TickLabelEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<ChartPanel: void <init>(org.jfree.chart.JFreeChart,boolean,boolean,boolean,boolean,boolean)>" -> "<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart,int,int,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean)>";
"<CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions replaceRightPosition(org.jfree.chart.axis.CategoryLabelPositions,org.jfree.chart.axis.CategoryLabelPosition)>" -> "<org.jfree.chart.axis.CategoryLabelPositions: void <init>(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)>";
"<AbstractCategoryItemRenderer: void removeAnnotations()>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.XYBarDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<VectorSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>" -> "<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>";
"<StandardPieSectionLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractPieItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<MultiplePiePlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.plot.MultiplePiePlot: void prefetchSectionPaints()>";
"<ChartUtilities: void writeScaledChartAsPNG(java.io.OutputStream,org.jfree.chart.JFreeChart,int,int,int,int)>" -> "<org.jfree.chart.ChartUtilities: byte[] encodeAsPNG(java.awt.image.BufferedImage)>";
"<PolarChartPanel: void setChart(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.ChartPanel: void setChart(org.jfree.chart.JFreeChart)>";
"<DateAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<axis.CyclicNumberAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<time.Day: void <init>(org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<renderer.category.CategoryItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.RendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<category.AbstractCategoryItemRenderer: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<plot.CombinedRangeCategoryPlot: void add(org.jfree.chart.plot.CategoryPlot,int)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<plot.XYPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>";
"<Quarter: void <init>(int,org.jfree.data.time.Year)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>()>";
"<ArcDialFrame: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<encoders.EncoderUtil: byte[] encode(java.awt.image.BufferedImage,java.lang.String)>" -> "<org.jfree.chart.encoders.ImageEncoderFactory: org.jfree.chart.encoders.ImageEncoder newInstance(java.lang.String)>";
"<plot.dial.DialValueIndicator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<DatasetUtilities: org.jfree.data.xy.XYDataset sampleFunction2D(org.jfree.data.function.Function2D,double,double,int,java.lang.Comparable)>" -> "<org.jfree.data.xy.XYSeries: void <init>(java.lang.Comparable)>";
"<PointerNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<axis.NumberTick: void <init>(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>" -> "<org.jfree.chart.axis.ValueTick: void <init>(org.jfree.chart.axis.TickType,double,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<xy.XYSeries: void add(java.lang.Number,java.lang.Number,boolean)>" -> "<org.jfree.data.xy.XYDataItem: void <init>(java.lang.Number,java.lang.Number)>";
"<TextTitle: void setToolTipText(java.lang.String)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<AbstractDialLayer: void setVisible(boolean)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<AbstractBlock: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<general.CombinedDataset: java.lang.Number getEndY(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<imagemap.ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>";
"<DateTitle: void <init>(int,java.util.Locale,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<renderer.category.ScatterRenderer: void setBaseShapesFilled(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<title.PaintScaleLegend: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<PaintScaleLegend: void setScale(org.jfree.chart.renderer.PaintScale)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<util.BooleanList: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.AbstractObjectList: boolean equals(java.lang.Object)>";
"<xy.XYErrorRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>";
"<renderer.xy.XYBoxAndWhiskerRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.CombinedDomainCategoryPlot: void <init>(org.jfree.chart.axis.CategoryAxis)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<axis.DateAxis: void setRange(java.util.Date,java.util.Date)>" -> "<org.jfree.data.time.DateRange: void <init>(java.util.Date,java.util.Date)>";
"<util.AbstractObjectList: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<XYPlot: org.jfree.chart.axis.AxisSpace calculateAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<RectangleInsets: void <init>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<axis.CyclicNumberAxis: java.util.List refreshVerticalTicks(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.CyclicNumberAxis$CycleBoundTick: void <init>(boolean,java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<time.Year: org.jfree.data.time.Year parseYear(java.lang.String)>" -> "<org.jfree.data.time.TimePeriodFormatException: void <init>(java.lang.String)>";
"<plot.dial.DialCap: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<ComparableObjectSeries: void updateByIndex(int,java.lang.Object)>" -> "<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>";
"<PeriodAxis: void setRange(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)>";
"<StatisticalLineAndShapeRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<plot.XYPlot: org.jfree.chart.axis.AxisSpace calculateDomainAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<IntervalXYDelegate: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.CategoryAxis: void <init>(java.lang.String)>";
"<plot.CategoryPlot: void rendererChanged(org.jfree.chart.event.RendererChangeEvent)>" -> "<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>";
"<PieLabelLinkStyle: void <clinit>()>" -> "<org.jfree.chart.plot.PieLabelLinkStyle: void <init>(java.lang.String)>";
"<BoxAndWhiskerRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<Statistics: double calculateMean(java.util.Collection)>" -> "<org.jfree.data.statistics.Statistics: double calculateMean(java.util.Collection,boolean)>";
"<NumberAxis: java.util.List refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<time.FixedMillisecond: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.FixedMillisecond: void <init>(long)>";
"<LegendItem: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.text.AttributedString readAttributedString(java.io.ObjectInputStream)>";
"<renderer.category.MinMaxCategoryRenderer: void setMinIcon(javax.swing.Icon)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.DateAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<renderer.xy.VectorRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<DefaultIntervalCategoryDataset: boolean equals(java.lang.Object)>" -> "<org.jfree.data.category.DefaultIntervalCategoryDataset: boolean equal(java.lang.Number[][],java.lang.Number[][])>";
"<ChartFactory: org.jfree.chart.JFreeChart createAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.CategoryPlot: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.category.CategoryItemRenderer)>";
"<TimePeriodValues: void add(org.jfree.data.time.TimePeriod,double)>" -> "<org.jfree.data.time.TimePeriodValue: void <init>(org.jfree.data.time.TimePeriod,double)>";
"<LogAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<HistogramType: void <clinit>()>" -> "<org.jfree.data.statistics.HistogramType: void <init>(java.lang.String)>";
"<xml.CategorySeriesHandler: void <init>(org.jfree.data.xml.RootHandler)>" -> "<org.jfree.data.DefaultKeyedValues: void <init>()>";
"<dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<renderer.xy.StandardXYItemRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<plot.PiePlot: void drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.TextBox: void <init>(org.jfree.chart.text.TextBlock)>";
"<statistics.SimpleHistogramDataset: void setAdjustForBinSize(boolean)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<renderer.xy.CandlestickRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYItemRendererState: void <init>(org.jfree.chart.plot.PlotRenderingInfo)>";
"<PlotUtilities: boolean isEmptyOrNull(org.jfree.chart.plot.XYPlot)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.xy.XYDataset)>";
"<AbstractCategoryItemRenderer: void setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.CombinedDomainCategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.CategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>";
"<annotations.XYPolygonAnnotation: void <init>(double[])>" -> "<org.jfree.chart.annotations.XYPolygonAnnotation: void <init>(double[],java.awt.Stroke,java.awt.Paint)>";
"<xy.XYAreaRenderer: void setOutline(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<PeriodAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isLeftOrRight(org.jfree.chart.util.RectangleEdge)>";
"<Millisecond: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Millisecond: void <init>(int,org.jfree.data.time.Second)>";
"<xy.XYIntervalSeries: void add(double,double,double,double,double,double)>" -> "<org.jfree.data.xy.XYIntervalDataItem: void <init>(double,double,double,double,double,double)>";
"<xy.YIntervalRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<plot.CombinedDomainXYPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>" -> "<org.jfree.chart.plot.XYPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<block.BlockBorder: void <init>(double,double,double,double)>" -> "<org.jfree.chart.block.BlockBorder: void <init>(org.jfree.chart.util.RectangleInsets,java.awt.Paint)>";
"<YIntervalRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<StandardDialRange: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<RendererUtilities: int[] findLiveItems(org.jfree.data.xy.XYDataset,int,double,double)>" -> "<org.jfree.chart.renderer.RendererUtilities: int findLiveItemsLowerBound(org.jfree.data.xy.XYDataset,int,double,double)>";
"<text.TextBox: void draw(java.awt.Graphics2D,float,float,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Rectangle2D createRectangle(org.jfree.chart.util.Size2D,double,double,org.jfree.chart.util.RectangleAnchor)>";
"<category.DefaultCategoryDataset: void <init>()>" -> "<org.jfree.data.DefaultKeyedValues2D: void <init>()>";
"<CombinedRangeCategoryPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<plot.RingPlot: void drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(org.jfree.chart.util.UnitType,double,double,double,double)>";
"<category.LayeredBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<needle.WindNeedle: void drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)>" -> "<org.jfree.chart.needle.ArrowNeedle: void drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)>";
"<renderer.category.AbstractCategoryItemRenderer: void setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator,boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.ThermometerPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<CompositeTitle: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<renderer.xy.XYAreaRenderer2: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<SegmentedTimeline: org.jfree.chart.axis.SegmentedTimeline newFifteenMinuteTimeline()>" -> "<org.jfree.chart.axis.SegmentedTimeline: long firstMondayAfter1900()>";
"<gantt.Task: void <init>(java.lang.String,java.util.Date,java.util.Date)>" -> "<org.jfree.data.gantt.Task: void <init>(java.lang.String,org.jfree.data.time.TimePeriod)>";
"<axis.SubCategoryAxis: void addSubCategory(java.lang.Comparable)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<axis.LogAxis: void setMinorTickCount(int)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<RingPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<time.ohlc.OHLCSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractXYDataset: java.lang.Object clone()>";
"<CompositeTitle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.title.Title: boolean equals(java.lang.Object)>";
"<labels.IntervalCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.StandardCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<axis.ValueAxis: void setDownArrow(java.awt.Shape)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<StrokeMap: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.xy.StackedXYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<axis.TickUnits: org.jfree.chart.axis.TickUnit getCeilingTickUnit(double)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<editor.DefaultPlotEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultPlotEditor: void attemptBackgroundPaintSelection()>";
"<CategoryTick: void <init>(java.lang.Comparable,org.jfree.chart.text.TextBlock,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double)>" -> "<org.jfree.chart.axis.Tick: void <init>(java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<urls.StandardPieURLGenerator: void <init>()>" -> "<org.jfree.chart.urls.StandardPieURLGenerator: void <init>(java.lang.String)>";
"<XYSplineAndShapeRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>";
"<PolarChartPanel: javax.swing.JPopupMenu createPopupMenu(boolean,boolean,boolean,boolean)>" -> "<org.jfree.chart.PolarChartPanel: int getPopupMenuItem(javax.swing.JPopupMenu,java.lang.String)>";
"<axis.Axis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<renderer.xy.XYBoxAndWhiskerRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<annotations.XYShapeAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<editor.DefaultNumberAxisEditor: void <init>(org.jfree.chart.axis.NumberAxis)>" -> "<org.jfree.chart.ui.LCBLayout: void <init>(int)>";
"<editor.DefaultTitleEditor: void <init>(org.jfree.chart.title.Title)>" -> "<org.jfree.chart.ui.LCBLayout: void <init>(int)>";
"<PieLabelDistributor: void distributeLabels(double,double)>" -> "<org.jfree.chart.plot.PieLabelDistributor: boolean isOverlap()>";
"<time.ohlc.OHLCItem: void <init>(org.jfree.data.time.RegularTimePeriod,double,double,double,double)>" -> "<org.jfree.data.time.ohlc.OHLC: void <init>(double,double,double,double)>";
"<ComparableObjectItem: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<DynamicTimeSeriesCollection: void <init>(int,int,org.jfree.data.time.RegularTimePeriod,java.util.TimeZone)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<axis.CategoryAxis: void setCategoryMargin(double)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ChartFactory: org.jfree.chart.JFreeChart createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<AbstractObjectList: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.AbstractObjectList: java.lang.Object get(int)>";
"<CombinedDomainXYPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItemCollection: void <init>()>";
"<CategoryLabelPositions: org.jfree.chart.axis.CategoryLabelPositions createUpRotationLabelPositions(double)>" -> "<org.jfree.chart.axis.CategoryLabelPosition: void <init>(org.jfree.chart.util.RectangleAnchor,org.jfree.chart.text.TextBlockAnchor,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.axis.CategoryLabelWidthType,float)>";
"<CyclicNumberAxis: void setRange(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.chart.axis.NumberAxis: void setRange(org.jfree.data.Range,boolean,boolean)>";
"<ChartFactory: org.jfree.chart.JFreeChart createMultiplePieChart(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<general.CombinedDataset: java.lang.Number getEndX(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<block.BlockBorder: void <init>(double,double,double,double,java.awt.Paint)>" -> "<org.jfree.chart.block.BlockBorder: void <init>(org.jfree.chart.util.RectangleInsets,java.awt.Paint)>";
"<LogAxis: org.jfree.chart.axis.TickUnitSource createLogTickUnits(java.util.Locale)>" -> "<org.jfree.chart.axis.TickUnits: void <init>()>";
"<plot.ThermometerPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<axis.ValueAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.Axis: boolean equals(java.lang.Object)>";
"<time.TimeSeries: int getIndex(org.jfree.data.time.RegularTimePeriod)>" -> "<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,double)>";
"<renderer.xy.XYBubbleRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<PeriodAxis: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<DefaultTitleEditor: void attemptModifyShowTitle()>" -> "<org.jfree.chart.editor.DefaultTitleEditor: void enableOrDisableControls()>";
"<dial.ArcDialFrame: void <init>(double,double)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<ChartUtilities: void saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int)>" -> "<org.jfree.chart.ChartUtilities: void saveChartAsPNG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>";
"<ShapeList: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.AbstractObjectList: boolean equals(java.lang.Object)>";
"<xy.StackedXYAreaRenderer2: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: double[] averageStackValues(double[],double[])>";
"<axis.CategoryAxis: void addCategoryLabelToolTip(java.lang.Comparable,java.lang.String)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<CombinedDataset: java.lang.Number getStartY(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<ValueAxis: void <clinit>()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<plot.dial.ArcDialFrame: java.awt.Shape getWindow(java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<WaterfallBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<DefaultBoxAndWhiskerCategoryDataset: void remove(java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset: void updateBounds()>";
"<DatasetUtilities: org.jfree.data.Range findStackedRangeBounds(org.jfree.data.xy.TableXYDataset,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<editor.DefaultChartEditor: void <init>(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.ui.PaintSample: void <init>(java.awt.Paint)>";
"<SpiderWebPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.SpiderWebPlot: void calculateMaxValue(int,int)>";
"<ThermometerPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createIntegerTickUnits()>";
"<labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<labels.BoxAndWhiskerXYToolTipGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.StandardXYToolTipGenerator: boolean equals(java.lang.Object)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<PolarPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.plot.Plot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>";
"<xy.XYBlockRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<plot.MeterPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<SegmentedTimeline: org.jfree.chart.axis.SegmentedTimeline newFifteenMinuteTimeline()>" -> "<org.jfree.chart.axis.SegmentedTimeline: void <init>(long,int,int)>";
"<DialValueIndicator: void setTemplateValue(java.lang.Number)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<YIntervalSeriesCollection: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<renderer.WaferMapRenderer: void <init>(java.lang.Integer,java.lang.Integer)>" -> "<org.jfree.chart.renderer.WaferMapRenderer: boolean isMethodValid(int)>";
"<AbstractCategoryItemRenderer: java.awt.geom.Point2D calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleInsets,org.jfree.chart.util.LengthAdjustmentType,org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.TableXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<plot.MultiplePiePlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.category.CategoryToPieDataset: void <init>(org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,int)>";
"<XYBlockRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: java.lang.Object clone()>";
"<TimeSeriesTableModel: void setValueAt(java.lang.Object,int,int)>" -> "<org.jfree.data.time.TimeSeries: void update(int,java.lang.Number)>";
"<axis.NumberAxis3D: org.jfree.chart.axis.AxisState draw(java.awt.Graphics2D,double,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.axis.AxisState: void <init>(double)>";
"<BarRenderer: void setMinimumBarLength(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<category.AbstractCategoryItemRenderer: void addAnnotation(org.jfree.chart.annotations.CategoryAnnotation,org.jfree.chart.util.Layer)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.XYErrorRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<annotations.XYImageAnnotation: void <init>(double,double,java.awt.Image)>" -> "<org.jfree.chart.annotations.XYImageAnnotation: void <init>(double,double,java.awt.Image,org.jfree.chart.util.RectangleAnchor)>";
"<entity.XYAnnotationEntity: void <init>(java.awt.Shape,int,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.entity.ChartEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<axis.Axis: java.awt.geom.Rectangle2D getLabelEnclosure(java.awt.Graphics2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<plot.CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.ArrowNeedle: void <init>(boolean)>";
"<LineRenderer3D: void setYOffset(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>";
"<text.TextAnchor: void <clinit>()>" -> "<org.jfree.chart.text.TextAnchor: void <init>(java.lang.String)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>()>";
"<title.DateTitle: void <init>(int,java.util.Locale,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font,java.awt.Paint,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<renderer.category.StatisticalLineAndShapeRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<dial.DialBackground: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.category.StackedBarRenderer3D: void <init>(double,double,boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: void <init>(double,double)>";
"<title.LegendGraphic: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<time.RegularTimePeriod: org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: java.lang.Class class$(java.lang.String)>";
"<xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<dial.StandardDialScale: void setLowerBound(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<renderer.xy.AbstractXYItemRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<xy.XYSplineAndShapeRenderer: void drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer$ControlPoint: void <init>(org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer,float,float)>";
"<CategoryLabelWidthType: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryLabelWidthType: void <init>(java.lang.String)>";
"<renderer.category.LineAndShapeRenderer: void setItemMargin(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<StatisticalBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer: boolean equals(java.lang.Object)>";
"<xy.YIntervalRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<plot.dial.DialCap: void <init>()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: void <init>()>";
"<axis.DateAxis: org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits(java.util.TimeZone)>" -> "<org.jfree.chart.axis.TickUnits: void <init>()>";
"<renderer.xy.AbstractXYItemRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.chart.plot.PlotOrientation,org.jfree.data.xy.XYDataset,int,int,double,double,boolean)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<plot.ValueMarker: void <init>(double,java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>" -> "<org.jfree.chart.plot.Marker: void <init>(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<general.CombinedDataset: java.lang.Number getY(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<XYPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>";
"<util.HexNumberFormat: void <init>()>" -> "<org.jfree.chart.util.HexNumberFormat: void <init>(int)>";
"<axis.CategoryAxis: double calculateTextBlockWidth(org.jfree.chart.text.TextBlock,org.jfree.chart.axis.CategoryLabelPosition,java.awt.Graphics2D)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape rotateShape(java.awt.Shape,double,float,float)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>()>";
"<SerialDate: org.jfree.data.time.SerialDate createInstance(int,int,int)>" -> "<org.jfree.data.time.SpreadsheetDate: void <init>(int,int,int)>";
"<category.BarRenderer: void setIncludeBaseInRange(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<MeterInterval: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<renderer.category.WaterfallBarRenderer: void <init>(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>(org.jfree.chart.util.GradientPaintTransformType)>";
"<ChartFactory: org.jfree.chart.JFreeChart createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,org.jfree.chart.axis.Timeline,boolean)>" -> "<org.jfree.chart.labels.HighLowItemLabelGenerator: void <init>()>";
"<dial.StandardDialScale: void setMajorTickPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<block.BlockBorder: void <clinit>()>" -> "<org.jfree.chart.block.BlockBorder: void <init>(org.jfree.chart.util.RectangleInsets,java.awt.Paint)>";
"<PolarChartPanel: void <init>(org.jfree.chart.JFreeChart,boolean)>" -> "<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart,boolean)>";
"<StackedBarRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: boolean equals(java.lang.Object)>";
"<DatasetUtilities: org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.String,java.lang.String,double[][])>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<PolarPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object)>";
"<YIntervalSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>" -> "<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>";
"<dial.DialPlot: int hashCode()>" -> "<org.jfree.chart.util.ObjectUtilities: int hashCode(java.lang.Object)>";
"<CompositeTitle: void <init>(org.jfree.chart.block.BlockContainer)>" -> "<org.jfree.chart.title.Title: void <init>()>";
"<general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<Title: void setNotify(boolean)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: boolean isSerializable(java.lang.Class)>";
"<plot.CombinedDomainXYPlot: java.lang.Object clone()>" -> "<org.jfree.chart.plot.XYPlot: java.lang.Object clone()>";
"<AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<StandardXYZToolTipGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.xy.XYStepRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<renderer.category.BarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.xy.HighLowRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<plot.dial.ArcDialFrame: void setInnerRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYSeries: org.jfree.data.xy.XYSeries createCopy(int,int)>" -> "<org.jfree.data.xy.XYDataItem: java.lang.Object clone()>";
"<util.ObjectUtilities: boolean isJDK14()>" -> "<org.jfree.chart.util.ArrayUtilities: int compareVersionArrays(java.lang.Comparable[],java.lang.Comparable[])>";
"<VectorSeries: void add(double,double,double,double)>" -> "<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>";
"<SerialDate: java.lang.String monthCodeToString(int,boolean)>" -> "<org.jfree.data.time.SerialDate: boolean isValidMonthCode(int)>";
"<TimeTableXYDataset: void setXPosition(org.jfree.data.time.TimePeriodAnchor)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<CategoryPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<renderer.xy.HighLowRenderer: void setOpenTickPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYTextAnnotation: void <init>(java.lang.String,double,double)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
"<CombinedDomainXYPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>" -> "<org.jfree.chart.plot.XYPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<DefaultTableXYDataset: void <init>(boolean)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<XYTitleAnnotationDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.experimental.chart.annotations.XYTitleAnnotation: void <init>(double,double,org.jfree.chart.title.Title,org.jfree.chart.util.RectangleAnchor)>";
"<JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>" -> "<org.jfree.chart.title.LegendTitle: void <init>(org.jfree.chart.LegendItemSource)>";
"<category.StatisticalLineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<DateAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<AbstractBlock: org.jfree.data.Range trimToContentHeight(org.jfree.data.Range)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<PeriodAxis: void <init>(java.lang.String)>" -> "<org.jfree.data.time.Day: void <init>()>";
"<axis.CyclicNumberAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.NumberAxis: boolean equals(java.lang.Object)>";
"<block.AbstractBlock: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<time.TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)>" -> "<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>";
"<TimeSeriesChartDemo1: org.jfree.data.xy.XYDataset createDataset()>" -> "<org.jfree.data.time.TimeSeriesCollection: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<renderer.xy.HighLowRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<JDBCPieDataset: void <init>(java.sql.Connection)>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<plot.dial.StandardDialRange: void setOuterRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYPointerAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.XYTextAnnotation: boolean equals(java.lang.Object)>";
"<renderer.xy.DeviationRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<Axis: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.Shape calculateRotatedStringBounds(java.lang.String,java.awt.Graphics2D,float,float,double,float,float)>";
"<annotations.TextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<StandardDialScale: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D rectangleByRadius(java.awt.geom.Rectangle2D,double,double)>";
"<BarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<axis.PeriodAxisLabelInfo: void <clinit>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.NumberFormat)>";
"<CategoryPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<XYSplineAndShapeRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>()>";
"<labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.DateFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<general.WaferMapDataset: void <init>(int,int,java.lang.Number)>" -> "<org.jfree.data.DefaultKeyedValues2D: void <init>()>";
"<axis.LogarithmicAxis: java.util.List refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<annotations.XYPolygonAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<axis.SubCategoryAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<RectangleInsets: void <clinit>()>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(org.jfree.chart.util.UnitType,double,double,double,double)>";
"<renderer.xy.CandlestickRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<axis.ExtendedCategoryAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.CategoryAxis: boolean equals(java.lang.Object)>";
"<XYDotRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<WaferMapDataset: void <init>(int,int,java.lang.Number)>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<category.DefaultIntervalCategoryDataset: void <init>(double[][],double[][])>" -> "<org.jfree.data.DataUtilities: java.lang.Number[][] createNumberArray2D(double[][])>";
"<plot.dial.AbstractDialLayer: void removeChangeListener(org.jfree.chart.plot.dial.DialLayerChangeListener)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Class class$(java.lang.String)>";
"<xy.XYLineAndShapeRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>(boolean,boolean)>";
"<TimeSeriesChartDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.chart.demo.TimeSeriesChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.xy.XYDataset)>";
"<ItemLabelPosition: void <init>()>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<DefaultChartEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultChartEditor: void attemptModifyBackgroundPaint()>";
"<statistics.DefaultStatisticalCategoryDataset: void add(java.lang.Number,java.lang.Number,java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.statistics.MeanAndStandardDeviation: void <init>(java.lang.Number,java.lang.Number)>";
"<ChartFactory: org.jfree.chart.JFreeChart createTimeSeriesChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.plot.XYPlot: void setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<WindNeedle: void drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)>" -> "<org.jfree.chart.needle.ArrowNeedle: void drawNeedle(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,double)>";
"<Hour: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.Day: void <init>(java.util.Date,java.util.TimeZone)>";
"<renderer.AbstractRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<renderer.xy.XYErrorRenderer: void setErrorPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.dial.AbstractDialLayer: void notifyListeners(org.jfree.chart.plot.dial.DialLayerChangeEvent)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Class class$(java.lang.String)>";
"<plot.DefaultDrawingSupplier: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<axis.PeriodAxis: void drawTickMarksHorizontal(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.data.time.RegularTimePeriod: org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)>";
"<axis.NumberAxis: void setAutoRangeIncludesZero(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<plot.CombinedRangeXYPlot: void <init>(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<renderer.category.BarRenderer3D: void <init>(double,double)>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)>";
"<plot.CombinedDomainCategoryPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<title.ImageTitle: void <init>(java.awt.Image,int,int,org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.title.Title: void <init>(org.jfree.chart.util.RectangleEdge,org.jfree.chart.util.HorizontalAlignment,org.jfree.chart.util.VerticalAlignment,org.jfree.chart.util.RectangleInsets)>";
"<DialCap: void setFillPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<CombinedDomainXYPlot: void <init>(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.chart.plot.XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>";
"<CombinedDataset: java.lang.Number getX(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<PiePlot: void drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,org.jfree.chart.text.TextMeasurer)>";
"<time.Day: void <init>()>" -> "<org.jfree.data.time.Day: void <init>(java.util.Date)>";
"<ChartChangeEvent: void <init>(java.lang.Object,org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.event.ChartChangeEvent: void <init>(java.lang.Object,org.jfree.chart.JFreeChart,org.jfree.chart.event.ChartChangeEventType)>";
"<LogFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>" -> "<org.jfree.chart.util.LogFormat: double calculateLog(double)>";
"<Day: org.jfree.data.time.Day parseDay(java.lang.String)>" -> "<org.jfree.data.time.Day: void <init>(java.util.Date)>";
"<SerialDate: java.lang.String[] getMonths()>" -> "<org.jfree.data.time.SerialDate: java.lang.String[] getMonths(boolean)>";
"<category.BoxAndWhiskerRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createStandardTickUnits()>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<DateAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.data.time.Year: void <init>(java.util.Date,java.util.TimeZone)>";
"<statistics.DefaultMultiValueCategoryDataset: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<annotations.XYLineAnnotation: void <init>(double,double,double,double,java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
"<TimeSeriesCollection: void <init>(org.jfree.data.time.TimeSeries,java.util.TimeZone)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<entity.ChartEntity: java.lang.String getShapeCoords()>" -> "<org.jfree.chart.entity.ChartEntity: java.lang.String getPolyCoords(java.awt.Shape)>";
"<PiePlot: void drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.plot.PieLabelRecord: void <init>(java.lang.Comparable,double,double,org.jfree.chart.text.TextBox,double,double,double)>";
"<plot.dial.StandardDialScale: void setMajorTickPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<TextUtilities: org.jfree.chart.text.TextBlock createTextBlock(java.lang.String,java.awt.Font,java.awt.Paint,float,int,org.jfree.chart.text.TextMeasurer)>" -> "<org.jfree.chart.text.TextFragment: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<ModuloAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>";
"<AbstractRenderer: void addChangeListener(org.jfree.chart.event.RendererChangeListener)>" -> "<org.jfree.chart.renderer.AbstractRenderer: java.lang.Class class$(java.lang.String)>";
"<time.Week: void <init>(java.util.Date,java.util.TimeZone,java.util.Locale)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<plot.dial.DialValueIndicator: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<XYDifferenceRenderer: void drawItemPass1(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<TextLine: org.jfree.chart.util.Size2D calculateDimensions(java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<StrokeMap: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<time.DateRange: void <init>()>" -> "<org.jfree.data.time.DateRange: void <init>(java.util.Date,java.util.Date)>";
"<LegendItemBlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.entity.StandardEntityCollection: void <init>()>";
"<LegendTitle: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<EmptyBlock: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<renderer.xy.XYBlockRenderer: void setBlockAnchor(org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>";
"<AbstractDataset: void fireDatasetChanged()>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart3D(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,java.util.Locale)>" -> "<org.jfree.chart.plot.PiePlot3D: void <init>(org.jfree.data.general.PieDataset)>";
"<DefaultDrawingSupplier: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.DefaultDrawingSupplier: boolean equalShapes(java.awt.Shape[],java.awt.Shape[])>";
"<CategoryAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisState: void <init>()>";
"<plot.Marker: void setAlpha(float)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBarChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardCategoryToolTipGenerator: void <init>()>";
"<renderer.category.LevelRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<time.SerialDate: org.jfree.data.time.SerialDate getEndOfCurrentMonth(org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int,int,int)>";
"<plot.dial.DialCap: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.XYSeries: org.jfree.data.xy.XYSeries createCopy(int,int)>" -> "<org.jfree.data.general.Series: java.lang.Object clone()>";
"<SpiderWebPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<Plot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<LogAxis: void zoomRange(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<demo.BarChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.demo.BarChartDemo1: org.jfree.data.category.CategoryDataset createDataset()>";
"<StandardDialRange: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<axis.PeriodAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<statistics.DefaultMultiValueCategoryDataset: void add(java.util.List,java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<BlockContainer: void <init>(org.jfree.chart.block.Arrangement)>" -> "<org.jfree.chart.block.AbstractBlock: void <init>()>";
"<time.DynamicTimeSeriesCollection: void <init>(int,int,java.util.TimeZone)>" -> "<org.jfree.data.time.Millisecond: void <init>()>";
"<category.AbstractCategoryItemRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<time.Year: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Year: void <init>(java.util.Date,java.util.TimeZone)>";
"<XYLineAndShapeRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeShape(java.awt.Shape,java.io.ObjectOutputStream)>";
"<BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawMultipleEllipse(java.awt.geom.Point2D,double,double,java.awt.Graphics2D)>";
"<CategoryPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<DefaultWindDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<ValueAxis: void resizeRange(double,double)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<time.MovingAverage: org.jfree.data.xy.XYDataset createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,double,double)>" -> "<org.jfree.data.time.MovingAverage: org.jfree.data.xy.XYSeries createMovingAverage(org.jfree.data.xy.XYDataset,int,java.lang.String,double,double)>";
"<plot.FastScatterPlot: void <init>()>" -> "<org.jfree.chart.plot.FastScatterPlot: void <init>(float[][],org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis)>";
"<XYSeriesCollection: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<renderer.xy.XYBarRenderer: void <init>(double)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<XYBoxAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<ModuloAxis: double getDisplayCentralValue()>" -> "<org.jfree.chart.axis.ModuloAxis: double mapValueToFixedRange(double)>";
"<XYPolygonAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<demo.PieChartDemo1: void <init>(java.lang.String)>" -> "<org.jfree.chart.util.ApplicationFrame: void <init>(java.lang.String)>";
"<category.StackedBarRenderer3D: void <init>(double,double,boolean)>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: void <init>(double,double)>";
"<ui.BasicProjectInfo: void setLicenceName(java.lang.String)>" -> "<org.jfree.chart.ui.Library: void setLicenceName(java.lang.String)>";
"<gantt.TaskSeriesCollection: void seriesChanged(org.jfree.data.general.SeriesChangeEvent)>" -> "<org.jfree.data.gantt.TaskSeriesCollection: void refreshKeys()>";
"<needle.PlumNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<renderer.category.AbstractCategoryItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.AbstractRenderer: void <init>()>";
"<dial.StandardDialScale: void setMajorTickStroke(java.awt.Stroke)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<title.TextTitle: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.block.BlockResult: void <init>()>";
"<XYTitleAnnotation: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,double)>";
"<PeriodAxis: void setMinorTickTimePeriodClass(java.lang.Class)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<demo.TimeSeriesChartDemo1: javax.swing.JPanel createDemoPanel()>" -> "<org.jfree.chart.ChartPanel: void <init>(org.jfree.chart.JFreeChart)>";
"<time.TimeTableXYDataset: void setXPosition(org.jfree.data.time.TimePeriodAnchor)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<dial.DialValueIndicator: void setInsets(org.jfree.chart.util.RectangleInsets)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<DialTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<axis.CategoryTick: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.Tick: boolean equals(java.lang.Object)>";
"<time.Month: java.lang.String toString()>" -> "<org.jfree.data.time.SerialDate: java.lang.String monthCodeToString(int)>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYStepChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<CyclicXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>";
"<axis.StandardTickUnitSource: org.jfree.chart.axis.TickUnit getCeilingTickUnit(double)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>";
"<ChartFactory: org.jfree.chart.JFreeChart createWindPlot(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.WindDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>()>";
"<labels.StandardPieSectionLabelGenerator: void <init>()>" -> "<org.jfree.chart.labels.StandardPieSectionLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.NumberFormat)>";
"<PiePlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: boolean equals(java.lang.Object)>";
"<text.TextFragment: org.jfree.chart.util.Size2D calculateDimensions(java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<StandardPieToolTipGenerator: java.lang.Object clone()>" -> "<org.jfree.chart.labels.AbstractPieItemLabelGenerator: java.lang.Object clone()>";
"<ChartFactory: org.jfree.chart.JFreeChart createGanttChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.IntervalCategoryDataset,boolean,boolean,boolean)>" -> "<org.jfree.chart.axis.DateAxis: void <init>(java.lang.String)>";
"<Plot: void removeChangeListener(org.jfree.chart.event.PlotChangeListener)>" -> "<org.jfree.chart.plot.Plot: java.lang.Class class$(java.lang.String)>";
"<category.AbstractCategoryItemRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>";
"<DateRange: void <init>(java.util.Date,java.util.Date)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<SymbolAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<dial.StandardDialScale: void setFirstTickLabelVisible(boolean)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<xy.XYAreaRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<renderer.DefaultPolarItemRenderer: void <init>()>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.Object clone(java.lang.Object)>";
"<LogAxis: void <init>(java.lang.String)>" -> "<org.jfree.chart.axis.LogAxis: org.jfree.chart.axis.TickUnitSource createLogTickUnits(java.util.Locale)>";
"<plot.CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.WindNeedle: void <init>()>";
"<StandardXYItemRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<CandlestickRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<renderer.xy.XYLineAndShapeRenderer: void setLegendLine(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<DialValueIndicator: void setOutlinePaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<plot.ThermometerPlot: void setAxisRange()>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<StatisticalLineAndShapeRenderer: void setErrorIndicatorPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<MarkerAxisBand: void drawStringInRect(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.Font,java.lang.String)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<axis.Axis: void setAxisLineStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<axis.QuarterDateFormat: void <init>(java.util.TimeZone)>" -> "<org.jfree.chart.axis.QuarterDateFormat: void <init>(java.util.TimeZone,java.lang.String[])>";
"<ui.BasicProjectInfo: void setInfo(java.lang.String)>" -> "<org.jfree.chart.ui.Library: void setInfo(java.lang.String)>";
"<plot.DefaultDrawingSupplier: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createHistogram(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.IntervalXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>()>";
"<AbstractRenderer: int hashCode()>" -> "<org.jfree.chart.util.HashUtilities: int hashCode(int,java.awt.Paint)>";
"<DateAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.ValueAxis: boolean equals(java.lang.Object)>";
"<PeriodAxis: void drawTickMarksHorizontal(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.data.time.RegularTimePeriod: org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone)>";
"<CategoryPlot: org.jfree.chart.axis.AxisSpace calculateRangeAxisSpace(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.axis.AxisSpace: void <init>()>";
"<renderer.category.BarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: void <init>()>";
"<axis.PeriodAxis: void setMinorTickMarkStroke(java.awt.Stroke)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<XYBlockRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<axis.ModuloAxis: double getDisplayCentralValue()>" -> "<org.jfree.chart.axis.ModuloAxis: double mapValueToFixedRange(double)>";
"<DefaultIntervalCategoryDataset: java.lang.Number getEndValue(java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.UnknownKeyException: void <init>(java.lang.String)>";
"<xy.XYIntervalSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.xy.XYIntervalSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<plot.CombinedRangeXYPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<xy.XYLineAndShapeRenderer: void setBaseLinesVisible(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<RingPlot: void drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<axis.Axis: void setLabelToolTip(java.lang.String)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<CenterArrangement: org.jfree.chart.util.Size2D arrangeNN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<XYPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.xy.XYItemRenderer)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<axis.PeriodAxis: void drawTickMarksHorizontal(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<StandardDialScale: void setTickLabelPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<PieChartDemo1: void main(java.lang.String[])>" -> "<org.jfree.chart.util.RefineryUtilities: void centerFrameOnScreen(java.awt.Window)>";
"<AbstractBlock: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<plot.dial.DialValueIndicator: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<TimeTableXYDataset: void setDomainIsPointsInTime(boolean)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<plot.CompassPlot: void <init>()>" -> "<org.jfree.chart.plot.CompassPlot: void <init>(org.jfree.data.general.ValueDataset)>";
"<title.PaintScaleLegend: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.ValueAxis: boolean equals(java.lang.Object)>";
"<renderer.category.CategoryStepRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.CategoryStepRenderer: void <init>(boolean)>";
"<general.SubSeriesDataset: void <init>(org.jfree.data.general.SeriesDataset,int[])>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<CombinedDomainCategoryPlot: void add(org.jfree.chart.plot.CategoryPlot,int)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<category.BarRenderer3D: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<time.TimeSeries: org.jfree.data.time.TimeSeries createCopy(int,int)>" -> "<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem)>";
"<XIntervalSeries: void <init>(java.lang.Comparable,boolean,boolean)>" -> "<org.jfree.data.ComparableObjectSeries: void <init>(java.lang.Comparable,boolean,boolean)>";
"<block.BlockContainer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.block.AbstractBlock: boolean equals(java.lang.Object)>";
"<DefaultStatisticalCategoryDataset: void removeRow(java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultStatisticalCategoryDataset: void updateBounds()>";
"<Marker: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<jdbc.JDBCXYDataset: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<needle.MiddlePinNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<time.TimeSeries: void <init>(java.lang.Comparable,java.lang.Class)>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable,java.lang.String,java.lang.String,java.lang.Class)>";
"<renderer.category.BarRenderer3D: void <init>()>" -> "<org.jfree.chart.renderer.category.BarRenderer3D: void <init>(double,double)>";
"<ChartUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo)>" -> "<org.jfree.chart.imagemap.ImageMapUtilities: java.lang.String getImageMap(java.lang.String,org.jfree.chart.ChartRenderingInfo,org.jfree.chart.imagemap.ToolTipTagFragmentGenerator,org.jfree.chart.imagemap.URLTagFragmentGenerator)>";
"<labels.BubbleXYItemLabelGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: boolean equals(java.lang.Object)>";
"<xy.DeviationRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<DefaultPolarItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.AbstractRenderer: void <init>()>";
"<Month: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<axis.CyclicNumberAxis: void <init>(double,double,java.lang.String)>" -> "<org.jfree.chart.axis.NumberAxis: void <init>(java.lang.String)>";
"<NumberAxis: void setAutoRangeIncludesZero(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<CategoryLineAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<LegendItem: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<SymbolAxis: java.util.List refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<general.CombinedDataset: java.lang.Number getEndY(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<annotations.XYTextAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<Layer: void <clinit>()>" -> "<org.jfree.chart.util.Layer: void <init>(java.lang.String)>";
"<block.BorderArrangement: org.jfree.chart.util.Size2D arrangeFN(org.jfree.chart.block.BlockContainer,java.awt.Graphics2D,double)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,double)>";
"<renderer.xy.XYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<axis.SymbolAxis: void setGridBandsVisible(boolean)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<xy.XYDifferenceRenderer: void setPositivePaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<RingPlot: void drawItem(java.awt.Graphics2D,int,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlotState,int)>" -> "<org.jfree.chart.plot.RingPlot: java.awt.geom.Line2D extendLine(java.awt.geom.Line2D,double,double)>";
"<time.Millisecond: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<category.AbstractCategoryItemRenderer: void <init>()>" -> "<org.jfree.chart.util.ObjectList: void <init>()>";
"<renderer.category.WaterfallBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.WaterfallBarRenderer: void <init>(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)>";
"<StackedBarRenderer: void <init>(boolean)>" -> "<org.jfree.chart.labels.ItemLabelPosition: void <init>(org.jfree.chart.labels.ItemLabelAnchor,org.jfree.chart.text.TextAnchor)>";
"<TimeSeries: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.time.TimeSeries: java.lang.Class class$(java.lang.String)>";
"<category.BarRenderer: void drawItemLabel(java.awt.Graphics2D,org.jfree.data.category.CategoryDataset,int,int,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.labels.CategoryItemLabelGenerator,java.awt.geom.Rectangle2D,boolean)>" -> "<org.jfree.chart.text.TextUtilities: void drawRotatedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor,double,org.jfree.chart.text.TextAnchor)>";
"<editor.DefaultPlotEditor: void <init>(org.jfree.chart.plot.Plot)>" -> "<org.jfree.chart.ui.StrokeSample: void <init>(java.awt.Stroke)>";
"<plot.dial.StandardDialRange: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<xy.AbstractXYItemRenderer: void drawDomainMarker(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<renderer.xy.XYBoxAndWhiskerRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<renderer.xy.XYAreaRenderer: void setLegendArea(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYIntervalDataItem: void <init>(double,double,double,double,double,double)>" -> "<org.jfree.data.xy.XYInterval: void <init>(double,double,double,double,double)>";
"<time.Minute: void <init>(int,org.jfree.data.time.Hour)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<DefaultPlotEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultPlotEditor: void attemptBackgroundPaintSelection()>";
"<time.Day: org.jfree.data.time.RegularTimePeriod previous()>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int)>";
"<xy.XYBarRenderer: void setBase(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.XYStepAreaRenderer: void setRangeBase(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<XYDotRenderer: void setLegendShape(java.awt.Shape)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<Marker: void <init>(java.awt.Paint)>" -> "<org.jfree.chart.plot.Marker: void <init>(java.awt.Paint,java.awt.Stroke,java.awt.Paint,java.awt.Stroke,float)>";
"<YIntervalRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<plot.dial.DialCap: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<time.TimeSeriesTableModel: void <init>()>" -> "<org.jfree.data.time.TimeSeries: void <init>(java.lang.Comparable)>";
"<time.MovingAverage: org.jfree.data.xy.XYDataset createMovingAverage(org.jfree.data.xy.XYDataset,java.lang.String,double,double)>" -> "<org.jfree.data.xy.XYSeriesCollection: void <init>()>";
"<dial.StandardDialFrame: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<RectangleConstraint: org.jfree.chart.block.RectangleConstraint toRangeHeight(org.jfree.data.Range)>" -> "<org.jfree.chart.block.RectangleConstraint: void <init>(double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType,double,org.jfree.data.Range,org.jfree.chart.block.LengthConstraintType)>";
"<title.LegendTitle: org.jfree.chart.block.Block createLegendItemBlock(org.jfree.chart.LegendItem)>" -> "<org.jfree.chart.block.BorderArrangement: void <init>()>";
"<Quarter: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.SerialDate: int monthCodeToQuarter(int)>";
"<general.DefaultPieDataset: void <init>(org.jfree.data.KeyedValues)>" -> "<org.jfree.data.general.AbstractDataset: void <init>()>";
"<time.TimePeriodValuesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<LegendTitle: void <init>(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)>" -> "<org.jfree.chart.title.Title: void <init>()>";
"<AbstractDataset: void addChangeListener(org.jfree.data.general.DatasetChangeListener)>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Class class$(java.lang.String)>";
"<XYPolygonAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<axis.Axis: org.jfree.chart.axis.AxisState drawLabel(java.lang.String,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.entity.AxisLabelEntity: void <init>(org.jfree.chart.axis.Axis,java.awt.Shape,java.lang.String,java.lang.String)>";
"<axis.ExtendedCategoryAxis: void setSubLabelPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<renderer.xy.StackedXYAreaRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<SegmentedTimeline: org.jfree.chart.axis.SegmentedTimeline$Segment getSegment(long)>" -> "<org.jfree.chart.axis.SegmentedTimeline$Segment: void <init>(org.jfree.chart.axis.SegmentedTimeline,long)>";
"<renderer.category.AbstractCategoryItemRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<axis.DateAxis: java.util.List refreshTicksHorizontal(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.DateAxis: java.util.Date calculateDateForPosition(org.jfree.data.time.RegularTimePeriod,org.jfree.chart.axis.DateTickMarkPosition)>";
"<time.TimeTableXYDataset: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<dial.DialTextAnnotation: void setAnchor(org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<XYBoxAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<XYSplineAndShapeRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer: void <init>(int)>";
"<BasicProjectInfo: void <init>()>" -> "<org.jfree.chart.ui.Library: void <init>()>";
"<JDBCCategoryDataset: void executeQuery(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCCategoryDataset: void fireDatasetChanged()>";
"<WaterfallBarRenderer: void <init>(java.awt.Paint,java.awt.Paint,java.awt.Paint,java.awt.Paint)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void <init>()>";
"<renderer.xy.XYDifferenceRenderer: void drawItemPass1(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<StandardDialRange: void setPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<category.MinMaxCategoryRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<servlet.ServletUtilities: void sendTempFile(java.lang.String,javax.servlet.http.HttpServletResponse)>" -> "<org.jfree.chart.servlet.ServletUtilities: void sendTempFile(java.io.File,javax.servlet.http.HttpServletResponse)>";
"<plot.dial.StandardDialScale: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<category.LineAndShapeRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>";
"<renderer.xy.XYLine3DRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<plot.dial.ArcDialFrame: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<category.LevelRenderer: void setMaximumItemWidth(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<TimeTableXYDataset: void <init>()>" -> "<org.jfree.data.time.TimeTableXYDataset: void <init>(java.util.TimeZone,java.util.Locale)>";
"<StandardDialScale: void draw(java.awt.Graphics2D,org.jfree.chart.plot.dial.DialPlot,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D drawAlignedString(java.lang.String,java.awt.Graphics2D,float,float,org.jfree.chart.text.TextAnchor)>";
"<CombinedRangeCategoryPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.Range: org.jfree.data.Range combine(org.jfree.data.Range,org.jfree.data.Range)>";
"<XYLineAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<axis.PeriodAxis: void setLast(org.jfree.data.time.RegularTimePeriod)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<XYAreaRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: void <init>(int)>";
"<ComparableObjectSeries: int indexOf(java.lang.Comparable)>" -> "<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>";
"<HighLowRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<xy.XYLineAndShapeRenderer: void setSeriesShapesFilled(int,java.lang.Boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<time.TimeTableXYDataset: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<ChartFactory: org.jfree.chart.JFreeChart createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,org.jfree.chart.axis.Timeline,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<axis.DateAxis: void <init>(java.lang.String,java.util.TimeZone)>" -> "<org.jfree.chart.axis.DateAxis: org.jfree.chart.axis.TickUnitSource createStandardDateTickUnits(java.util.TimeZone)>";
"<util.ObjectUtilities: java.io.InputStream getResourceAsStream(java.lang.String,java.lang.Class)>" -> "<org.jfree.chart.util.ObjectUtilities: java.net.URL getResource(java.lang.String,java.lang.Class)>";
"<renderer.xy.ClusteredXYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>";
"<DefaultTitleEditor: void <init>(org.jfree.chart.title.Title)>" -> "<org.jfree.chart.ui.FontDisplayField: void <init>(java.awt.Font)>";
"<ImageMapUtilities: void writeImageMap(java.io.PrintWriter,java.lang.String,org.jfree.chart.ChartRenderingInfo,boolean)>" -> "<org.jfree.chart.imagemap.StandardURLTagFragmentGenerator: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,org.jfree.data.general.PieDataset,int,boolean,boolean,boolean,java.util.Locale,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardPieToolTipGenerator: void <init>(java.util.Locale)>";
"<plot.dial.DialPointer: void <init>()>" -> "<org.jfree.chart.plot.dial.DialPointer: void <init>(int)>";
"<DefaultTableXYDataset: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<XYLineAndShapeRenderer: void setDrawOutlines(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<axis.DateAxis: java.lang.Object clone()>" -> "<org.jfree.chart.axis.ValueAxis: java.lang.Object clone()>";
"<xy.XYBlockRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<XYLineAndShapeRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape clone(java.awt.Shape)>";
"<plot.Plot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<AbstractRenderer: void removeChangeListener(org.jfree.chart.event.RendererChangeListener)>" -> "<org.jfree.chart.renderer.AbstractRenderer: java.lang.Class class$(java.lang.String)>";
"<BorderArrangement: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<TickType: void <clinit>()>" -> "<org.jfree.chart.axis.TickType: void <init>(java.lang.String)>";
"<CategoryLabelEntity: void <init>(java.lang.Comparable,java.awt.Shape,java.lang.String,java.lang.String)>" -> "<org.jfree.chart.entity.TickLabelEntity: void <init>(java.awt.Shape,java.lang.String,java.lang.String)>";
"<xy.ClusteredXYBarRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: boolean equals(java.lang.Object)>";
"<time.Quarter: long getLastMillisecond(java.util.Calendar)>" -> "<org.jfree.data.time.SerialDate: int lastDayOfMonth(int,int)>";
"<general.DatasetUtilities: org.jfree.data.category.CategoryDataset createCategoryDataset(java.lang.Comparable[],java.lang.Comparable[],double[][])>" -> "<org.jfree.data.category.DefaultCategoryDataset: void <init>()>";
"<DialTextAnnotation: void setAnchor(org.jfree.chart.text.TextAnchor)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<block.BlockContainer: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.entity.StandardEntityCollection: void <init>()>";
"<StandardDialFrame: void setRadius(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<util.ObjectUtilities: java.lang.Object loadAndInstantiate(java.lang.String,java.lang.Class,java.lang.Class)>" -> "<org.jfree.chart.util.ObjectUtilities: java.lang.ClassLoader getClassLoader(java.lang.Class)>";
"<axis.ValueAxis: void setRangeWithMargins(org.jfree.data.Range,boolean,boolean)>" -> "<org.jfree.data.Range: org.jfree.data.Range expand(org.jfree.data.Range,double,double)>";
"<renderer.xy.XYLineAndShapeRenderer: void setUseFillPaint(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.YIntervalDataItem: void <init>(double,double,double,double)>" -> "<org.jfree.data.ComparableObjectItem: void <init>(java.lang.Comparable,java.lang.Object)>";
"<Second: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<XYLineAndShapeRenderer: void <init>(boolean,boolean)>" -> "<org.jfree.chart.util.BooleanList: void <init>()>";
"<PiePlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.DefaultDrawingSupplier: boolean equalShapes(java.awt.Shape[],java.awt.Shape[])>" -> "<org.jfree.chart.util.ShapeUtilities: boolean equal(java.awt.Shape,java.awt.Shape)>";
"<XYDrawableAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<JFreeChartInfo: void <init>()>" -> "<org.jfree.chart.ui.Licences: org.jfree.chart.ui.Licences getInstance()>";
"<CyclicXYItemRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>()>";
"<util.StrokeList: java.lang.Object clone()>" -> "<org.jfree.chart.util.AbstractObjectList: java.lang.Object clone()>";
"<DateTitle: void <init>(int)>" -> "<org.jfree.chart.title.DateTitle: void <init>(int,java.util.Locale,java.awt.Font,java.awt.Paint)>";
"<editor.DefaultTitleEditor: void setTitleProperties(org.jfree.chart.JFreeChart)>" -> "<org.jfree.chart.title.TextTitle: void <init>()>";
"<DefaultIntervalCategoryDataset: void <init>(java.lang.String[],java.lang.Number[][],java.lang.Number[][])>" -> "<org.jfree.data.category.DefaultIntervalCategoryDataset: void <init>(java.lang.Comparable[],java.lang.Comparable[],java.lang.Number[][],java.lang.Number[][])>";
"<Quarter: void <init>(java.util.Date)>" -> "<org.jfree.data.time.Quarter: void <init>(java.util.Date,java.util.TimeZone)>";
"<Statistics: double calculateMean(java.lang.Number[])>" -> "<org.jfree.data.statistics.Statistics: double calculateMean(java.lang.Number[],boolean)>";
"<VectorRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<needle.ShipNeedle: void <init>()>" -> "<org.jfree.chart.needle.MeterNeedle: void <init>()>";
"<XYShapeAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<SpiderWebPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<PlotRenderingInfo: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<category.GroupedStackedBarRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.StackedBarRenderer: void <init>()>";
"<Marker: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<CategoryStepRenderer: void <init>()>" -> "<org.jfree.chart.renderer.category.CategoryStepRenderer: void <init>(boolean)>";
"<CyclicNumberAxis: org.jfree.chart.axis.AxisSpace reserveSpace(java.awt.Graphics2D,org.jfree.chart.plot.Plot,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,org.jfree.chart.axis.AxisSpace)>" -> "<org.jfree.chart.text.TextUtilities: java.awt.geom.Rectangle2D getTextBounds(java.lang.String,java.awt.Graphics2D,java.awt.FontMetrics)>";
"<renderer.WaferMapRenderer: void <init>(int,int)>" -> "<org.jfree.chart.renderer.WaferMapRenderer: void <init>(java.lang.Integer,java.lang.Integer)>";
"<renderer.xy.WindItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>()>";
"<category.BarRenderer3D: void setWallPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<plot.Marker: void setLabel(java.lang.String)>" -> "<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>";
"<StackedXYAreaRenderer2: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer2: double[] getStackValues(org.jfree.data.xy.TableXYDataset,int,int)>";
"<dial.StandardDialFrame: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<xy.XIntervalSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>" -> "<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>";
"<DatasetReader: org.jfree.data.category.CategoryDataset readCategoryDatasetFromXML(java.io.File)>" -> "<org.jfree.data.xml.DatasetReader: org.jfree.data.category.CategoryDataset readCategoryDatasetFromXML(java.io.InputStream)>";
"<category.AbstractCategoryItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.AbstractRenderer: boolean equals(java.lang.Object)>";
"<renderer.xy.XYBarRenderer: org.jfree.chart.LegendItem getLegendItem(int,int)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint)>";
"<axis.ModuloAxis: double valueToJava2D(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.ModuloAxis: double transEnd(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge,double,double)>";
"<editor.DefaultNumberAxisEditor: void attemptGridStrokeSelection()>" -> "<org.jfree.chart.ui.StrokeChooserPanel: void <init>(org.jfree.chart.ui.StrokeSample,org.jfree.chart.ui.StrokeSample[])>";
"<DialCap: void setOutlinePaint(java.awt.Paint)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<KeyToGroupMap: java.util.Collection clone(java.util.Collection)>" -> "<org.jfree.data.KeyToGroupMap: java.lang.Object clone(java.lang.Object)>";
"<plot.dial.ArcDialFrame: void setExtent(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<axis.CyclicNumberAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<renderer.xy.CandlestickRenderer: void <init>(double,boolean,org.jfree.chart.labels.XYToolTipGenerator)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: void <init>()>";
"<axis.LogAxis: java.util.List refreshTicks(java.awt.Graphics2D,org.jfree.chart.axis.AxisState,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<Hour: void <init>()>" -> "<org.jfree.data.time.Hour: void <init>(java.util.Date)>";
"<axis.CyclicNumberAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<xy.XYSplineAndShapeRenderer: void <init>()>" -> "<org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer: void <init>(int)>";
"<SimpleHistogramDataset: void <init>(java.lang.Comparable)>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: void <init>()>";
"<JDBCXYDataset: void executeQuery(java.sql.Connection,java.lang.String)>" -> "<org.jfree.data.jdbc.JDBCXYDataset: void fireDatasetChanged()>";
"<xy.StackedXYBarRenderer: int hashCode()>" -> "<org.jfree.chart.renderer.xy.XYBarRenderer: int hashCode()>";
"<Second: void <init>(int,org.jfree.data.time.Minute)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<xy.StackedXYAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<xy.DefaultIntervalXYDataset: java.lang.Object clone()>" -> "<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>";
"<general.DatasetUtilities: org.jfree.data.general.PieDataset createPieDatasetForRow(org.jfree.data.category.CategoryDataset,int)>" -> "<org.jfree.data.general.DefaultPieDataset: void <init>()>";
"<FixedMillisecond: void <init>(long)>" -> "<org.jfree.data.time.FixedMillisecond: void <init>(java.util.Date)>";
"<util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: boolean isSerializable(java.lang.Class)>";
"<CombinedDataset: java.lang.Number getOpen(int,int)>" -> "<org.jfree.data.general.CombinedDataset: org.jfree.data.general.CombinedDataset$DatasetInfo getDatasetInfo(int)>";
"<DialValueIndicator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<xy.XYBarRenderer: void setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<category.MinMaxCategoryRenderer: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<ChartPanel: void doEditChartProperties()>" -> "<org.jfree.chart.editor.ChartEditorManager: org.jfree.chart.editor.ChartEditor getChartEditor(org.jfree.chart.JFreeChart)>";
"<plot.CombinedRangeCategoryPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.CategoryPlot: boolean equals(java.lang.Object)>";
"<renderer.xy.XYSplineAndShapeRenderer: void drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,int,int,int,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>" -> "<org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer$ControlPoint: void <init>(org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer,float,float)>";
"<TextTitle: org.jfree.chart.util.Size2D arrangeRR(java.awt.Graphics2D,org.jfree.data.Range,org.jfree.data.Range)>" -> "<org.jfree.chart.text.G2TextMeasurer: void <init>(java.awt.Graphics2D)>";
"<general.CombinedDataset: java.lang.Number getLow(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<renderer.category.LineRenderer3D: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<plot.ThermometerPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.axis.NumberAxis: org.jfree.chart.axis.TickUnitSource createIntegerTickUnits()>";
"<plot.PiePlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: boolean isEmptyOrNull(org.jfree.data.general.PieDataset)>";
"<time.Second: void <init>(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.data.time.RegularTimePeriod: void <init>()>";
"<DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>";
"<ChartFactory: org.jfree.chart.JFreeChart createMultiplePieChart3D(java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.util.TableOrder,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(org.jfree.chart.plot.Plot)>";
"<plot.XYPlot: org.jfree.data.Range getDataRange(org.jfree.chart.axis.ValueAxis)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>";
"<StandardPieURLGenerator: void <init>()>" -> "<org.jfree.chart.urls.StandardPieURLGenerator: void <init>(java.lang.String)>";
"<title.PaintScaleLegend: void setBackgroundPaint(java.awt.Paint)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<annotations.TextAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<io.CSV: org.jfree.data.category.CategoryDataset readCategoryDataset(java.io.Reader)>" -> "<org.jfree.data.io.CSV: void extractRowKeyAndData(java.lang.String,org.jfree.data.category.DefaultCategoryDataset,java.util.List)>";
"<DefaultStatisticalCategoryDataset: void clear()>" -> "<org.jfree.data.statistics.DefaultStatisticalCategoryDataset: void updateBounds()>";
"<LineBorder: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<SpiderWebPlot: org.jfree.chart.LegendItemCollection getLegendItems()>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>";
"<servlet.ServletUtilities: java.lang.String saveChartAsJPEG(org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo,javax.servlet.http.HttpSession)>" -> "<org.jfree.chart.ChartUtilities: void saveChartAsJPEG(java.io.File,org.jfree.chart.JFreeChart,int,int,org.jfree.chart.ChartRenderingInfo)>";
"<plot.CategoryPlot: org.jfree.chart.util.RectangleEdge getDomainAxisEdge(int)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<PaintScaleLegend: org.jfree.chart.util.Size2D arrange(java.awt.Graphics2D,org.jfree.chart.block.RectangleConstraint)>" -> "<org.jfree.chart.util.Size2D: void <init>(double,double)>";
"<XYErrorRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>";
"<AbstractXYItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<LegendGraphic: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<XYTitleAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<plot.dial.DialTextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<title.TextTitle: void setFont(java.awt.Font)>" -> "<org.jfree.chart.event.TitleChangeEvent: void <init>(org.jfree.chart.title.Title)>";
"<xy.AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<JThermometer: void addSubtitle(java.lang.String,java.awt.Font)>" -> "<org.jfree.chart.title.TextTitle: void <init>(java.lang.String,java.awt.Font)>";
"<XYTextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.PaintUtilities: boolean equal(java.awt.Paint,java.awt.Paint)>";
"<SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.lang.Class class$(java.lang.String)>";
"<xy.XYBlockRenderer: void setBlockAnchor(org.jfree.chart.util.RectangleAnchor)>" -> "<org.jfree.chart.renderer.xy.XYBlockRenderer: void updateOffsets()>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<DialPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.dial.DialPlot: java.awt.geom.Rectangle2D viewToFrame(java.awt.geom.Rectangle2D)>";
"<LegendItemEntity: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.entity.ChartEntity: boolean equals(java.lang.Object)>";
"<xy.AbstractXYItemRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<renderer.category.LineRenderer3D: void setYOffset(double)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<category.LineAndShapeRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<renderer.xy.StandardXYItemRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<TimePeriodValues: org.jfree.data.time.TimePeriodValues createCopy(int,int)>" -> "<org.jfree.data.time.TimePeriodValues: void add(org.jfree.data.time.TimePeriodValue)>";
"<StandardDialRange: void setLowerBound(double)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<annotations.XYBoxAnnotation: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<GanttRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.category.IntervalBarRenderer: boolean equals(java.lang.Object)>";
"<xy.XYStepRenderer: void <init>(org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.xy.XYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<title.PaintScaleLegend: java.lang.Object draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.lang.Object)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<xy.YIntervalDataItem: void <init>(double,double,double,double)>" -> "<org.jfree.data.xy.YInterval: void <init>(double,double,double)>";
"<category.AbstractCategoryItemRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<time.Minute: void <init>(int,int,int,int,int)>" -> "<org.jfree.data.time.Minute: void <init>(int,org.jfree.data.time.Hour)>";
"<labels.StandardCategoryToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat)>" -> "<org.jfree.chart.labels.AbstractCategoryItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat)>";
"<Second: org.jfree.data.time.Second parseSecond(java.lang.String)>" -> "<org.jfree.data.time.Second: void <init>(int,org.jfree.data.time.Minute)>";
"<Minute: org.jfree.data.time.Hour getHour()>" -> "<org.jfree.data.time.Hour: void <init>(int,org.jfree.data.time.Day)>";
"<XYPlot: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>";
"<annotations.CategoryTextAnnotation: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.annotations.TextAnnotation: boolean equals(java.lang.Object)>";
"<text.TextBlock: void addLine(java.lang.String,java.awt.Font,java.awt.Paint)>" -> "<org.jfree.chart.text.TextLine: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.data.general.AbstractDataset: java.lang.Object clone()>";
"<axis.DateAxis: void <init>(java.lang.String,java.util.TimeZone)>" -> "<org.jfree.chart.axis.ValueAxis: void <init>(java.lang.String,org.jfree.chart.axis.TickUnitSource)>";
"<PolarPlot: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<annotations.XYBoxAnnotation: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Paint readPaint(java.io.ObjectInputStream)>";
"<XYBlockRenderer: void <init>()>" -> "<org.jfree.chart.renderer.LookupPaintScale: void <init>()>";
"<BasicProjectInfo: void setName(java.lang.String)>" -> "<org.jfree.chart.ui.Library: void setName(java.lang.String)>";
"<renderer.xy.StandardXYItemRenderer: org.jfree.chart.renderer.xy.XYItemRendererState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.XYPlot,org.jfree.data.xy.XYDataset,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer$State: int access$002(org.jfree.chart.renderer.xy.StandardXYItemRenderer$State,int)>";
"<axis.DateTickUnit: java.util.Date rollDate(java.util.Date,java.util.TimeZone)>" -> "<org.jfree.chart.axis.DateTickUnit: int getCalendarField(int)>";
"<util.StandardGradientPaintTransformer: void <init>()>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>(org.jfree.chart.util.GradientPaintTransformType)>";
"<plot.FastScatterPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writeStroke(java.awt.Stroke,java.io.ObjectOutputStream)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.JFreeChart: void <init>(java.lang.String,java.awt.Font,org.jfree.chart.plot.Plot,boolean)>";
"<ThermometerPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>" -> "<org.jfree.chart.plot.ThermometerPlot: boolean inSubrange(int,double)>";
"<time.Month: org.jfree.data.time.RegularTimePeriod next()>" -> "<org.jfree.data.time.Month: void <init>(int,int)>";
"<DefaultNumberAxisEditor: void <init>(org.jfree.chart.axis.NumberAxis)>" -> "<org.jfree.chart.ui.StrokeSample: void <init>(java.awt.Stroke)>";
"<StandardXYToolTipGenerator: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: boolean equals(java.lang.Object)>";
"<block.AbstractBlock: void setMargin(double,double,double,double)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<axis.CyclicNumberAxis: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<xy.StackedXYAreaRenderer: void <init>(int)>" -> "<org.jfree.chart.renderer.xy.StackedXYAreaRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<xy.XYStepRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<LegendTitle: void <init>(org.jfree.chart.LegendItemSource,org.jfree.chart.block.Arrangement,org.jfree.chart.block.Arrangement)>" -> "<org.jfree.chart.util.RectangleInsets: void <init>(double,double,double,double)>";
"<labels.StandardXYToolTipGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.DateFormat)>" -> "<org.jfree.chart.labels.AbstractXYItemLabelGenerator: void <init>(java.lang.String,java.text.NumberFormat,java.text.DateFormat)>";
"<general.CombinedDataset: java.lang.Number getOpen(int,int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<TimeSeriesCollection: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<plot.CategoryPlot: void drawRangeMarkers(java.awt.Graphics2D,java.awt.geom.Rectangle2D,int,org.jfree.chart.util.Layer)>" -> "<org.jfree.chart.renderer.category.BarRenderer: void drawRangeMarker(java.awt.Graphics2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.plot.Marker,java.awt.geom.Rectangle2D)>";
"<SerialDate: org.jfree.data.time.SerialDate addMonths(int,org.jfree.data.time.SerialDate)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate createInstance(int,int,int)>";
"<statistics.DefaultBoxAndWhiskerCategoryDataset: void add(org.jfree.data.statistics.BoxAndWhiskerItem,java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset: void updateBounds()>";
"<XYLineAnnotation: void <init>(double,double,double,double,java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
"<time.SerialDate: org.jfree.data.time.SerialDate getPreviousDayOfWeek(int)>" -> "<org.jfree.data.time.SerialDate: org.jfree.data.time.SerialDate getPreviousDayOfWeek(int,org.jfree.data.time.SerialDate)>";
"<MeterPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.data.Range: void <init>(double,double)>";
"<util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,org.jfree.chart.util.RectangleAnchor,double,double)>" -> "<org.jfree.chart.util.RectangleAnchor: java.awt.geom.Point2D coordinates(java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleAnchor)>";
"<XYTitleAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.block.BlockParams: void <init>()>";
"<DefaultTableXYDataset: org.jfree.data.Range getDomainBounds(boolean)>" -> "<org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateDomainBounds(org.jfree.data.xy.XYDataset,boolean)>";
"<renderer.xy.AbstractXYItemRenderer: java.lang.Object clone()>" -> "<org.jfree.chart.title.Title: java.lang.Object clone()>";
"<plot.CombinedDomainXYPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotRenderingInfo: void <init>(org.jfree.chart.ChartRenderingInfo)>";
"<xy.VectorSeries: void add(double,double,double,double)>" -> "<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>";
"<axis.ExtendedCategoryAxis: org.jfree.chart.text.TextBlock createLabel(java.lang.Comparable,float,org.jfree.chart.util.RectangleEdge,java.awt.Graphics2D)>" -> "<org.jfree.chart.text.TextFragment: void <init>(java.lang.String,java.awt.Font,java.awt.Paint)>";
"<demo.PieChartDemo1: org.jfree.chart.JFreeChart createChart(org.jfree.data.general.PieDataset)>" -> "<org.jfree.chart.ChartFactory: org.jfree.chart.JFreeChart createPieChart(java.lang.String,org.jfree.data.general.PieDataset,boolean,boolean,boolean)>";
"<plot.FastScatterPlot: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.PiePlot: void drawLeftLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.TextBox: void <init>(org.jfree.chart.text.TextBlock)>";
"<renderer.category.LineRenderer3D: void <init>()>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void <init>(boolean,boolean)>";
"<axis.CategoryLabelPositions: void <clinit>()>" -> "<org.jfree.chart.axis.CategoryLabelPositions: void <init>(org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition,org.jfree.chart.axis.CategoryLabelPosition)>";
"<ChartFactory: org.jfree.chart.JFreeChart createHighLowChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.OHLCDataset,org.jfree.chart.axis.Timeline,boolean)>" -> "<org.jfree.chart.renderer.xy.HighLowRenderer: void <init>()>";
"<xy.HighLowRenderer: void setDrawOpenTicks(boolean)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<io.CSV: void <init>()>" -> "<org.jfree.data.io.CSV: void <init>(char,char)>";
"<plot.PolarPlot: void <init>(org.jfree.data.xy.XYDataset,org.jfree.chart.axis.ValueAxis,org.jfree.chart.renderer.PolarItemRenderer)>" -> "<org.jfree.chart.axis.NumberTickUnit: void <init>(double)>";
"<CombinedRangeCategoryPlot: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PlotState: void <init>()>";
"<DateTitle: void <init>()>" -> "<org.jfree.chart.title.DateTitle: void <init>(int)>";
"<renderer.AbstractRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Stroke readStroke(java.io.ObjectInputStream)>";
"<PointerNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<XYPointerAnnotation: void <init>(java.lang.String,double,double,double)>" -> "<org.jfree.chart.annotations.XYTextAnnotation: void <init>(java.lang.String,double,double)>";
"<CombinedDataset: int getItemCount(int)>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: int access$000(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<plot.CategoryPlot: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<plot.PiePlot: void drawRightLabels(org.jfree.data.KeyedValues,java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,float,org.jfree.chart.plot.PiePlotState)>" -> "<org.jfree.chart.text.G2TextMeasurer: void <init>(java.awt.Graphics2D)>";
"<axis.CyclicNumberAxis: double java2DToValue(double,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.util.RectangleEdge: boolean isTopOrBottom(org.jfree.chart.util.RectangleEdge)>";
"<axis.CategoryAxis: void removeCategoryLabelToolTip(java.lang.Comparable)>" -> "<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>";
"<ChartFactory: org.jfree.chart.JFreeChart createBubbleChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.XYZDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.labels.StandardXYZToolTipGenerator: void <init>()>";
"<CompassPlot: void <init>(org.jfree.data.general.ValueDataset)>" -> "<org.jfree.chart.plot.Plot: void <init>()>";
"<plot.XYPlot: void setDataset(int,org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<SerialDate: int lastDayOfMonth(int,int)>" -> "<org.jfree.data.time.SerialDate: boolean isLeapYear(int)>";
"<editor.DefaultNumberAxisEditor: void actionPerformed(java.awt.event.ActionEvent)>" -> "<org.jfree.chart.editor.DefaultNumberAxisEditor: void attemptGridStrokeSelection()>";
"<xy.XYSeriesCollection: void <init>(org.jfree.data.xy.XYSeries)>" -> "<org.jfree.data.xy.IntervalXYDelegate: void <init>(org.jfree.data.xy.XYDataset,boolean)>";
"<dial.StandardDialScale: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: boolean equals(java.lang.Object)>";
"<XYBlockRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<general.CombinedDataset: int[] getMap()>" -> "<org.jfree.data.general.CombinedDataset$DatasetInfo: org.jfree.data.general.SeriesDataset access$100(org.jfree.data.general.CombinedDataset$DatasetInfo)>";
"<axis.DateAxis: void autoAdjustRange()>" -> "<org.jfree.data.time.DateRange: void <init>()>";
"<Marker: void notifyListeners(org.jfree.chart.event.MarkerChangeEvent)>" -> "<org.jfree.chart.plot.Marker: java.lang.Class class$(java.lang.String)>";
"<dial.DialBackground: void <init>(java.awt.Paint)>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>()>";
"<axis.DateAxis: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.axis.ValueAxis: boolean equals(java.lang.Object)>";
"<XYTextAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<plot.PolarPlot: void setDataset(org.jfree.data.xy.XYDataset)>" -> "<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>";
"<plot.ThermometerPlot: void setDisplayRange(int,double,double)>" -> "<org.jfree.chart.plot.ThermometerPlot: boolean isValidNumber(double)>";
"<plot.CategoryPlot: org.jfree.chart.util.RectangleEdge getRangeAxisEdge(int)>" -> "<org.jfree.chart.util.RectangleEdge: org.jfree.chart.util.RectangleEdge opposite(org.jfree.chart.util.RectangleEdge)>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedBarChart3D(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardCategoryURLGenerator: void <init>()>";
"<plot.dial.DialBackground: void <init>(java.awt.Paint)>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>()>";
"<plot.MeterInterval: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<renderer.xy.StandardXYItemRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<PeriodAxisLabelInfo: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<plot.dial.DialValueIndicator: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<DeviationRenderer: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.XYLineAndShapeRenderer: boolean equals(java.lang.Object)>";
"<DefaultBoxAndWhiskerCategoryDataset: void removeRow(int)>" -> "<org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset: void updateBounds()>";
"<DialTextAnnotation: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<StandardDialScale: void writeObject(java.io.ObjectOutputStream)>" -> "<org.jfree.chart.util.SerialUtilities: void writePaint(java.awt.Paint,java.io.ObjectOutputStream)>";
"<DialTextAnnotation: void setFont(java.awt.Font)>" -> "<org.jfree.chart.plot.dial.DialLayerChangeEvent: void <init>(org.jfree.chart.plot.dial.DialLayer)>";
"<axis.NumberAxis: java.util.List refreshTicksVertical(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.util.RectangleEdge)>" -> "<org.jfree.chart.axis.NumberTick: void <init>(java.lang.Number,java.lang.String,org.jfree.chart.text.TextAnchor,org.jfree.chart.text.TextAnchor,double)>";
"<CompassPlot: void setSeriesNeedle(int,int)>" -> "<org.jfree.chart.needle.PointerNeedle: void <init>()>";
"<util.LengthAdjustmentType: void <clinit>()>" -> "<org.jfree.chart.util.LengthAdjustmentType: void <init>(java.lang.String)>";
"<BoxAndWhiskerRenderer: void drawVerticalItem(java.awt.Graphics2D,org.jfree.chart.renderer.category.CategoryItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.CategoryPlot,org.jfree.chart.axis.CategoryAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.category.CategoryDataset,int,int)>" -> "<org.jfree.chart.renderer.category.BoxAndWhiskerRenderer: void drawEllipse(java.awt.geom.Point2D,double,java.awt.Graphics2D)>";
"<XYDrawableAnnotation: void draw(java.awt.Graphics2D,org.jfree.chart.plot.XYPlot,java.awt.geom.Rectangle2D,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,int,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.Plot: org.jfree.chart.util.RectangleEdge resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation,org.jfree.chart.plot.PlotOrientation)>";
"<PinNeedle: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.needle.MeterNeedle: boolean equals(java.lang.Object)>";
"<StackedXYAreaRenderer: void drawItem(java.awt.Graphics2D,org.jfree.chart.renderer.xy.XYItemRendererState,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PlotRenderingInfo,org.jfree.chart.plot.XYPlot,org.jfree.chart.axis.ValueAxis,org.jfree.chart.axis.ValueAxis,org.jfree.data.xy.XYDataset,int,int,org.jfree.chart.plot.CrosshairState,int)>" -> "<org.jfree.chart.util.ShapeUtilities: java.awt.Shape createTranslatedShape(java.awt.Shape,double,double)>";
"<renderer.category.MinMaxCategoryRenderer: void setObjectIcon(javax.swing.Icon)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<xy.XYAreaRenderer2: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean equals(java.lang.Object)>";
"<AbstractRenderer: void readObject(java.io.ObjectInputStream)>" -> "<org.jfree.chart.util.SerialUtilities: java.awt.Shape readShape(java.io.ObjectInputStream)>";
"<plot.RingPlot: org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.chart.plot.PiePlot: org.jfree.chart.plot.PiePlotState initialise(java.awt.Graphics2D,java.awt.geom.Rectangle2D,org.jfree.chart.plot.PiePlot,java.lang.Integer,org.jfree.chart.plot.PlotRenderingInfo)>";
"<DefaultStatisticalCategoryDataset: void remove(java.lang.Comparable,java.lang.Comparable)>" -> "<org.jfree.data.statistics.DefaultStatisticalCategoryDataset: void updateBounds()>";
"<CyclicXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>" -> "<org.jfree.chart.renderer.xy.StandardXYItemRenderer: void <init>(int,org.jfree.chart.labels.XYToolTipGenerator,org.jfree.chart.urls.XYURLGenerator)>";
"<ohlc.OHLCSeriesCollection: void <init>()>" -> "<org.jfree.data.xy.AbstractXYDataset: void <init>()>";
"<AbstractRenderer: void <init>()>" -> "<org.jfree.chart.util.ShapeList: void <init>()>";
"<PiePlot3D: void draw(java.awt.Graphics2D,java.awt.geom.Rectangle2D,java.awt.geom.Point2D,org.jfree.chart.plot.PlotState,org.jfree.chart.plot.PlotRenderingInfo)>" -> "<org.jfree.data.general.DatasetUtilities: double calculatePieDatasetTotal(org.jfree.data.general.PieDataset)>";
"<DialPointer: java.lang.Object clone()>" -> "<org.jfree.chart.plot.dial.AbstractDialLayer: java.lang.Object clone()>";
"<CombinedRangeXYPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>" -> "<org.jfree.chart.plot.XYPlot: void setOrientation(org.jfree.chart.plot.PlotOrientation)>";
"<CategoryPointerAnnotation: void <init>(java.lang.String,java.lang.Comparable,double,double)>" -> "<org.jfree.chart.annotations.CategoryTextAnnotation: void <init>(java.lang.String,java.lang.Comparable,double)>";
"<LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.awt.Shape,java.awt.Paint,java.awt.Stroke,java.awt.Paint)>" -> "<org.jfree.chart.LegendItem: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.awt.Shape,boolean,java.awt.Paint,boolean,java.awt.Paint,java.awt.Stroke,boolean,java.awt.Shape,java.awt.Stroke,java.awt.Paint)>";
"<ChartFactory: org.jfree.chart.JFreeChart createLineChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.category.CategoryDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.renderer.category.LineAndShapeRenderer: void <init>(boolean,boolean)>";
"<DefaultKeyedValueDataset: boolean equals(java.lang.Object)>" -> "<org.jfree.chart.util.ObjectUtilities: boolean equal(java.lang.Object,java.lang.Object)>";
"<time.Quarter: void <init>()>" -> "<org.jfree.data.time.Quarter: void <init>(java.util.Date)>";
"<renderer.xy.XYBarRenderer: void setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)>" -> "<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>";
"<BarRenderer: void <init>()>" -> "<org.jfree.chart.util.StandardGradientPaintTransformer: void <init>()>";
"<ChartFactory: org.jfree.chart.JFreeChart createStackedXYAreaChart(java.lang.String,java.lang.String,java.lang.String,org.jfree.data.xy.TableXYDataset,org.jfree.chart.plot.PlotOrientation,boolean,boolean,boolean)>" -> "<org.jfree.chart.urls.StandardXYURLGenerator: void <init>()>";
"<annotations.XYTextAnnotation: void <init>(java.lang.String,double,double)>" -> "<org.jfree.chart.annotations.AbstractXYAnnotation: void <init>()>";
}
